paddle.Tensor.__abs__(Tensor([1],"float32"), )
paddle.Tensor.__abs__(Tensor([],"float32"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 64],"bool"), Tensor([2, 1, 1, 64],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 90],"bool"), Tensor([2, 1, 1, 90],"bool"), )
paddle.Tensor.__and__(Tensor([2, 20, 20],"int32"), Tensor([2, 20, 1],"int32"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 56],"bool"), Tensor([2, 1, 1, 56],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 61],"bool"), Tensor([2, 1, 1, 61],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 97],"bool"), Tensor([2, 1, 1, 97],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 88],"bool"), Tensor([2, 1, 1, 88],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 36],"bool"), Tensor([2, 1, 1, 36],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 96],"bool"), Tensor([2, 1, 1, 96],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 59],"bool"), Tensor([2, 1, 1, 59],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 91],"bool"), Tensor([2, 1, 1, 91],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 95],"bool"), Tensor([2, 1, 1, 95],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 69],"bool"), Tensor([2, 1, 1, 69],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 45],"bool"), Tensor([2, 1, 1, 45],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 42],"bool"), Tensor([2, 1, 1, 42],"bool"), )
paddle.Tensor.__and__(Tensor([2, 10, 10],"int32"), Tensor([2, 10, 1],"int32"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 75],"bool"), Tensor([2, 1, 1, 75],"bool"), )
paddle.Tensor.__and__(Tensor([8, 8],"bool"), Tensor([8, 8],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 104],"bool"), Tensor([2, 1, 1, 104],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 55],"bool"), Tensor([2, 1, 1, 55],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 89],"bool"), Tensor([2, 1, 1, 89],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 103],"bool"), Tensor([2, 1, 1, 103],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 87],"bool"), Tensor([2, 1, 1, 87],"bool"), )
paddle.Tensor.__and__(Tensor([13, 1, 3, 10],"bool"), Tensor([13, 1, 3, 10],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 83],"bool"), Tensor([2, 1, 1, 83],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 52],"bool"), Tensor([2, 1, 1, 52],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 74],"bool"), Tensor([2, 1, 1, 74],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 79],"bool"), Tensor([2, 1, 1, 79],"bool"), )
paddle.Tensor.__and__(Tensor([108],"int32"), Tensor([108],"int32"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 44],"bool"), Tensor([2, 1, 1, 44],"bool"), )
paddle.Tensor.__and__(Tensor([6, 1, 5, 5],"bool"), Tensor([6, 1, 5, 5],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 70],"bool"), Tensor([2, 1, 1, 70],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 53],"bool"), Tensor([2, 1, 1, 53],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 41],"bool"), Tensor([2, 1, 1, 41],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 98],"bool"), Tensor([2, 1, 1, 98],"bool"), )
paddle.Tensor.__and__(Tensor([14, 1, 1, 8],"int64"), Tensor([1, 1, 8, 8],"int64"), )
paddle.Tensor.__and__(Tensor([2, 1, 3, 23],"bool"), Tensor([2, 1, 3, 23],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 68],"bool"), Tensor([2, 1, 1, 68],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 47],"bool"), Tensor([2, 1, 1, 47],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 71],"bool"), Tensor([2, 1, 1, 71],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 85],"bool"), Tensor([2, 1, 1, 85],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 63],"bool"), Tensor([2, 1, 1, 63],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 84],"bool"), Tensor([2, 1, 1, 84],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 66],"bool"), Tensor([2, 1, 1, 66],"bool"), )
paddle.Tensor.__and__(Tensor([200],"bool"), Tensor([200],"bool"), )
paddle.Tensor.__and__(Tensor([2, 8, 8],"bool"), Tensor([2, 8, 8],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 78],"bool"), Tensor([2, 1, 1, 78],"bool"), )
paddle.Tensor.__and__(Tensor([4, 1, 5, 5],"bool"), Tensor([4, 1, 5, 5],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 94],"bool"), Tensor([2, 1, 1, 94],"bool"), )
paddle.Tensor.__and__(Tensor([450],"int32"), Tensor([450],"int32"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 76],"bool"), Tensor([2, 1, 1, 76],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 40],"bool"), Tensor([2, 1, 1, 40],"bool"), )
paddle.Tensor.__and__(Tensor([1, 1, 20, 20],"bool"), Tensor([1, 1, 20, 20],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 5, 5],"bool"), Tensor([2, 1, 5, 5],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 58],"bool"), Tensor([2, 1, 1, 58],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 81],"bool"), Tensor([2, 1, 1, 81],"bool"), )
paddle.Tensor.__and__(Tensor([14, 1, 1, 10],"int64"), Tensor([1, 1, 3, 10],"int64"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 60],"bool"), Tensor([2, 1, 1, 60],"bool"), )
paddle.Tensor.__and__(Tensor([414],"int32"), Tensor([414],"int32"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 72],"bool"), Tensor([2, 1, 1, 72],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 57],"bool"), Tensor([2, 1, 1, 57],"bool"), )
paddle.Tensor.__and__(Tensor([14, 1, 1, 10],"int64"), Tensor([1, 1, 10, 10],"int64"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 102],"bool"), Tensor([2, 1, 1, 102],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 39],"bool"), Tensor([2, 1, 1, 39],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 77],"bool"), Tensor([2, 1, 1, 77],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 10, 10],"bool"), Tensor([2, 1, 10, 10],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 48],"bool"), Tensor([2, 1, 1, 48],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 67],"bool"), Tensor([2, 1, 1, 67],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 73],"bool"), Tensor([2, 1, 1, 73],"bool"), )
paddle.Tensor.__and__(Tensor([432],"int32"), Tensor([432],"int32"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 43],"bool"), Tensor([2, 1, 1, 43],"bool"), )
paddle.Tensor.__and__(Tensor([14, 1, 1, 7],"int64"), Tensor([1, 1, 7, 7],"int64"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 54],"bool"), Tensor([2, 1, 1, 54],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 80],"bool"), Tensor([2, 1, 1, 80],"bool"), )
paddle.Tensor.__and__(Tensor([4, 1, 10, 10],"bool"), Tensor([4, 1, 10, 10],"bool"), )
paddle.Tensor.__and__(Tensor([117],"int32"), Tensor([117],"int32"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 93],"bool"), Tensor([2, 1, 1, 93],"bool"), )
paddle.Tensor.__and__(Tensor([80],"int32"), Tensor([80],"int32"), )
paddle.Tensor.__and__(Tensor([128],"bool"), Tensor([128],"bool"), )
paddle.Tensor.__and__(Tensor([384],"bool"), Tensor([384],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 82],"bool"), Tensor([2, 1, 1, 82],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 99],"bool"), Tensor([2, 1, 1, 99],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 37],"bool"), Tensor([2, 1, 1, 37],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 100],"bool"), Tensor([2, 1, 1, 100],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 92],"bool"), Tensor([2, 1, 1, 92],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 51],"bool"), Tensor([2, 1, 1, 51],"bool"), )
paddle.Tensor.__and__(Tensor([1, 1, 20, 22],"bool"), Tensor([1, 1, 20, 22],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 86],"bool"), Tensor([2, 1, 1, 86],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 49],"bool"), Tensor([2, 1, 1, 49],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 50],"bool"), Tensor([2, 1, 1, 50],"bool"), )
paddle.Tensor.__and__(Tensor([14, 1, 1, 8],"int64"), Tensor([1, 1, 1, 8],"int64"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 101],"bool"), Tensor([2, 1, 1, 101],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 62],"bool"), Tensor([2, 1, 1, 62],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 38],"bool"), Tensor([2, 1, 1, 38],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 65],"bool"), Tensor([2, 1, 1, 65],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 46],"bool"), Tensor([2, 1, 1, 46],"bool"), )
paddle.Tensor.__and__(Tensor([300],"int32"), Tensor([300],"int32"), )
paddle.Tensor.__and__(Tensor([22],"bool"), Tensor([22],"bool"), )
paddle.Tensor.__and__(Tensor([6, 1, 1, 6],"bool"), Tensor([6, 1, 1, 6],"bool"), )
paddle.Tensor.__and__(Tensor([4],"bool"), Tensor([4],"bool"), )
paddle.Tensor.__and__(Tensor([1, 1, 4, 4],"bool"), Tensor([1, 1, 4, 4],"bool"), )
paddle.Tensor.__and__(Tensor([4, 1, 1, 7],"bool"), Tensor([4, 1, 1, 7],"bool"), )
paddle.Tensor.__and__(Tensor([3],"int32"), Tensor([3],"int32"), )
paddle.Tensor.__and__(Tensor([1],"bool"), Tensor([1],"bool"), )
paddle.Tensor.__and__(Tensor([1],"bool"), Tensor([1],"bool"), )
paddle.Tensor.__and__(Tensor([2, 2],"bool"), Tensor([2, 2],"bool"), )
paddle.Tensor.__and__(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), )
paddle.Tensor.__and__(Tensor([1, 1, 1, 24],"bool"), Tensor([1, 1, 1, 24],"bool"), )
paddle.Tensor.__and__(Tensor([30],"int32"), Tensor([30],"int32"), )
paddle.Tensor.__and__(Tensor([18],"bool"), Tensor([18],"bool"), )
paddle.Tensor.__and__(Tensor([2, 3, 1, 5],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.Tensor.__and__(Tensor([],"bool"), Tensor([1],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 7],"bool"), Tensor([2, 1, 1, 7],"bool"), )
paddle.Tensor.__and__(Tensor([1, 1, 1, 26],"bool"), Tensor([1, 1, 1, 26],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 2],"bool"), Tensor([2, 1, 2],"bool"), )
paddle.Tensor.__and__(Tensor([8],"bool"), Tensor([8],"bool"), )
paddle.Tensor.__and__(Tensor([20],"int32"), Tensor([20],"int32"), )
paddle.Tensor.__and__(Tensor([21],"bool"), Tensor([21],"bool"), )
paddle.Tensor.__and__(Tensor([],"bool"), Tensor([],"bool"), )
paddle.Tensor.__and__(Tensor([11],"bool"), Tensor([11],"bool"), )
paddle.Tensor.__and__(Tensor([2, 3, 5],"int64"), Tensor([2, 3, 5],"int64"), )
paddle.Tensor.__and__(Tensor([6, 1, 1, 7],"bool"), Tensor([6, 1, 1, 7],"bool"), )
paddle.Tensor.__and__(Tensor([9],"bool"), Tensor([9],"bool"), )
paddle.Tensor.__and__(Tensor([2, 8],"bool"), Tensor([2, 8],"bool"), )
paddle.Tensor.__and__(Tensor([2, 16],"bool"), Tensor([2, 16],"bool"), )
paddle.Tensor.__and__(Tensor([2, 10],"bool"), Tensor([2, 10],"bool"), )
paddle.Tensor.__and__(Tensor([1, 1, 1, 25],"bool"), Tensor([1, 1, 1, 25],"bool"), )
paddle.Tensor.__and__(Tensor([35],"int32"), Tensor([35],"int32"), )
paddle.Tensor.__and__(Tensor([1, 1, 1, 23],"bool"), Tensor([1, 1, 1, 23],"bool"), )
paddle.Tensor.__and__(Tensor([2, 1, 1, 6],"bool"), Tensor([2, 1, 1, 6],"bool"), )
paddle.Tensor.__and__(Tensor([3],"bool"), Tensor([3],"bool"), )
paddle.Tensor.__and__(Tensor([2, 5],"bool"), Tensor([2, 5],"bool"), )
paddle.Tensor.__and__(Tensor([20],"bool"), Tensor([20],"bool"), )
paddle.Tensor.__and__(Tensor([4, 1, 1, 6],"bool"), Tensor([4, 1, 1, 6],"bool"), )
paddle.Tensor.__div__(Tensor([],"float32"), 0.5, )
paddle.Tensor.__div__(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.Tensor.__div__(Tensor([],"float32"), Tensor([],"float32"), )
paddle.Tensor.__div__(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.Tensor.__floordiv__(Tensor([2, 300],"int64"), 4, )
paddle.Tensor.__floordiv__(Tensor([128],"float32"), 2, )
paddle.Tensor.__floordiv__(Tensor([10, 20],"int32"), Tensor([10, 20],"int32"), )
paddle.Tensor.__floordiv__(Tensor([128],"int64"), 2, )
paddle.Tensor.__floordiv__(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"bool"), 1.0, )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"float32"), 1.0, )
paddle.Tensor.__floordiv__(Tensor([2],"int64"), 1, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"int8"), 1, )
paddle.Tensor.__floordiv__(Tensor([],"int64"), Tensor([],"int64"), )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"uint8"), 1.0, )
paddle.Tensor.__floordiv__(Tensor([2, 2],"int64"), 256, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"uint8"), 1, )
paddle.Tensor.__floordiv__(Tensor([2, 4],"int64"), 32000, )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float64"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"bfloat16"), )
paddle.Tensor.__floordiv__(Tensor([2, 4],"int64"), 100, )
paddle.Tensor.__floordiv__(Tensor([2],"int64"), 2, )
paddle.Tensor.__floordiv__(Tensor([13],"int64"), 4, )
paddle.Tensor.__floordiv__(Tensor([2, 2],"int64"), 256000, )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"bfloat16"), )
paddle.Tensor.__floordiv__(Tensor([],"int32"), 2, )
paddle.Tensor.__floordiv__(Tensor([2, 4],"int64"), 123, )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"bfloat16"), )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"int32"), 1, )
paddle.Tensor.__floordiv__(Tensor([2, 4],"int64"), 256, )
paddle.Tensor.__floordiv__(Tensor([2, 4],"int64"), 99, )
paddle.Tensor.__floordiv__(Tensor([],"int64"), 8, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"float16"), 1, )
paddle.Tensor.__floordiv__(Tensor([2, 4],"int64"), 256000, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"bool"), 1, )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.Tensor.__floordiv__(Tensor([1, 8],"int64"), 250054, )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float32"), )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"int8"), 1.0, )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"float32"), 1, )
paddle.Tensor.__floordiv__(Tensor([4],"int64"), 2, )
paddle.Tensor.__floordiv__(Tensor([],"int64"), Tensor([3],"int64"), )
paddle.Tensor.__floordiv__(Tensor([],"int64"), 2, )
paddle.Tensor.__floordiv__(Tensor([3],"int64"), Tensor([],"int64"), )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.Tensor.__floordiv__(Tensor([1, 8],"int64"), 99, )
paddle.Tensor.__floordiv__(Tensor([6],"int32"), Tensor([6],"int32"), )
paddle.Tensor.__floordiv__(Tensor([2, 2],"int64"), 123, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"bfloat16"), 1, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"float64"), 1, )
paddle.Tensor.__floordiv__(Tensor([1],"int32"), 2, )
paddle.Tensor.__floordiv__(Tensor([2, 2],"int64"), 99, )
paddle.Tensor.__floordiv__(Tensor([8],"int64"), 7, )
paddle.Tensor.__floordiv__(Tensor([1],"int64"), 2, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"int64"), 1.0, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"float64"), 1.0, )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.Tensor.__floordiv__(Tensor([2, 2, 2],"int64"), 2, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"int32"), 1.0, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"bfloat16"), 1.0, )
paddle.Tensor.__floordiv__(Tensor([3],"int64"), 2, )
paddle.Tensor.__floordiv__(Tensor([2, 2],"int64"), 32000, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"float16"), 1.0, )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.Tensor.__floordiv__(Tensor([1, 4],"int64"), 32000, )
paddle.Tensor.__floordiv__(Tensor([2, 2],"int64"), 100, )
paddle.Tensor.__floordiv__(Tensor([1, 8],"int64"), 32000, )
paddle.Tensor.__floordiv__(Tensor([2, 3, 4],"int64"), 1, )
paddle.Tensor.__floordiv__(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float16"), )
paddle.Tensor.__lshift__(Tensor([1],"int16"), Tensor([1],"int16"), )
paddle.Tensor.__lshift__(Tensor([1],"uint8"), Tensor([1],"uint8"), )
paddle.Tensor.__lshift__(Tensor([1],"uint8"), Tensor([1],"uint8"), False, )
paddle.Tensor.__lshift__(Tensor([1],"int16"), Tensor([1],"int16"), False, )
paddle.Tensor.__mod__(Tensor([2, 300],"int64"), 4, )
paddle.Tensor.__mod__(Tensor([2, 8, 8],"int32"), 6, )
paddle.Tensor.__mod__(Tensor([28, 28],"int32"), 6, )
paddle.Tensor.__mod__(Tensor([2, 2, 2],"int64"), 2, )
paddle.Tensor.__mod__(Tensor([13],"int64"), 7, )
paddle.Tensor.__mod__(Tensor([4],"float64"), Tensor([4],"float64"), )
paddle.Tensor.__mod__(Tensor([2, 3, 4],"float64"), 1.0, )
paddle.Tensor.__mod__(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.Tensor.__mod__(Tensor([1, 8],"int64"), 250054, )
paddle.Tensor.__mod__(Tensor([2, 2, 2],"int64"), 2.0, )
paddle.Tensor.__mod__(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.Tensor.__mod__(Tensor([2, 2],"int64"), 256, )
paddle.Tensor.__mod__(Tensor([2, 4],"int64"), 256000, )
paddle.Tensor.__mod__(Tensor([2, 4],"int64"), 99, )
paddle.Tensor.__mod__(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.Tensor.__mod__(Tensor([2, 3, 4],"int64"), 1.0, )
paddle.Tensor.__mod__(Tensor([2, 4],"int64"), 123, )
paddle.Tensor.__mod__(Tensor([],"float32"), Tensor([],"float32"), )
paddle.Tensor.__mod__(Tensor([2, 3, 4],"int64"), 1, )
paddle.Tensor.__mod__(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.Tensor.__mod__(Tensor([2, 2],"int64"), 123, )
paddle.Tensor.__mod__(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.Tensor.__mod__(Tensor([2, 4],"int64"), 100, )
paddle.Tensor.__mod__(Tensor([1, 8],"int64"), 32000, )
paddle.Tensor.__mod__(Tensor([2, 2],"int64"), 99, )
paddle.Tensor.__mod__(Tensor([],"float32"), 0.5, )
paddle.Tensor.__mod__(Tensor([8, 8],"int32"), 6, )
paddle.Tensor.__mod__(Tensor([],"int64"), Tensor([],"int64"), )
paddle.Tensor.__mod__(Tensor([2],"int64"), 1, )
paddle.Tensor.__mod__(Tensor([2, 2, 2],"float32"), 2, )
paddle.Tensor.__mod__(Tensor([2, 3, 4],"float32"), 1.0, )
paddle.Tensor.__mod__(Tensor([],"int64"), 2, )
paddle.Tensor.__mod__(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.Tensor.__mod__(Tensor([4],"int64"), Tensor([4],"int64"), )
paddle.Tensor.__mod__(Tensor([2, 3, 4],"float32"), 1, )
paddle.Tensor.__mod__(Tensor([2, 3, 4],"int32"), 1, )
paddle.Tensor.__mod__(Tensor([2, 4],"int64"), 32000, )
paddle.Tensor.__mod__(Tensor([2, 4],"int64"), 256, )
paddle.Tensor.__mod__(Tensor([1, 4],"int64"), 32000, )
paddle.Tensor.__mod__(Tensor([2, 2],"int64"), 32000, )
paddle.Tensor.__mod__(Tensor([2, 2, 2],"float32"), 2.0, )
paddle.Tensor.__mod__(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.Tensor.__mod__(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.Tensor.__mod__(Tensor([2, 2],"int64"), 256000, )
paddle.Tensor.__mod__(Tensor([2, 3, 4],"float64"), 1, )
paddle.Tensor.__mod__(Tensor([2, 2],"int64"), 100, )
paddle.Tensor.__mod__(Tensor([2, 3, 4],"int32"), 1.0, )
paddle.Tensor.__mod__(Tensor([40],"int64"), 12, )
paddle.Tensor.__mod__(Tensor([2],"int64"), 2, )
paddle.Tensor.__mod__(Tensor([1, 8],"int64"), 99, )
paddle.Tensor.__nonzero__(Tensor([],"int64"), )
paddle.Tensor.__nonzero__(Tensor([],"float32"), )
paddle.Tensor.__nonzero__(Tensor([1],"int64"), )
paddle.Tensor.__nonzero__(Tensor([1, 1],"bool"), )
paddle.Tensor.__nonzero__(Tensor([],"bool"), )
paddle.Tensor.__nonzero__(Tensor([1, 1, 1],"int64"), )
paddle.Tensor.__nonzero__(Tensor([],"bool"), )
paddle.Tensor.__nonzero__(Tensor([],"bool"), )
paddle.Tensor.__nonzero__(Tensor([1],"int32"), )
paddle.Tensor.__nonzero__(Tensor([1],"bool"), )
paddle.Tensor.__nonzero__(Tensor([1],"bool"), )
paddle.Tensor.__pow__(Tensor([108, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([385, 2],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([300, 1],"float32"), 2.0, )
paddle.Tensor.__pow__(Tensor([20, 10, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([10, 10],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([200],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([10, 20, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([100, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([13, 13],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([10, 20, 1],"float64"), 2, )
paddle.Tensor.__pow__(Tensor([128, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([103, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([111, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([3, 3, 4, 4],"float64"), 3, )
paddle.Tensor.__pow__(Tensor([10, 20, 1, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([29, 29],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([512],"float64"), 2, )
paddle.Tensor.__pow__(Tensor([20, 10],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([10, 20],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([20, 40],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([513],"float64"), 2.0, )
paddle.Tensor.__pow__(Tensor([100, 2],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([2, 4],"float64"), 2.0, )
paddle.Tensor.__pow__(Tensor([27, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([72, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([85, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([23, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([9, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([2, 3, 4],"float32"), 1, )
paddle.Tensor.__pow__(Tensor([3, 3, 4],"float64"), 3, )
paddle.Tensor.__pow__(Tensor([36, 1],"float32"), 3, )
paddle.Tensor.__pow__(Tensor([90, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([49, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.Tensor.__pow__(Tensor([1, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([54, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([4, 2, 3],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([],"int64"), Tensor([],"int64"), )
paddle.Tensor.__pow__(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.Tensor.__pow__(Tensor([10, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([4, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([40, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([47, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([1],"float64"), 2, )
paddle.Tensor.__pow__(Tensor([3, 3],"float64"), 3, )
paddle.Tensor.__pow__(Tensor([96, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([30, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.Tensor.__pow__(Tensor([2, 3, 4],"int32"), 1, )
paddle.Tensor.__pow__(Tensor([51, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([3, 4],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([6, 2],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.Tensor.__pow__(Tensor([3, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([21, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([],"float32"), 0.5, )
paddle.Tensor.__pow__(Tensor([3, 2],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([36, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([64, 1],"float32"), 3, )
paddle.Tensor.__pow__(Tensor([10],"float64"), 2, )
paddle.Tensor.__pow__(Tensor([37, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([31, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([6, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([55, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([3],"int64"), Tensor([3],"int64"), )
paddle.Tensor.__pow__(Tensor([35, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([74, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([15, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([65, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([11, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([22, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([91, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([67, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([98, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([2, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([1, 2, 2],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([63, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([69, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([10],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([52, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([43, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([2, 3, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([2, 3, 4],"float64"), 1.0, )
paddle.Tensor.__pow__(Tensor([32, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([2, 2, 2],"float32"), 3, )
paddle.Tensor.__pow__(Tensor([30, 3],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([3],"float64"), 3, )
paddle.Tensor.__pow__(Tensor([10],"float64"), 3, )
paddle.Tensor.__pow__(Tensor([75, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([25, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([5, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([1],"float32"), Tensor([],"float32"), )
paddle.Tensor.__pow__(Tensor([],"float32"), 2.0, )
paddle.Tensor.__pow__(Tensor([48, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([84, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([18, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([2, 3, 4],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([89, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([83, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([56, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([17, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([2, 3],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([39, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([2, 3],"float64"), 2, )
paddle.Tensor.__pow__(Tensor([94, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([45, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([33, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([2, 3, 4],"int64"), 1, )
paddle.Tensor.__pow__(Tensor([28, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([16, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([8, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.Tensor.__pow__(Tensor([29, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([88, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([12, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([2, 3, 4],"float32"), 1.0, )
paddle.Tensor.__pow__(Tensor([60, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.Tensor.__pow__(Tensor([14, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([10],"float32"), 3, )
paddle.Tensor.__pow__(Tensor([62, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([2, 2, 2],"float32"), 3.0, )
paddle.Tensor.__pow__(Tensor([2, 2],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([2, 3, 4],"int64"), 1.0, )
paddle.Tensor.__pow__(Tensor([],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([42, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([24, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([50, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([38, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([16, 1],"float32"), 0.5, )
paddle.Tensor.__pow__(Tensor([2],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([5, 5],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([26, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([77, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([41, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([59, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([87, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([],"float32"), Tensor([],"float32"), )
paddle.Tensor.__pow__(Tensor([64, 1],"float32"), 4, )
paddle.Tensor.__pow__(Tensor([64, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([78, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([46, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([76, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([2, 2, 2],"int64"), 3.0, )
paddle.Tensor.__pow__(Tensor([18, 2],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([57, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.Tensor.__pow__(Tensor([2, 3, 4],"int32"), 1.0, )
paddle.Tensor.__pow__(Tensor([13, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([34, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([36, 1],"float32"), 4, )
paddle.Tensor.__pow__(Tensor([2, 3, 4],"float64"), 1, )
paddle.Tensor.__pow__(Tensor([1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([],"int64"), 3, )
paddle.Tensor.__pow__(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.Tensor.__pow__(Tensor([81, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([44, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([7, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([79, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([68, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([19, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([2, 2, 2],"int64"), 3, )
paddle.Tensor.__pow__(Tensor([2, 4],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([2, 3, 2],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([95, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([66, 1],"float32"), 2, )
paddle.Tensor.__pow__(Tensor([2, 2, 2],"float32"), 2, )
paddle.Tensor.__radd__(Tensor([2, 1, 256],"float16"), 1, )
paddle.Tensor.__radd__(Tensor([128, 1, 1, 1],"float32"), 0.8375, )
paddle.Tensor.__radd__(Tensor([10, 10],"int64"), 0, )
paddle.Tensor.__radd__(Tensor([6, 1, 37],"float32"), 1.0, )
paddle.Tensor.__radd__(Tensor([128, 1, 1, 1],"float32"), 0.875, )
paddle.Tensor.__radd__(Tensor([256],"float32"), 0, )
paddle.Tensor.__radd__(Tensor([100],"float32"), 0, )
paddle.Tensor.__radd__(Tensor([512],"float32"), 0, )
paddle.Tensor.__radd__(Tensor([2, 1, 128],"float32"), 1, )
paddle.Tensor.__radd__(Tensor([1, 1, 128],"float32"), 1.0, )
paddle.Tensor.__radd__(Tensor([2, 1, 128],"float32"), 1.0, )
paddle.Tensor.__radd__(Tensor([13, 32],"int64"), 0, )
paddle.Tensor.__radd__(Tensor([6, 1, 128],"float32"), 1, )
paddle.Tensor.__radd__(Tensor([20, 20],"int64"), 4, )
paddle.Tensor.__radd__(Tensor([128, 1, 1, 1],"float32"), 0.825, )
paddle.Tensor.__radd__(Tensor([2, 3, 37],"float32"), 1.0, )
paddle.Tensor.__radd__(Tensor([128, 1, 1, 1],"float32"), 0.9125, )
paddle.Tensor.__radd__(Tensor([227],"float32"), 0, )
paddle.Tensor.__radd__(Tensor([2, 1, 256],"float16"), 1.0, )
paddle.Tensor.__radd__(Tensor([128, 1, 1, 1],"float32"), 0.95, )
paddle.Tensor.__radd__(Tensor([128, 1, 1, 1],"float32"), 0.8875, )
paddle.Tensor.__radd__(Tensor([10, 10],"int64"), 4, )
paddle.Tensor.__radd__(Tensor([6, 1, 128],"float32"), 1.0, )
paddle.Tensor.__radd__(Tensor([1, 1, 128],"float32"), 1, )
paddle.Tensor.__radd__(Tensor([13, 1, 37],"float32"), 1.0, )
paddle.Tensor.__radd__(Tensor([20, 20],"int64"), 0, )
paddle.Tensor.__radd__(Tensor([20, 20],"int64"), 2, )
paddle.Tensor.__radd__(Tensor([4, 1, 128],"float32"), 1.0, )
paddle.Tensor.__radd__(Tensor([4, 1, 128],"float32"), 1, )
paddle.Tensor.__radd__(Tensor([17, 17],"int64"), 2, )
paddle.Tensor.__radd__(Tensor([4, 1, 37],"float32"), 1.0, )
paddle.Tensor.__radd__(Tensor([2, 3, 128],"float32"), 1.0, )
paddle.Tensor.__radd__(Tensor([10, 10],"int64"), 2, )
paddle.Tensor.__radd__(Tensor([128, 1, 1, 1],"float32"), 0.925, )
paddle.Tensor.__radd__(Tensor([13, 16],"int64"), 0, )
paddle.Tensor.__radd__(Tensor([128, 1, 1, 1],"float32"), 0.975, )
paddle.Tensor.__radd__(Tensor([13, 2, 32],"float32"), 1.0, )
paddle.Tensor.__radd__(Tensor([1, 7, 37],"float32"), 1.0, )
paddle.Tensor.__radd__(Tensor([128, 1, 1, 1],"float32"), 0.85, )
paddle.Tensor.__radd__(Tensor([13, 32],"float32"), 1.0, )
paddle.Tensor.__radd__(Tensor([2, 3, 128],"float32"), 1, )
paddle.Tensor.__radd__(Tensor([25, 20],"float32"), 1, )
paddle.Tensor.__radd__(Tensor([17, 17],"int64"), 0, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05558498948812485, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.3696005344390869, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.055232249200344086, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04456150904297829, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.035438720136880875, )
paddle.Tensor.__radd__(Tensor([],"float32"), 2.799233913421631, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04541768878698349, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.00011960119110658052, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.08697864413261414, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.053308211266994476, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05199944227933884, )
paddle.Tensor.__radd__(Tensor([],"float32"), 3.145920682252507e-05, )
paddle.Tensor.__radd__(Tensor([],"float32"), 1.5374594926834106, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03419848158955574, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.0490226149559021, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.051264580339193344, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05477703735232353, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05253278464078903, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04482914134860039, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.0346405953168869, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05259155482053757, )
paddle.Tensor.__radd__(Tensor([],"float32"), 2.6152267456054688, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.058349549770355225, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.034552980214357376, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05370928347110748, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.055953554809093475, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.055295366793870926, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.24067199230194092, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.16074547171592712, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05511319264769554, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05404112488031387, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03618072718381882, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04479334503412247, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05171176418662071, )
paddle.Tensor.__radd__(Tensor([],"float32"), 2.208631992340088, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.056688785552978516, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04449377581477165, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05298619717359543, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.07030215114355087, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.07087979465723038, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05575406551361084, )
paddle.Tensor.__radd__(Tensor([],"float32"), 1.573649287223816, )
paddle.Tensor.__radd__(Tensor([],"float32"), 1.2589630171321966e-05, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.08559435606002808, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.045708492398262024, )
paddle.Tensor.__radd__(Tensor([],"float32"), 1.559597134590149, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.0548689179122448, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.033997759222984314, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.2858506739139557, )
paddle.Tensor.__radd__(Tensor([],"float32"), 7.199221416678432e-05, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.052664272487163544, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.044629886746406555, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.0531393326818943, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05518890172243118, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05451500415802002, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.0003519381280057132, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05212711542844772, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05338132381439209, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03588705509901047, )
paddle.Tensor.__radd__(Tensor([],"float32"), 1.8882876441395045e-05, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.08625929057598114, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.056483346968889236, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04849286749958992, )
paddle.Tensor.__radd__(Tensor([],"float32"), 10.757354736328125, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03400329127907753, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.053011637181043625, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03526894748210907, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03447876125574112, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.044876497238874435, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05283559858798981, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.15805912017822266, )
paddle.Tensor.__radd__(Tensor([],"float32"), 31.75356674194336, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05241573229432106, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.08589715510606766, )
paddle.Tensor.__radd__(Tensor([],"float32"), 1.9935004711151123, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03409560024738312, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04749991372227669, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04444786161184311, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05609956011176109, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03432196378707886, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.054792117327451706, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.14829964935779572, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.048258423805236816, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.053933173418045044, )
paddle.Tensor.__radd__(Tensor([],"float32"), 1.4384185075759888, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.055863671004772186, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.7925087213516235, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05220222473144531, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.15448203682899475, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05364681035280228, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.034571558237075806, )
paddle.Tensor.__radd__(Tensor([],"float32"), 4.107051372528076, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05474403500556946, )
paddle.Tensor.__radd__(Tensor([],"float32"), 1.5209848880767822, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.053077682852745056, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05508468672633171, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05481342226266861, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.047364670783281326, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.16984395682811737, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05362692475318909, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.06213206425309181, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04427320137619972, )
paddle.Tensor.__radd__(Tensor([],"float32"), 8.134420568239875e-06, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.15608324110507965, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05361802875995636, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.045747216790914536, )
paddle.Tensor.__radd__(Tensor([],"float32"), 5.4224234190769494e-05, )
paddle.Tensor.__radd__(Tensor([],"float32"), 3.10760697175283e-06, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.0343514047563076, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.054794229567050934, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.2779466509819031, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03494750335812569, )
paddle.Tensor.__radd__(Tensor([],"float32"), 3.3844198696897365e-06, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.045095302164554596, )
paddle.Tensor.__radd__(Tensor([],"float32"), 16.305463790893555, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.19300171732902527, )
paddle.Tensor.__radd__(Tensor([],"float32"), 2.2081775665283203, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04811231791973114, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03479744493961334, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05550562962889671, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.048406608402729034, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.055611710995435715, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.045414287596940994, )
paddle.Tensor.__radd__(Tensor([],"float32"), 7.421480859193252e-06, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05373566597700119, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.0695047378540039, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.044449333101511, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05354001373052597, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.08639702200889587, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03463345021009445, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05366938188672066, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.034660037606954575, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.048564884811639786, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05187530815601349, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.034622929990291595, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.22515076398849487, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.0552077554166317, )
paddle.Tensor.__radd__(Tensor([],"float32"), 1.6161272525787354, )
paddle.Tensor.__radd__(Tensor([],"float32"), 2.7480223178863525, )
paddle.Tensor.__radd__(Tensor([],"float32"), 2.9619079214171506e-05, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04569823667407036, )
paddle.Tensor.__radd__(Tensor([],"float32"), 2.723546816963278e-05, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.053888410329818726, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04427977278828621, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.0523105189204216, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05781926214694977, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.15110711753368378, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03431904688477516, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03408457338809967, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03446519002318382, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05094103887677193, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.0575641468167305, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.055625591427087784, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05540173500776291, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05375739932060242, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.07032258808612823, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05320920795202255, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05030040442943573, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05396494269371033, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05350876599550247, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05497465655207634, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05571150779724121, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.056210439652204514, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04426269233226776, )
paddle.Tensor.__radd__(Tensor([],"float32"), 12.439432144165039, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04454198107123375, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05209120735526085, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05192168802022934, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.06194470450282097, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04837193712592125, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.035245757550001144, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05577867105603218, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04492299631237984, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05326831340789795, )
paddle.Tensor.__radd__(Tensor([],"float32"), 1.4831868410110474, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05432036519050598, )
paddle.Tensor.__radd__(Tensor([],"float32"), 1.9894112348556519, )
paddle.Tensor.__radd__(Tensor([],"float32"), 3.407200237079549e-05, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05556149780750275, )
paddle.Tensor.__radd__(Tensor([],"float32"), 1.7222603559494019, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.052792347967624664, )
paddle.Tensor.__radd__(Tensor([],"float32"), 2.0311994349085647e-05, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.055972203612327576, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05556732788681984, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04273848980665207, )
paddle.Tensor.__radd__(Tensor([],"float32"), 1.3421553373336792, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05028320476412773, )
paddle.Tensor.__radd__(Tensor([],"float32"), 1.7260265350341797, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03408278524875641, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04421672224998474, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03423469513654709, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.9566604495048523, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.14878040552139282, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04574424773454666, )
paddle.Tensor.__radd__(Tensor([],"float32"), 1.33241868019104, )
paddle.Tensor.__radd__(Tensor([],"float32"), 1.7360706986358125e-05, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03502361476421356, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.044319093227386475, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04847632348537445, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04889839142560959, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.050193075090646744, )
paddle.Tensor.__radd__(Tensor([],"float32"), 3.753310441970825, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04620261862874031, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05349237844347954, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04480171948671341, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05420929938554764, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.0446237176656723, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03508618846535683, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.17992761731147766, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04845084249973297, )
paddle.Tensor.__radd__(Tensor([],"float32"), 1.7389830350875854, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05836283043026924, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05065625160932541, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05481261759996414, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.054595865309238434, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.3676023483276367, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05207153409719467, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.4235319495201111, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05224405229091644, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03466130048036575, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.2673802375793457, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05338883027434349, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05221742391586304, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05264432728290558, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.16355513036251068, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.033979933708906174, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05344431474804878, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.25308799743652344, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.16485893726348877, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03614255040884018, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.0545162558555603, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04820575565099716, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05735347792506218, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.050653181970119476, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05401972681283951, )
paddle.Tensor.__radd__(Tensor([],"float32"), 1.6561851183379886e-05, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.054097458720207214, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.0519145242869854, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05275701731443405, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05382699891924858, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03405149653553963, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05549158155918121, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05522136390209198, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05620752274990082, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.08739617466926575, )
paddle.Tensor.__radd__(Tensor([],"float32"), 8.913641329617565e-05, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03396322578191757, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.0341530442237854, )
paddle.Tensor.__radd__(Tensor([],"float32"), 1.585200621186145e-05, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.044376812875270844, )
paddle.Tensor.__radd__(Tensor([],"float32"), 1.7631572484970093, )
paddle.Tensor.__radd__(Tensor([],"float32"), 2.139745993190445e-05, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.057739902287721634, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05295250937342644, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03501734882593155, )
paddle.Tensor.__radd__(Tensor([],"float32"), 1.8805691003799438, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05317551642656326, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04825546592473984, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.055624280124902725, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05358171835541725, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05257316678762436, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.22086018323898315, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05597139149904251, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.04856268689036369, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.08620268106460571, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.054278869181871414, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05597369372844696, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.03749008849263191, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05316920951008797, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.22468158602714539, )
paddle.Tensor.__radd__(Tensor([],"float32"), 2.599087953567505, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05522941052913666, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.047818686813116074, )
paddle.Tensor.__radd__(Tensor([],"float32"), 7.853951454162598, )
paddle.Tensor.__radd__(Tensor([],"float32"), 0.05986400693655014, )
paddle.Tensor.__rmatmul__(Tensor([3, 5],"float32"), Tensor([2, 3],"float32"), )
paddle.Tensor.__rmod__(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.Tensor.__ror__(Tensor([2, 3, 5],"int32"), 5, )
paddle.Tensor.__ror__(Tensor([2, 3, 5],"int32"), True, )
paddle.Tensor.__rpow__(Tensor([192],"float32"), 10000.0, )
paddle.Tensor.__rpow__(Tensor([10, 12],"float32"), 2, )
paddle.Tensor.__rpow__(Tensor([128],"float32"), 10000.0, )
paddle.Tensor.__rpow__(Tensor([10, 12],"float64"), 2, )
paddle.Tensor.__rpow__(Tensor([153],"float32"), 10000, )
paddle.Tensor.__rpow__(Tensor([256],"float32"), 10000.0, )
paddle.Tensor.__rpow__(Tensor([128],"float32"), 20, )
paddle.Tensor.__rpow__(Tensor([128],"float32"), 10000, )
paddle.Tensor.__rpow__(Tensor([8],"float32"), 10000, )
paddle.Tensor.__rpow__(Tensor([1],"float64"), 2, )
paddle.Tensor.__rpow__(Tensor([2, 2, 2],"int64"), 3.0, )
paddle.Tensor.__rpow__(Tensor([96],"float32"), 10000, )
paddle.Tensor.__rpow__(Tensor([1, 16],"float32"), 10000.0, )
paddle.Tensor.__rpow__(Tensor([64],"float32"), 500000.0, )
paddle.Tensor.__rpow__(Tensor([4],"float32"), 10000, )
paddle.Tensor.__rpow__(Tensor([4],"float32"), 10000.0, )
paddle.Tensor.__rpow__(Tensor([],"float32"), 2, )
paddle.Tensor.__rpow__(Tensor([64],"float32"), 1000000.0, )
paddle.Tensor.__rpow__(Tensor([2, 2, 2],"int64"), 3, )
paddle.Tensor.__rpow__(Tensor([64],"float32"), 10000, )
paddle.Tensor.__rpow__(Tensor([2, 2, 2],"float32"), 3, )
paddle.Tensor.__rpow__(Tensor([55],"float32"), 10000, )
paddle.Tensor.__rpow__(Tensor([2],"float32"), 10000.0, )
paddle.Tensor.__rpow__(Tensor([4],"float32"), 1000000.0, )
paddle.Tensor.__rpow__(Tensor([4],"float32"), 63496.04207872797, )
paddle.Tensor.__rpow__(Tensor([22],"float32"), 10000, )
paddle.Tensor.__rpow__(Tensor([3],"float32"), 10000, )
paddle.Tensor.__rpow__(Tensor([64],"float32"), 1000000, )
paddle.Tensor.__rpow__(Tensor([1],"float32"), 10000, )
paddle.Tensor.__rpow__(Tensor([2],"float32"), 107177664400.00002, )
paddle.Tensor.__rpow__(Tensor([2, 2, 2],"float32"), 3.0, )
paddle.Tensor.__rpow__(Tensor([32],"float32"), 10000, )
paddle.Tensor.__rpow__(Tensor([7],"float32"), 10000, )
paddle.Tensor.__rpow__(Tensor([32],"float32"), 10000.0, )
paddle.Tensor.__rpow__(Tensor([14],"float32"), 10000, )
paddle.Tensor.__rpow__(Tensor([8],"float32"), 1000000.0, )
paddle.Tensor.__rpow__(Tensor([4],"float32"), 550134.0076769129, )
paddle.Tensor.__rpow__(Tensor([5],"float32"), 10000, )
paddle.Tensor.__rpow__(Tensor([4, 5, 2],"float32"), 2, )
paddle.Tensor.__rpow__(Tensor([2],"float32"), 10000, )
paddle.Tensor.__rpow__(Tensor([4, 5, 2],"float64"), 2, )
paddle.Tensor.__rpow__(Tensor([48],"float32"), 10000.0, )
paddle.Tensor.__rpow__(Tensor([16],"float32"), 10000, )
paddle.Tensor.__rpow__(Tensor([2],"float32"), 63496.04207872797, )
paddle.Tensor.__rpow__(Tensor([40],"float32"), 1000000, )
paddle.Tensor.__rpow__(Tensor([64],"float32"), 10000.0, )
paddle.Tensor.__rpow__(Tensor([8],"float32"), 10000.0, )
paddle.Tensor.__rpow__(Tensor([16],"float32"), 10000.0, )
paddle.Tensor.__rshift__(Tensor([1],"int8"), Tensor([1],"int8"), False, )
paddle.Tensor.__rshift__(Tensor([1],"uint8"), Tensor([1],"uint8"), False, )
paddle.Tensor.__rshift__(Tensor([1],"uint8"), Tensor([1],"uint8"), )
paddle.Tensor.__rshift__(Tensor([1],"int8"), Tensor([1],"int8"), )
paddle.Tensor.__rtruediv__(Tensor([128],"float32"), 10.0, )
paddle.Tensor.__rtruediv__(Tensor([512],"float32"), 10.0, )
paddle.Tensor.__rtruediv__(Tensor([192],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([10, 12],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([2, 200],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([256],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([512],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([128],"float32"), 6.283185307179586, )
paddle.Tensor.__rtruediv__(Tensor([128],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([153],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([5],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -0.3291500508785248, )
paddle.Tensor.__rtruediv__(Tensor([3, 4],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([14],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([4, 6],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([5],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -0.19493129518818733, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 1.977996826171875, )
paddle.Tensor.__rtruediv__(Tensor([2, 2, 2],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([4],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([2, 2, 2],"int64"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([],"int64"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([6, 1],"float32"), 5.0, )
paddle.Tensor.__rtruediv__(Tensor([48],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 7.029622793197632e-06, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 11.109466552734375, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -2.2646418074145913e-10, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -1.6316771507263184e-06, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -2.391636371612549e-06, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 93.69580078125, )
paddle.Tensor.__rtruediv__(Tensor([2, 3],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 8.87603759765625, )
paddle.Tensor.__rtruediv__(Tensor([3, 5],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -6.705522537231445e-08, )
paddle.Tensor.__rtruediv__(Tensor([2, 2, 2],"int64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -5.364418029785156e-07, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -6.275513442233205e-11, )
paddle.Tensor.__rtruediv__(Tensor([16],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([32],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([2, 4],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([2, 3],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([3, 1],"float32"), 0.5, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -0.2861975356936455, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -7.37607479095459e-07, )
paddle.Tensor.__rtruediv__(Tensor([1],"float32"), 2, )
paddle.Tensor.__rtruediv__(Tensor([3],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -2.2351741790771484e-08, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 2.2351741790771484e-06, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 117.689208984375, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -2.7939677238464355e-07, )
paddle.Tensor.__rtruediv__(Tensor([1, 36, 1, 1],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([4, 2],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 6.258487701416016e-07, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -1.800799509510398e-10, )
paddle.Tensor.__rtruediv__(Tensor([1],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 0.017940044403076172, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -1.1399388313293457e-06, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 7.729232311248779e-05, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -1.0913936421275139e-10, )
paddle.Tensor.__rtruediv__(Tensor([1],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([3],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -1.564621925354004e-07, )
paddle.Tensor.__rtruediv__(Tensor([16],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -6.92903995513916e-07, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 6.276369094848633e-05, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -7.82310962677002e-08, )
paddle.Tensor.__rtruediv__(Tensor([1, 9, 1],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([64],"float32"), 2.0, )
paddle.Tensor.__rtruediv__(Tensor([8],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 8.158385753631592e-07, )
paddle.Tensor.__rtruediv__(Tensor([7],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 2.474761962890625, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -1.1175870895385742e-07, )
paddle.Tensor.__rtruediv__(Tensor([3, 5],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 6.283185307179586, )
paddle.Tensor.__rtruediv__(Tensor([2, 2, 2],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([40],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -2.1010637283325195e-06, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 1.8596649169921875e-05, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -2.2351741790771484e-07, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -176927.4444580078, )
paddle.Tensor.__rtruediv__(Tensor([64],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([96],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -0.3896128805936314, )
paddle.Tensor.__rtruediv__(Tensor([2],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -4.470348358154297e-08, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -3.3527612686157227e-08, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 8192, )
paddle.Tensor.__rtruediv__(Tensor([4],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([55],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 3.933906555175781e-06, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -0.0004792213439941406, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -7.82310962677002e-07, )
paddle.Tensor.__rtruediv__(Tensor([1, 38, 1],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([3, 3],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([2],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([1],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -1.7881393432617188e-07, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 1e+20, )
paddle.Tensor.__rtruediv__(Tensor([64],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 0.00038662925362586975, )
paddle.Tensor.__rtruediv__(Tensor([6],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([4],"float32"), 1, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 2.7894973754882812e-05, )
paddle.Tensor.__rtruediv__(Tensor([3, 6, 4],"float64"), 1, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -8.940696716308594e-08, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -1.1175870895385742e-08, )
paddle.Tensor.__rtruediv__(Tensor([4, 1],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 0.004224982112646103, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 2.288818359375e-05, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -7.510185241699219e-06, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 2.8252601623535156e-05, )
paddle.Tensor.__rtruediv__(Tensor([3],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 5.0, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 0.0, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -0.2230001538991928, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 5.435943603515625e-05, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -1.4528632164001465e-07, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([22],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -1.0058283805847168e-07, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), 1.2293457984924316e-07, )
paddle.Tensor.__rtruediv__(Tensor([8],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([2],"float32"), 1.0, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -3.5762786865234375e-05, )
paddle.Tensor.__rtruediv__(Tensor([],"float32"), -7.152557373046875e-05, )
paddle.Tensor.__rtruediv__(Tensor([6, 1],"float32"), 1.0, )
paddle.Tensor.__rxor__(Tensor([2, 3, 5],"int32"), True, )
paddle.Tensor.__rxor__(Tensor([2, 3, 5],"int32"), 5, )
paddle.Tensor.__xor__(Tensor([2, 3, 5],"int64"), Tensor([2, 3, 5],"int64"), )
paddle.Tensor.__xor__(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), )
paddle.Tensor.__xor__(Tensor([],"bool"), Tensor([],"bool"), )
paddle.Tensor.__xor__(Tensor([3],"int32"), Tensor([3],"int32"), )
paddle.Tensor.__xor__(Tensor([2, 3, 1, 5],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.Tensor.add(Tensor([3, 90],"float32"), Tensor([3, 90],"float32"), )
paddle.Tensor.add(Tensor([90, 4],"float32"), Tensor([90, 4],"float32"), )
paddle.Tensor.add(Tensor([64],"float32"), Tensor([64],"float32"), )
paddle.Tensor.add(Tensor([2, 64],"float32"), Tensor([2, 64],"float32"), )
paddle.Tensor.add(Tensor([90],"float32"), Tensor([90],"float32"), )
paddle.Tensor.add(Tensor([2, 50],"float32"), Tensor([2, 50],"float32"), )
paddle.Tensor.add(Tensor([50],"float32"), Tensor([50],"float32"), )
paddle.Tensor.add(Tensor([64, 5],"float32"), Tensor([64, 5],"float32"), )
paddle.Tensor.add(Tensor([50, 3],"float32"), Tensor([50, 3],"float32"), )
paddle.Tensor.add(Tensor([20, 20],"float32"), Tensor([20, 20],"float32"), )
paddle.Tensor.add(Tensor([2, 20],"float32"), Tensor([2, 20],"float32"), )
paddle.Tensor.add(Tensor([20, 1],"float32"), Tensor([20, 1],"float32"), )
paddle.Tensor.add(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.Tensor.add(Tensor([5],"float32"), Tensor([5],"float32"), )
paddle.Tensor.add(Tensor([20],"float32"), Tensor([20],"float32"), )
paddle.Tensor.add(Tensor([2],"float32"), Tensor([2],"float32"), )
paddle.Tensor.add(Tensor([48, 1],"float32"), Tensor([48, 1],"float32"), )
paddle.Tensor.add(Tensor([3],"float32"), Tensor([3],"float32"), )
paddle.Tensor.add(Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.Tensor.add(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.Tensor.add(Tensor([48],"float32"), Tensor([48],"float32"), )
paddle.Tensor.add(Tensor([42],"float32"), Tensor([42],"float32"), )
paddle.Tensor.all(Tensor([2, 1, 1, 98],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 137],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 97],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 124],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 138],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 146],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 85],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 104],"bool"), )
paddle.Tensor.all(Tensor([5, 5, 5],"bool"), )
paddle.Tensor.all(Tensor([1, 100],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 77],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 155],"bool"), )
paddle.Tensor.all(Tensor([100],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 153],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 147],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 114],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 140],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 149],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 118],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 144],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 115],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 122],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 136],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 159],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 108],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 139],"bool"), )
paddle.Tensor.all(Tensor([1, 1, 10, 16],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 105],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 116],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 109],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 99],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 112],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 129],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 145],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 88],"bool"), )
paddle.Tensor.all(Tensor([100, 1],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 143],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 86],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 150],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 95],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 79],"bool"), )
paddle.Tensor.all(Tensor([1, 576, 1, 1],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 87],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 107],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 119],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 156],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 120],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 84],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 89],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 103],"bool"), )
paddle.Tensor.all(Tensor([1, 2, 10, 16],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 102],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 158],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 154],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 152],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 101],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 121],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 126],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 113],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 78],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 81],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 125],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 117],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 110],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 92],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 83],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 82],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 91],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 93],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 134],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 80],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 127],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 76],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 128],"bool"), )
paddle.Tensor.all(Tensor([1, 96, 3, 3],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 100],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 94],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 131],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 157],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 90],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 111],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 123],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 151],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 133],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 135],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 142],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 75],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 106],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 130],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 141],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 96],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 148],"bool"), )
paddle.Tensor.all(Tensor([2, 1, 1, 132],"bool"), )
paddle.Tensor.all(Tensor([300],"bool"), )
paddle.Tensor.all(Tensor([],"bool"), )
paddle.Tensor.all(Tensor([7],"bool"), )
paddle.Tensor.all(Tensor([1, 32],"bool"), )
paddle.Tensor.all(Tensor([5],"bool"), )
paddle.Tensor.all(Tensor([1],"bool"), )
paddle.Tensor.all(Tensor([1, 4],"bool"), )
paddle.Tensor.all(Tensor([3, 6],"bool"), )
paddle.Tensor.all(Tensor([10],"bool"), )
paddle.Tensor.all(Tensor([1, 1],"bool"), )
paddle.Tensor.all(Tensor([6],"bool"), )
paddle.Tensor.all(Tensor([8],"bool"), )
paddle.Tensor.all(Tensor([3],"bool"), )
paddle.Tensor.all(Tensor([9],"bool"), )
paddle.Tensor.all(Tensor([2, 1],"bool"), )
paddle.Tensor.all(Tensor([4],"bool"), )
paddle.Tensor.all(Tensor([4, 19],"bool"), )
paddle.Tensor.all(Tensor([2, 3],"bool"), )
paddle.Tensor.all(Tensor([5, 5],"bool"), )
paddle.Tensor.all(Tensor([2],"bool"), )
paddle.Tensor.all(Tensor([1],"bool"), )
paddle.Tensor.all(Tensor([6, 3],"bool"), )
paddle.Tensor.amax(Tensor([3, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amax(Tensor([3, 2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([10],"int64"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([2, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([10],"float64"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([10],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amax(Tensor([10],"int32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([3, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.Tensor.amin(Tensor([3, 2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([3, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.amin(Tensor([2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([10],"int32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([10],"float32"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([10],"float64"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([10],"int64"), axis=None, keepdim=False, )
paddle.Tensor.amin(Tensor([2, 4],"float32"), axis=None, keepdim=False, )
paddle.Tensor.any(Tensor([200, 4],"bool"), )
paddle.Tensor.any(Tensor([4, 7, 6],"bool"), axis=1, keepdim=True, )
paddle.Tensor.any(Tensor([168],"bool"), axis=0, keepdim=True, )
paddle.Tensor.any(Tensor([512],"bool"), axis=0, keepdim=True, )
paddle.Tensor.any(Tensor([4, 7, 6],"bool"), axis=2, keepdim=True, )
paddle.Tensor.any(Tensor([4, 42],"bool"), axis=1, keepdim=True, )
paddle.Tensor.any(Tensor([7, 24],"bool"), axis=1, keepdim=True, )
paddle.Tensor.any(Tensor([4, 8, 2, 3],"bool"), axis=tuple(-1,-2,), )
paddle.Tensor.any(Tensor([4],"bool"), )
paddle.Tensor.any(Tensor([9, 4],"bool"), )
paddle.Tensor.any(Tensor([11, 4],"bool"), )
paddle.Tensor.any(Tensor([3, 4],"bool"), )
paddle.Tensor.any(Tensor([2, 3, 4],"bool"), axis=0, keepdim=True, )
paddle.Tensor.any(Tensor([3, 3, 3],"bool"), axis=0, keepdim=True, )
paddle.Tensor.any(Tensor([5, 12],"bool"), axis=1, keepdim=True, )
paddle.Tensor.any(Tensor([32],"bool"), axis=0, keepdim=True, )
paddle.Tensor.any(Tensor([20],"bool"), axis=0, keepdim=True, )
paddle.Tensor.any(Tensor([1, 4],"bool"), )
paddle.Tensor.any(Tensor([3],"bool"), axis=0, keepdim=True, )
paddle.Tensor.any(Tensor([1],"bool"), axis=tuple(), )
paddle.Tensor.any(Tensor([8],"bool"), axis=0, keepdim=True, )
paddle.Tensor.any(Tensor([4, 20],"bool"), )
paddle.Tensor.any(Tensor([37],"bool"), axis=0, keepdim=True, )
paddle.Tensor.any(Tensor([9],"bool"), )
paddle.Tensor.any(Tensor([2, 4],"bool"), )
paddle.Tensor.any(Tensor([2, 3],"bool"), )
paddle.Tensor.any(Tensor([1],"bool"), axis=0, keepdim=True, )
paddle.Tensor.any(Tensor([5, 3, 4],"bool"), axis=1, keepdim=True, )
paddle.Tensor.any(Tensor([4, 7],"bool"), axis=1, keepdim=True, )
paddle.Tensor.any(Tensor([6],"bool"), axis=0, keepdim=True, )
paddle.Tensor.any(Tensor([22, 4],"bool"), )
paddle.Tensor.any(Tensor([18, 4],"bool"), )
paddle.Tensor.any(Tensor([21, 4],"bool"), )
paddle.Tensor.any(Tensor([2, 3],"bool"), axis=1, keepdim=True, )
paddle.Tensor.atanh(Tensor([2, 3],"float64"), )
paddle.Tensor.atanh(Tensor([3],"float64"), )
paddle.Tensor.atanh(Tensor([2, 4],"float64"), )
paddle.Tensor.atanh(Tensor([3],"float32"), )
paddle.Tensor.atanh(Tensor([1, 2, 3],"float64"), )
paddle.Tensor.atanh(Tensor([2, 3],"float32"), )
paddle.Tensor.atanh(Tensor([1, 2, 3],"float32"), )
paddle.Tensor.atanh(Tensor([],"float32"), )
paddle.Tensor.bmm(Tensor([1, 64, 3],"float32"), Tensor([1, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 4, 3],"float32"), Tensor([1, 3, 2],"float32"), )
paddle.Tensor.bmm(Tensor([1, 16, 3],"float32"), Tensor([1, 3, 2],"float32"), )
paddle.Tensor.broadcast_to(Tensor([1],"float32"), list[3,2,], )
paddle.Tensor.ceil(Tensor([10, 20],"float32"), )
paddle.Tensor.ceil(Tensor([10, 20, 1],"float32"), )
paddle.Tensor.ceil(Tensor([1, 2],"float32"), )
paddle.Tensor.conj(Tensor([10, 20],"float64"), )
paddle.Tensor.conj(Tensor([2, 20, 2, 3],"complex64"), )
paddle.Tensor.conj(Tensor([2, 20, 2, 3],"complex128"), )
paddle.Tensor.conj(Tensor([20, 10],"float64"), )
paddle.Tensor.conj(Tensor([1],"complex64"), )
paddle.Tensor.conj(Tensor([3, 4],"float64"), )
paddle.Tensor.conj(Tensor([2, 4],"float64"), )
paddle.Tensor.conj(Tensor([3, 4, 5],"float64"), )
paddle.Tensor.conj(Tensor([],"float32"), )
paddle.Tensor.conj(Tensor([2, 0, 4],"float32"), )
paddle.Tensor.conj(Tensor([2, 0, 0],"float32"), )
paddle.Tensor.conj(Tensor([10, 1],"float32"), )
paddle.Tensor.conj(Tensor([12, 1],"float32"), )
paddle.Tensor.conj(Tensor([0, 4],"float32"), )
paddle.Tensor.conj(Tensor([4, 5],"float64"), )
paddle.Tensor.conj(Tensor([],"complex64"), )
paddle.Tensor.conj(Tensor([2],"float32"), )
paddle.Tensor.conj(Tensor([2, 3],"complex128"), )
paddle.Tensor.conj(Tensor([],"complex128"), )
paddle.Tensor.conj(Tensor([5, 4],"float64"), )
paddle.Tensor.conj(Tensor([2, 2],"float64"), )
paddle.Tensor.conj(Tensor([5, 4],"float32"), )
paddle.Tensor.conj(Tensor([2, 2],"float32"), )
paddle.Tensor.conj(Tensor([12, 4],"float64"), )
paddle.Tensor.conj(Tensor([4, 5],"float32"), )
paddle.Tensor.conj(Tensor([3],"float32"), )
paddle.Tensor.conj(Tensor([2, 3],"complex64"), )
paddle.Tensor.conj(Tensor([4, 3],"float32"), )
paddle.Tensor.conj(Tensor([2, 3, 4],"float64"), )
paddle.Tensor.conj(Tensor([2, 2],"complex64"), )
paddle.Tensor.conj(Tensor([3, 4],"float32"), )
paddle.Tensor.conj(Tensor([2, 4],"float32"), )
paddle.Tensor.conj(Tensor([10, 1],"float64"), )
paddle.Tensor.cos(Tensor([16, 8],"float32"), )
paddle.Tensor.cos(Tensor([58, 8],"float32"), )
paddle.Tensor.cos(Tensor([1, 9, 64],"float32"), )
paddle.Tensor.cos(Tensor([200, 4],"float32"), )
paddle.Tensor.cos(Tensor([10, 8],"float32"), )
paddle.Tensor.cos(Tensor([8, 4],"float32"), )
paddle.Tensor.cos(Tensor([9, 4],"float32"), )
paddle.Tensor.cos(Tensor([20, 3],"float32"), )
paddle.Tensor.cos(Tensor([6, 4],"float32"), )
paddle.Tensor.cos(Tensor([10, 4],"float32"), )
paddle.Tensor.cos(Tensor([11, 4],"float32"), )
paddle.Tensor.cos(Tensor([7, 4],"float32"), )
paddle.Tensor.cos(Tensor([42],"float32"), )
paddle.Tensor.cos(Tensor([7, 8],"float32"), )
paddle.Tensor.cos(Tensor([8],"float32"), )
paddle.Tensor.cumprod(Tensor([3],"float32"), -1, )
paddle.Tensor.cumprod(Tensor([3],"float64"), -1, )
paddle.Tensor.cumprod(Tensor([10],"float64"), -1, )
paddle.Tensor.cumsum(Tensor([2, 80],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 102],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 74],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 65],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 75],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 95],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 64],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 100],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([1, 24, 18],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([2, 67],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 85],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 78],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 91],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 10, 15],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([2, 105],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 84],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([1, 9, 13],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 12, 9],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([2, 57],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 77],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 100],"int64"), axis=1, )
paddle.Tensor.cumsum(Tensor([2, 56],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([1, 20, 15],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([2, 62],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 60],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([1, 23, 18],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 9, 13],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([1, 18, 25],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([2, 82],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([50, 3],"int64"), )
paddle.Tensor.cumsum(Tensor([2, 98],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([1, 20, 15],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([168],"int64"), )
paddle.Tensor.cumsum(Tensor([2, 59],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 73],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([1, 12, 9],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([2, 92],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 61],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 87],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 54],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 83],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 68],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 104],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 94],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 99],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 63],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([1, 18, 25],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([1, 24, 18],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([2, 66],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 90],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([3, 40],"int64"), )
paddle.Tensor.cumsum(Tensor([2, 55],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 96],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 50],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 70],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 69],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 71],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 58],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 106],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 88],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 93],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([4, 141],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 81],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 10, 15],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([2, 89],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 51],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 52],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 101],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([1, 23, 18],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([2, 72],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 103],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 86],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 53],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 97],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 76],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 79],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 40],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 42],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([1, 20],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([10],"float32"), -1, )
paddle.Tensor.cumsum(Tensor([3],"float32"), -1, )
paddle.Tensor.cumsum(Tensor([2, 46],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 43],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([4, 11],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([4, 12],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 21],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([1, 10, 8],"float32"), 1, )
paddle.Tensor.cumsum(Tensor([10],"float64"), -1, )
paddle.Tensor.cumsum(Tensor([3, 4],"int64"), axis=1, )
paddle.Tensor.cumsum(Tensor([6, 11],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([5, 4],"int64"), axis=0, )
paddle.Tensor.cumsum(Tensor([3, 4, 2],"int64"), axis=2, )
paddle.Tensor.cumsum(Tensor([4, 10],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 11],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([1, 2],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([3, 4, 2],"int64"), axis=1, )
paddle.Tensor.cumsum(Tensor([3],"float64"), -1, )
paddle.Tensor.cumsum(Tensor([2, 44],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([6, 12],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 37],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 47],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 20],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 41],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([1, 10, 8],"float32"), 2, )
paddle.Tensor.cumsum(Tensor([3, 10],"int64"), axis=1, )
paddle.Tensor.cumsum(Tensor([6, 10],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([1, 3],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 38],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 12],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 45],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 36],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 48],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([1, 1],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([5, 4],"int64"), axis=1, )
paddle.Tensor.cumsum(Tensor([30, 3],"int64"), )
paddle.Tensor.cumsum(Tensor([5],"int64"), 0, )
paddle.Tensor.cumsum(Tensor([2, 49],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 39],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([2, 23],"float32"), axis=-1, )
paddle.Tensor.cumsum(Tensor([4],"int64"), 0, )
paddle.Tensor.cumsum(Tensor([3, 3],"int64"), )
paddle.Tensor.cumsum(Tensor([3, 4],"int64"), axis=0, )
paddle.Tensor.cumsum(Tensor([3, 4, 2],"int64"), axis=0, )
paddle.Tensor.cumsum(Tensor([2, 10],"float32"), axis=-1, )
paddle.Tensor.diag_embed(Tensor([1, 1, 2],"float32"), )
paddle.Tensor.diagonal(Tensor([3, 3],"float64"), axis1=-2, axis2=-1, )
paddle.Tensor.diagonal(Tensor([2, 2],"float32"), axis1=-2, axis2=-1, )
paddle.Tensor.diff(x=Tensor([4, 4, 4, 4],"float64"), axis=2, )
paddle.Tensor.diff(x=Tensor([100],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 4, 4, 4],"float64"), axis=-2, )
paddle.Tensor.diff(x=Tensor([4, 4, 4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([4],"int32"), )
paddle.Tensor.diff(Tensor([6],"float64"), )
paddle.Tensor.diff(x=Tensor([4],"int64"), )
paddle.Tensor.diff(x=Tensor([4, 4],"float64"), )
paddle.Tensor.diff(x=Tensor([4],"float32"), )
paddle.Tensor.diff(x=Tensor([10],"float64"), prepend=Tensor([4],"float64"), )
paddle.Tensor.diff(x=Tensor([4, 4, 4],"float64"), )
paddle.Tensor.diff(Tensor([4],"float64"), )
paddle.Tensor.diff(Tensor([3],"float64"), )
paddle.Tensor.diff(Tensor([5],"float64"), )
paddle.Tensor.diff(x=Tensor([4],"float64"), )
paddle.Tensor.diff(Tensor([3],"float32"), )
paddle.Tensor.diff(x=Tensor([10],"float64"), prepend=Tensor([4],"float64"), append=Tensor([4],"float64"), )
paddle.Tensor.diff(Tensor([2],"float64"), )
paddle.Tensor.diff(x=Tensor([10, 4],"float64"), axis=0, prepend=Tensor([4, 4],"float64"), append=Tensor([4, 4],"float64"), )
paddle.Tensor.digamma(Tensor([5, 7, 8],"float64"), )
paddle.Tensor.digamma(Tensor([2, 3],"float32"), )
paddle.Tensor.digamma(Tensor([2],"float32"), )
paddle.Tensor.digamma(Tensor([4, 5],"float64"), )
paddle.Tensor.digamma(Tensor([],"float32"), )
paddle.Tensor.divide(Tensor([42],"float32"), Tensor([42],"float32"), )
paddle.Tensor.dot(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.Tensor.dot(Tensor([2],"float32"), Tensor([2],"float32"), )
paddle.Tensor.equal(Tensor([],"complex64"), complex(1.0,1.0), )
paddle.Tensor.equal(Tensor([2, 10],"int64"), 3, )
paddle.Tensor.equal(Tensor([],"complex128"), complex(1.0,1.0), )
paddle.Tensor.equal_all(Tensor([8],"int64"), Tensor([8],"int64"), )
paddle.Tensor.equal_all(Tensor([8, 3],"int64"), Tensor([8, 3],"int64"), )
paddle.Tensor.erfinv(x=Tensor([4, 2, 3, 5, 4],"float64"), )
paddle.Tensor.erfinv(x=Tensor([4, 2, 3, 5],"float64"), )
paddle.Tensor.erfinv(x=Tensor([4, 2, 3],"float64"), )
paddle.Tensor.erfinv(x=Tensor([4],"float64"), )
paddle.Tensor.erfinv(x=Tensor([4, 2],"float64"), )
paddle.Tensor.erfinv(x=Tensor([4],"float32"), )
paddle.Tensor.exp(Tensor([10, 20, 1],"float32"), )
paddle.Tensor.exp(Tensor([10, 20],"float32"), )
paddle.Tensor.exp(Tensor([5, 10, 8],"float32"), )
paddle.Tensor.exp(Tensor([5, 10],"float64"), )
paddle.Tensor.exp(Tensor([2, 3],"float64"), )
paddle.Tensor.exp(Tensor([1],"float32"), )
paddle.Tensor.exp(Tensor([],"float32"), name="Bernoulli_prob", )
paddle.Tensor.exp(Tensor([2, 3, 2],"float64"), )
paddle.Tensor.exp(Tensor([2, 4],"float64"), )
paddle.Tensor.exp(Tensor([3],"float32"), )
paddle.Tensor.exp(Tensor([],"float64"), name="Cauchy_prob", )
paddle.Tensor.exp(Tensor([1],"float32"), name="Cauchy_prob", )
paddle.Tensor.exp(Tensor([],"float32"), name="Cauchy_prob", )
paddle.Tensor.exp(Tensor([40],"float64"), )
paddle.Tensor.exp(Tensor([4],"float32"), )
paddle.Tensor.exp(Tensor([2, 3, 3],"float64"), )
paddle.Tensor.exp(Tensor([42],"float32"), )
paddle.Tensor.exp(Tensor([1],"float64"), name="Cauchy_prob", )
paddle.Tensor.exp(Tensor([3],"float64"), )
paddle.Tensor.exp(Tensor([3],"float32"), name="Cauchy_prob", )
paddle.Tensor.exp(Tensor([],"float32"), )
paddle.Tensor.exp(Tensor([2, 3],"float32"), )
paddle.Tensor.exp(Tensor([4],"float64"), )
paddle.Tensor.exp(Tensor([2, 2],"float64"), )
paddle.Tensor.exp(Tensor([17],"float64"), )
paddle.Tensor.exp(Tensor([2],"float64"), )
paddle.Tensor.expand_as(Tensor([1, 3, 1, 1],"float32"), Tensor([2, 3, 8, 8],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 3, 1, 1],"float32"), Tensor([1, 3, 8, 8],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 3, 8, 8],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([2, 3, 8, 8],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 128],"int32"), Tensor([5, 128],"int64"), )
paddle.Tensor.expand_as(Tensor([2, 1, 32],"float32"), Tensor([2, 4, 32],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 3, 1, 1],"float32"), Tensor([2, 3, 4, 4],"float32"), )
paddle.Tensor.expand_as(Tensor([1, 1],"int32"), Tensor([5, 1],"int64"), )
paddle.Tensor.expand_as(Tensor([1, 1, 1, 1],"float32"), Tensor([2, 3, 4, 4],"float32"), )
paddle.Tensor.fill_(Tensor([384],"float32"), 1, )
paddle.Tensor.fill_(Tensor([10, 10],"float32"), 1, )
paddle.Tensor.fill_(Tensor([192],"float32"), 1, )
paddle.Tensor.fill_(Tensor([128],"float32"), 1, )
paddle.Tensor.fill_(Tensor([256],"bfloat16"), 0, )
paddle.Tensor.fill_(Tensor([256],"float32"), 1, )
paddle.Tensor.fill_(Tensor([768],"float32"), 0, )
paddle.Tensor.fill_(Tensor([384],"float32"), 0, )
paddle.Tensor.fill_(Tensor([512],"float32"), 0, )
paddle.Tensor.fill_(Tensor([256],"float32"), 0, )
paddle.Tensor.fill_(Tensor([512],"float32"), 1, )
paddle.Tensor.fill_(Tensor([20, 30],"float32"), 1, )
paddle.Tensor.fill_(Tensor([192],"float32"), 0, )
paddle.Tensor.fill_(Tensor([128],"float32"), 0, )
paddle.Tensor.fill_(x=Tensor([16, 16],"float64"), value=41.2, )
paddle.Tensor.fill_(Tensor([16],"float32"), 1, )
paddle.Tensor.fill_(Tensor([37],"float32"), 0, )
paddle.Tensor.fill_(Tensor([64],"float32"), 1, )
paddle.Tensor.fill_(Tensor([1],"float32"), 0, )
paddle.Tensor.fill_(Tensor([32],"float32"), 1.0, )
paddle.Tensor.fill_(Tensor([32],"float32"), 1, )
paddle.Tensor.fill_(Tensor([3],"float32"), 0, )
paddle.Tensor.fill_(x=Tensor([16],"float64"), value=4.2, )
paddle.Tensor.fill_(x=Tensor([4, 4],"float64"), value=4, )
paddle.Tensor.fill_(Tensor([4, 2, 3],"float32"), 0, )
paddle.Tensor.fill_(Tensor([2],"float32"), 0, )
paddle.Tensor.fill_(Tensor([40],"float32"), 0, )
paddle.Tensor.fill_(Tensor([24],"float32"), 1, )
paddle.Tensor.fill_(x=Tensor([4, 4],"float32"), value=4, )
paddle.Tensor.fill_(Tensor([48],"float32"), 1, )
paddle.Tensor.fill_(x=Tensor([4, 4],"int64"), value=4, )
paddle.Tensor.fill_(Tensor([24],"float32"), 0, )
paddle.Tensor.fill_(Tensor([8],"float32"), 1, )
paddle.Tensor.fill_(Tensor([4],"float32"), 1.0, )
paddle.Tensor.fill_(Tensor([4],"float32"), 0, )
paddle.Tensor.fill_(Tensor([8],"float32"), 0, )
paddle.Tensor.fill_(Tensor([32],"float32"), 0, )
paddle.Tensor.fill_(Tensor([48],"float32"), 0, )
paddle.Tensor.fill_(x=Tensor([4, 4],"int32"), value=4, )
paddle.Tensor.fill_(Tensor([16],"float32"), 0, )
paddle.Tensor.fill_(Tensor([],"uint8"), value=1, )
paddle.Tensor.fill_(Tensor([32],"float16"), 1.0, )
paddle.Tensor.fill_(Tensor([96],"float32"), 1, )
paddle.Tensor.fill_(Tensor([64],"float32"), 0, )
paddle.Tensor.fill_(Tensor([96],"float32"), 0, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3, 3],"float32"), 1, offset=0, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"int64"), 1, offset=0, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([2, 2, 2],"int64"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"int32"), 1, offset=0, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3, 3],"float64"), 1, offset=0, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"float64"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([7, 3],"float64"), 1, offset=0, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"int32"), 1, offset=2, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"int32"), 4, 1, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"float64"), 1, offset=0, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"int64"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([7, 3],"float64"), 1, offset=0, wrap=False, )
paddle.Tensor.fill_diagonal_(Tensor([7, 3],"int32"), 1, offset=0, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([2, 2, 2],"float64"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"bool"), 0, offset=0, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([5, 3],"float32"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"float32"), 4, 1, False, )
paddle.Tensor.fill_diagonal_(Tensor([5, 3],"float64"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([7, 3],"int32"), 1, offset=0, wrap=False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3, 3],"int32"), 1, offset=0, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([5, 3],"int64"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([7, 3],"int64"), 1, offset=0, wrap=False, )
paddle.Tensor.fill_diagonal_(Tensor([5, 3],"int32"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"int32"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"float32"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"int64"), 1, offset=2, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([7, 3],"int32"), 4, 0, True, )
paddle.Tensor.fill_diagonal_(Tensor([7, 3],"float64"), 4, 0, True, )
paddle.Tensor.fill_diagonal_(Tensor([2, 2, 2],"float32"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"int64"), 4, 1, False, )
paddle.Tensor.fill_diagonal_(Tensor([2, 2, 2],"int32"), 1, 0, False, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3, 3],"int64"), 1, offset=0, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([7, 3],"float32"), 1, offset=0, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"float64"), 1, offset=2, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"float32"), 1, offset=2, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"float32"), 1, offset=0, wrap=True, )
paddle.Tensor.fill_diagonal_(Tensor([3, 3],"float64"), 4, 1, False, )
paddle.Tensor.fill_diagonal_(Tensor([7, 3],"float32"), 4, 0, True, )
paddle.Tensor.fill_diagonal_(Tensor([7, 3],"int64"), 4, 0, True, )
paddle.Tensor.fill_diagonal_(Tensor([7, 3],"float32"), 1, offset=0, wrap=False, )
paddle.Tensor.fill_diagonal_(Tensor([7, 3],"int64"), 1, offset=0, wrap=True, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"int64"), Tensor([2],"int64"), 1, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 4],"int32"), Tensor([4, 2],"int32"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"int64"), Tensor([2],"int64"), -1, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 3, 2],"int64"), Tensor([2, 2, 3],"int64"), offset=0, dim1=1, dim2=2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 7],"int64"), Tensor([2, 4],"int64"), 0, 1, 2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 3, 2],"int32"), Tensor([2, 2, 3],"int32"), offset=0, dim1=1, dim2=2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([5, 3],"int32"), Tensor([3],"int32"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([4, 3],"int32"), Tensor([2],"int32"), offset=1, dim1=0, dim2=1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 7],"int32"), Tensor([2, 4],"int32"), 0, 1, 2, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"int32"), Tensor([2],"int32"), 1, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"int32"), Tensor([3],"int32"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([4, 3],"int64"), Tensor([3],"int64"), offset=-1, dim1=0, dim2=1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([2, 4, 4],"int64"), Tensor([4, 2],"int64"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"int32"), Tensor([1],"int32"), -2, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([4, 3],"int32"), Tensor([3],"int32"), offset=-1, dim1=0, dim2=1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([4, 3],"int64"), Tensor([2],"int64"), offset=1, dim1=0, dim2=1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([4, 3],"int32"), Tensor([3],"int32"), offset=0, dim1=0, dim2=1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([4, 3],"int64"), Tensor([3],"int64"), offset=0, dim1=0, dim2=1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([5, 3],"int64"), Tensor([3],"int64"), 0, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"int32"), Tensor([2],"int32"), -1, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"int64"), Tensor([1],"int64"), -2, 0, 1, )
paddle.Tensor.fill_diagonal_tensor(Tensor([3, 3],"int64"), Tensor([3],"int64"), 0, 0, 1, )
paddle.Tensor.flip(Tensor([13, 14],"int32"), list[-1,], )
paddle.Tensor.flip(Tensor([2, 3],"float32"), 0, )
paddle.Tensor.flip(Tensor([2, 2],"float32"), 1, )
paddle.Tensor.flip(Tensor([4, 2],"int64"), list[1,], )
paddle.Tensor.flip(Tensor([16],"int64"), 0, )
paddle.Tensor.flip(Tensor([5, 2],"int64"), list[1,], )
paddle.Tensor.flip(Tensor([4, 2],"float32"), 1, )
paddle.Tensor.gather(Tensor([4, 4],"float32"), Tensor([4, 1],"int64"), 1, )
paddle.Tensor.gather_nd(Tensor([2, 10, 32],"float32"), Tensor([2, 2],"int32"), )
paddle.Tensor.gather_nd(Tensor([14, 7, 3],"float32"), Tensor([14, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([13, 7, 3],"float32"), Tensor([13, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([14, 7, 2],"float32"), Tensor([14, 2],"int64"), )
paddle.Tensor.gather_nd(Tensor([1, 20, 2],"float32"), Tensor([1, 2],"int64"), )
paddle.Tensor.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([4, 5],"int32"), y=Tensor([4, 5],"int32"), )
paddle.Tensor.gcd(x=Tensor([1],"int32"), y=Tensor([1],"int32"), )
paddle.Tensor.gcd(x=Tensor([1],"int64"), y=Tensor([1],"int64"), )
paddle.Tensor.gcd(x=Tensor([2, 4, 5],"int32"), y=Tensor([2, 4, 5],"int32"), )
paddle.Tensor.imag(Tensor([2, 20, 2, 3],"complex64"), )
paddle.Tensor.imag(Tensor([2, 20, 2, 3],"complex128"), )
paddle.Tensor.imag(Tensor([],"complex64"), )
paddle.Tensor.index_select(Tensor([2, 1, 400],"float32"), index=Tensor([2],"int64"), axis=-1, )
paddle.Tensor.index_select(Tensor([12],"float64"), Tensor([6],"int64"), )
paddle.Tensor.index_select(Tensor([12],"float32"), Tensor([6],"int64"), )
paddle.Tensor.index_select(Tensor([20],"float32"), Tensor([1],"int64"), )
paddle.Tensor.index_select(Tensor([12],"float64"), Tensor([40],"int64"), )
paddle.Tensor.index_select(Tensor([4, 8],"float32"), Tensor([4],"int64"), axis=0, )
paddle.Tensor.index_select(Tensor([8, 8],"float32"), Tensor([5],"int64"), axis=0, )
paddle.Tensor.index_select(Tensor([12],"int32"), Tensor([6],"int64"), )
paddle.Tensor.index_select(Tensor([1],"float32"), Tensor([1],"int64"), )
paddle.Tensor.index_select(Tensor([12],"int64"), Tensor([6],"int64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([4, 4],"float32"), y=Tensor([4, 4],"float32"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([4, 4],"float64"), y=Tensor([4, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([3, 4],"float64"), y=Tensor([5, 4],"float64"), )
paddle.Tensor.inner(x=Tensor([4],"float64"), y=Tensor([4],"float64"), )
paddle.Tensor.inverse(Tensor([4, 2, 4, 4],"float64"), )
paddle.Tensor.inverse(Tensor([3, 6, 6],"float64"), )
paddle.Tensor.inverse(Tensor([2, 4, 3, 3],"float32"), )
paddle.Tensor.inverse(Tensor([4, 4],"float64"), )
paddle.Tensor.inverse(Tensor([2, 4, 4],"float32"), )
paddle.Tensor.inverse(Tensor([3, 3],"float32"), )
paddle.Tensor.inverse(Tensor([5, 5],"float32"), )
paddle.Tensor.is_complex(Tensor([1, 100, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 40, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 17, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 17, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([40, 12],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 100, 8],"float64"), )
paddle.Tensor.is_complex(Tensor([100, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([40, 8],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 12, 12],"float64"), )
paddle.Tensor.is_complex(Tensor([16, 16],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 40, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 100, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([100, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 8, 8],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 17, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 40, 12],"float64"), )
paddle.Tensor.is_complex(Tensor([40, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([100, 8],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 6, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([40, 21],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 40, 8],"float64"), )
paddle.Tensor.is_complex(Tensor([100, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 40, 8],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 100, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([17, 16],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 12, 12],"float64"), )
paddle.Tensor.is_complex(Tensor([12, 12],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 4, 100],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 6, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 4, 17],"float64"), )
paddle.Tensor.is_complex(Tensor([21, 21],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 12, 12],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 8, 8],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 100, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([4, 100],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 17, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 4, 17],"float64"), )
paddle.Tensor.is_complex(Tensor([17, 17],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 2, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 17, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 4, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 2, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([1],"complex128"), )
paddle.Tensor.is_complex(Tensor([17, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([8, 8],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3],"complex128"), )
paddle.Tensor.is_complex(Tensor([2, 3],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3],"complex64"), )
paddle.Tensor.is_complex(Tensor([1, 17, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([],"bfloat16"), )
paddle.Tensor.is_complex(Tensor([3],"complex128"), )
paddle.Tensor.is_complex(Tensor([4],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 4, 17],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3, 4, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 4, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 2],"int64"), )
paddle.Tensor.is_complex(Tensor([17, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 6, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([4],"complex64"), )
paddle.Tensor.is_complex(Tensor([4, 17],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 4, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([4],"float32"), )
paddle.Tensor.is_complex(Tensor([2],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 4, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([4, 4],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 4, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([6, 6],"float64"), )
paddle.Tensor.is_complex(Tensor([4, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 2, 2],"float64"), )
paddle.Tensor.is_complex(Tensor([3, 3],"float64"), )
paddle.Tensor.is_complex(Tensor([1, 8, 8],"float64"), )
paddle.Tensor.is_complex(Tensor([2, 3],"float32"), )
paddle.Tensor.is_complex(Tensor([],"float32"), )
paddle.Tensor.is_complex(Tensor([3],"complex64"), )
paddle.Tensor.is_complex(Tensor([5, 5],"float64"), )
paddle.Tensor.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([3, 4, 5],"float64"), )
paddle.Tensor.isclose(x=Tensor([2],"float32"), y=Tensor([2],"float32"), )
paddle.Tensor.isclose(x=Tensor([6],"float64"), y=Tensor([6],"float64"), )
paddle.Tensor.isclose(x=Tensor([2],"float64"), y=Tensor([2],"float64"), )
paddle.Tensor.isinf(Tensor([],"float32"), )
paddle.Tensor.isnan(Tensor([4, 7, 6],"float64"), )
paddle.Tensor.isnan(Tensor([168],"float64"), )
paddle.Tensor.isnan(Tensor([512],"float32"), )
paddle.Tensor.isnan(Tensor([7, 24],"float64"), )
paddle.Tensor.isnan(Tensor([4, 42],"float64"), )
paddle.Tensor.isnan(Tensor([37],"float32"), )
paddle.Tensor.isnan(Tensor([1],"float32"), )
paddle.Tensor.isnan(Tensor([20],"float32"), )
paddle.Tensor.isnan(Tensor([3, 3, 3],"float64"), )
paddle.Tensor.isnan(Tensor([6],"float32"), )
paddle.Tensor.isnan(Tensor([4, 7],"float64"), )
paddle.Tensor.isnan(Tensor([3, 3, 3],"float32"), )
paddle.Tensor.isnan(Tensor([8],"float32"), )
paddle.Tensor.isnan(Tensor([2, 3],"float32"), )
paddle.Tensor.isnan(Tensor([4, 7],"float32"), )
paddle.Tensor.isnan(Tensor([2, 3],"float64"), )
paddle.Tensor.isnan(Tensor([5, 12],"float64"), )
paddle.Tensor.isnan(Tensor([32],"float32"), )
paddle.Tensor.isnan(Tensor([2, 3, 4],"float64"), )
paddle.Tensor.isnan(Tensor([5, 3, 4],"float64"), )
paddle.Tensor.isnan(Tensor([],"float32"), )
paddle.Tensor.isnan(Tensor([3],"float32"), )
paddle.Tensor.item(Tensor([],"int64"), 0, )
paddle.Tensor.item(Tensor([],"int64"), )
paddle.Tensor.item(Tensor([1],"int32"), 0, )
paddle.Tensor.item(Tensor([1],"bool"), )
paddle.Tensor.item(Tensor([],"bool"), )
paddle.Tensor.item(Tensor([],"float32"), )
paddle.Tensor.item(Tensor([],"float32"), 0, )
paddle.Tensor.item(Tensor([],"float16"), )
paddle.Tensor.item(Tensor([1],"float64"), )
paddle.Tensor.item(Tensor([],"bool"), )
paddle.Tensor.item(Tensor([1],"int64"), )
paddle.Tensor.item(Tensor([1],"float32"), )
paddle.Tensor.item(Tensor([1],"float32"), )
paddle.Tensor.item(Tensor([],"int32"), )
paddle.Tensor.item(Tensor([1],"int32"), )
paddle.Tensor.item(Tensor([],"uint8"), )
paddle.Tensor.item(Tensor([2, 1, 1],"int64"), 0, )
paddle.Tensor.item(Tensor([1],"float32"), 0, )
paddle.Tensor.item(Tensor([1],"bool"), )
paddle.Tensor.item(Tensor([],"bool"), )
paddle.Tensor.item(Tensor([1],"int32"), )
paddle.Tensor.item(Tensor([],"int64"), )
paddle.Tensor.item(Tensor([1, 1, 1, 1],"float64"), )
paddle.Tensor.item(Tensor([1],"float64"), 0, )
paddle.Tensor.item(Tensor([2, 1, 1],"int32"), 0, )
paddle.Tensor.item(Tensor([],"int64"), )
paddle.Tensor.item(Tensor([1, 1, 1, 1],"float32"), )
paddle.Tensor.item(Tensor([],"float64"), )
paddle.Tensor.item(Tensor([1],"int32"), )
paddle.Tensor.item(Tensor([1],"float32"), )
paddle.Tensor.item(Tensor([1],"int64"), 0, )
paddle.Tensor.item(Tensor([1],"int64"), )
paddle.Tensor.item(Tensor([],"float64"), )
paddle.Tensor.item(Tensor([],"float32"), )
paddle.Tensor.item(Tensor([],"float32"), )
paddle.Tensor.item(Tensor([3, 3],"float32"), 0, )
paddle.Tensor.item(Tensor([],"int32"), 0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, )
paddle.Tensor.lerp(x=Tensor([4, 5, 4],"float64"), y=Tensor([4, 5, 4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5],"float64"), y=Tensor([1],"float64"), weight=0.2, )
paddle.Tensor.lerp(x=Tensor([4],"float64"), y=Tensor([4],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4, 5],"float64"), y=Tensor([4, 5],"float64"), weight=0.5, )
paddle.Tensor.lerp(x=Tensor([4],"float32"), y=Tensor([4],"float32"), weight=0.5, )
paddle.Tensor.lgamma(Tensor([5, 7, 8],"float64"), )
paddle.Tensor.lgamma(Tensor([4, 5],"float64"), )
paddle.Tensor.lgamma(Tensor([3],"float32"), )
paddle.Tensor.lgamma(Tensor([2, 3],"float32"), )
paddle.Tensor.lgamma(Tensor([],"float32"), )
paddle.Tensor.lgamma(Tensor([2],"float32"), )
paddle.Tensor.log(Tensor([300, 1],"float32"), )
paddle.Tensor.log(Tensor([4],"float64"), )
paddle.Tensor.log(Tensor([10],"float64"), )
paddle.Tensor.log(Tensor([2, 3],"float32"), )
paddle.Tensor.log(Tensor([3, 3],"float64"), )
paddle.Tensor.log(Tensor([2, 1],"float64"), )
paddle.Tensor.log(Tensor([1],"float64"), )
paddle.Tensor.log(Tensor([2, 3, 3],"float64"), )
paddle.Tensor.log(Tensor([3],"float32"), )
paddle.Tensor.log(Tensor([2],"float32"), )
paddle.Tensor.log(Tensor([],"float32"), )
paddle.Tensor.log(Tensor([2],"float64"), )
paddle.Tensor.log(Tensor([42],"float32"), )
paddle.Tensor.log(Tensor([8, 1],"float32"), )
paddle.Tensor.log(Tensor([3],"float64"), )
paddle.Tensor.log(Tensor([4],"float32"), )
paddle.Tensor.log(Tensor([],"float64"), )
paddle.Tensor.log(Tensor([1],"float32"), )
paddle.Tensor.log(Tensor([2, 4],"float64"), )
paddle.Tensor.log(Tensor([11, 1],"float32"), )
paddle.Tensor.log(Tensor([9, 1],"float32"), )
paddle.Tensor.log(Tensor([10],"float32"), )
paddle.Tensor.log(Tensor([2, 3, 2],"float64"), )
paddle.Tensor.log(Tensor([8, 10],"float64"), )
paddle.Tensor.log(Tensor([10, 1],"float32"), )
paddle.Tensor.log(Tensor([2, 3],"float64"), )
paddle.Tensor.log(Tensor([1, 2],"float32"), )
paddle.Tensor.log1p(Tensor([3],"float64"), )
paddle.Tensor.log1p(Tensor([3],"float32"), )
paddle.Tensor.log1p(Tensor([2, 3, 2],"float64"), )
paddle.Tensor.log1p(Tensor([1],"float64"), )
paddle.Tensor.log1p(Tensor([],"float64"), )
paddle.Tensor.log1p(Tensor([10],"float64"), )
paddle.Tensor.log1p(Tensor([1],"float32"), )
paddle.Tensor.log1p(Tensor([],"float32"), )
paddle.Tensor.log1p(Tensor([2, 3],"float64"), )
paddle.Tensor.log1p(Tensor([2, 3],"float32"), )
paddle.Tensor.logical_and(Tensor([91],"bool"), Tensor([91],"bool"), )
paddle.Tensor.logical_and(Tensor([2, 3],"bool"), Tensor([2, 3],"bool"), )
paddle.Tensor.logical_and(Tensor([],"bool"), Tensor([],"bool"), )
paddle.Tensor.logical_not(Tensor([4, 42],"bool"), )
paddle.Tensor.logical_not(Tensor([13, 9],"float32"), )
paddle.Tensor.logical_not(Tensor([200],"bool"), )
paddle.Tensor.logical_not(Tensor([7, 24],"bool"), )
paddle.Tensor.logical_not(Tensor([512],"bool"), )
paddle.Tensor.logical_not(Tensor([168],"bool"), )
paddle.Tensor.logical_not(Tensor([300],"bool"), )
paddle.Tensor.logical_not(Tensor([4, 7, 6],"bool"), )
paddle.Tensor.logical_not(Tensor([1],"bool"), )
paddle.Tensor.logical_not(Tensor([6],"bool"), )
paddle.Tensor.logical_not(Tensor([20],"bool"), )
paddle.Tensor.logical_not(Tensor([3, 3, 3],"bool"), )
paddle.Tensor.logical_not(Tensor([8],"bool"), )
paddle.Tensor.logical_not(Tensor([32],"bool"), )
paddle.Tensor.logical_not(Tensor([3],"bool"), )
paddle.Tensor.logical_not(Tensor([5, 3, 4],"bool"), )
paddle.Tensor.logical_not(Tensor([4, 7],"bool"), )
paddle.Tensor.logical_not(Tensor([2, 3],"bool"), )
paddle.Tensor.logical_not(Tensor([2, 3, 4],"bool"), )
paddle.Tensor.logical_not(Tensor([37],"bool"), )
paddle.Tensor.logical_not(Tensor([5, 12],"bool"), )
paddle.Tensor.logical_or(Tensor([91],"bool"), Tensor([91],"bool"), )
paddle.Tensor.logit(x=Tensor([4, 3, 2, 5],"float64"), eps=0.2, )
paddle.Tensor.lu(Tensor([3, 3],"float32"), )
paddle.Tensor.lu(Tensor([3, 3],"float64"), )
paddle.Tensor.lu(Tensor([4, 3, 2, 2],"float64"), )
paddle.Tensor.lu(Tensor([3, 3, 3],"float64"), )
paddle.Tensor.masked_fill(Tensor([13, 32],"float32"), Tensor([13, 32],"bool"), 0, )
paddle.Tensor.masked_fill(Tensor([4, 3],"float32"), mask=Tensor([3],"bool"), value=Tensor([],"float32"), )
paddle.Tensor.masked_select(Tensor([128],"int64"), Tensor([128],"bool"), )
paddle.Tensor.masked_select(Tensor([52],"float32"), Tensor([52],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 22, 16],"float32"), Tensor([1, 22, 16],"bool"), )
paddle.Tensor.masked_select(Tensor([10],"int32"), Tensor([10],"bool"), )
paddle.Tensor.masked_select(Tensor([4],"int64"), Tensor([4],"bool"), )
paddle.Tensor.masked_select(Tensor([20],"float32"), Tensor([20],"bool"), )
paddle.Tensor.masked_select(Tensor([8],"int64"), Tensor([8],"bool"), )
paddle.Tensor.masked_select(Tensor([1, 1],"float32"), Tensor([1, 1],"bool"), )
paddle.Tensor.matmul(Tensor([3, 100, 1],"float64"), Tensor([3, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([2, 3, 4, 5],"complex64"), Tensor([2, 3, 5, 4],"float32"), )
paddle.Tensor.matmul(Tensor([2, 3, 4, 4],"float64"), Tensor([2, 3, 4, 4],"float64"), )
paddle.Tensor.matmul(Tensor([125, 1],"float64"), Tensor([1, 5],"float64"), )
paddle.Tensor.matmul(Tensor([3, 100, 1],"float64"), Tensor([3, 1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([2, 3, 17, 2],"float64"), Tensor([2, 3, 2, 2],"float64"), )
paddle.Tensor.matmul(Tensor([2, 3, 4, 2],"float64"), Tensor([2, 3, 2, 17],"float64"), )
paddle.Tensor.matmul(Tensor([1, 125],"float64"), Tensor([125, 1],"float64"), )
paddle.Tensor.matmul(Tensor([2, 1, 100],"complex128"), Tensor([100],"complex128"), )
paddle.Tensor.matmul(Tensor([3, 17, 2],"float64"), Tensor([3, 2, 2],"float64"), )
paddle.Tensor.matmul(Tensor([100, 2],"float64"), Tensor([2, 4],"float64"), )
paddle.Tensor.matmul(Tensor([2, 3, 4, 1],"float64"), Tensor([2, 3, 1, 100],"float64"), )
paddle.Tensor.matmul(Tensor([2, 3, 100, 1],"float64"), Tensor([2, 3, 1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([3, 4, 1],"float64"), Tensor([3, 1, 100],"float64"), )
paddle.Tensor.matmul(Tensor([40, 6],"float64"), Tensor([6, 100],"float64"), )
paddle.Tensor.matmul(Tensor([2, 3, 4, 4],"float64"), Tensor([2, 3, 4, 17],"float64"), )
paddle.Tensor.matmul(Tensor([1, 40, 6],"float64"), Tensor([1, 6, 6],"float64"), )
paddle.Tensor.matmul(Tensor([1, 40, 8],"float64"), Tensor([1, 8, 8],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 8],"float64"), Tensor([1, 8, 8],"float64"), )
paddle.Tensor.matmul(Tensor([2, 3, 17, 2],"float64"), Tensor([2, 3, 2, 4],"float64"), )
paddle.Tensor.matmul(Tensor([1, 40, 12],"float64"), Tensor([1, 12, 12],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 6],"float64"), Tensor([1, 6, 6],"float64"), )
paddle.Tensor.matmul(Tensor([40, 6],"float64"), Tensor([6, 6],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 6],"float64"), Tensor([1, 6, 40],"float64"), )
paddle.Tensor.matmul(Tensor([2, 3, 17, 4],"float64"), Tensor([2, 3, 4, 4],"float64"), )
paddle.Tensor.matmul(Tensor([96, 1],"float64"), Tensor([1, 192],"float64"), )
paddle.Tensor.matmul(Tensor([3, 40, 6],"float64"), Tensor([3, 6, 6],"float64"), )
paddle.Tensor.matmul(Tensor([5, 25],"float64"), Tensor([25, 1],"float64"), )
paddle.Tensor.matmul(Tensor([2, 1, 100],"complex64"), Tensor([100],"complex64"), )
paddle.Tensor.matmul(Tensor([6, 8],"float64"), Tensor([8, 56],"float64"), )
paddle.Tensor.matmul(Tensor([3, 17, 2],"float64"), Tensor([3, 2, 4],"float64"), )
paddle.Tensor.matmul(Tensor([3, 40, 1],"float64"), Tensor([3, 1, 100],"float64"), )
paddle.Tensor.matmul(Tensor([25, 5],"float64"), Tensor([5, 5],"float64"), )
paddle.Tensor.matmul(Tensor([17, 16],"float64"), Tensor([16, 16],"float64"), )
paddle.Tensor.matmul(Tensor([96, 1],"float64"), Tensor([1, 96],"float64"), )
paddle.Tensor.matmul(Tensor([36, 4],"float64"), Tensor([4, 48],"float64"), )
paddle.Tensor.matmul(Tensor([1, 2, 50],"complex128"), Tensor([1, 50, 2],"complex128"), )
paddle.Tensor.matmul(Tensor([8, 6],"float64"), Tensor([6, 56],"float64"), )
paddle.Tensor.matmul(Tensor([12, 4],"float64"), Tensor([4, 20],"float64"), )
paddle.Tensor.matmul(Tensor([3, 4, 4],"float64"), Tensor([3, 4, 17],"float64"), )
paddle.Tensor.matmul(Tensor([40, 1],"float64"), Tensor([1, 100],"float64"), )
paddle.Tensor.matmul(Tensor([5, 25],"float64"), Tensor([25, 5],"float64"), )
paddle.Tensor.matmul(Tensor([3, 4, 2],"float64"), Tensor([3, 2, 17],"float64"), )
paddle.Tensor.matmul(Tensor([2, 3, 4, 5],"complex128"), Tensor([2, 3, 5, 4],"complex128"), )
paddle.Tensor.matmul(Tensor([100, 8],"float64"), Tensor([8, 8],"float64"), )
paddle.Tensor.matmul(Tensor([2, 3, 100, 1],"float64"), Tensor([2, 3, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([40, 8],"float64"), Tensor([8, 8],"float64"), )
paddle.Tensor.matmul(Tensor([1, 40, 1],"float64"), Tensor([1, 1, 100],"float64"), )
paddle.Tensor.matmul(Tensor([3, 100, 2],"float64"), Tensor([3, 2, 2],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 4],"float64"), Tensor([1, 4, 4],"float64"), )
paddle.Tensor.matmul(Tensor([1, 4, 4],"float64"), Tensor([1, 4, 100],"float64"), )
paddle.Tensor.matmul(Tensor([3, 100, 2],"float64"), Tensor([3, 2, 4],"float64"), )
paddle.Tensor.matmul(Tensor([4, 4],"float64"), Tensor([4, 100],"float64"), )
paddle.Tensor.matmul(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 5, 4],"complex128"), )
paddle.Tensor.matmul(Tensor([12, 4],"float32"), Tensor([4, 20],"float32"), )
paddle.Tensor.matmul(Tensor([2, 3, 4, 1],"float64"), Tensor([2, 3, 1, 17],"float64"), )
paddle.Tensor.matmul(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 5, 4],"complex64"), )
paddle.Tensor.matmul(Tensor([48, 1],"float32"), Tensor([1, 80],"float32"), )
paddle.Tensor.matmul(Tensor([1, 100, 2],"float64"), Tensor([1, 2, 4],"float64"), )
paddle.Tensor.matmul(Tensor([100, 1],"float64"), Tensor([1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([2, 56],"float64"), Tensor([56, 8],"float64"), )
paddle.Tensor.matmul(Tensor([1, 40, 6],"float64"), Tensor([1, 6, 100],"float64"), )
paddle.Tensor.matmul(Tensor([4, 2],"float64"), Tensor([2, 100],"float64"), )
paddle.Tensor.matmul(Tensor([3, 16],"float64"), Tensor([16, 5],"float64"), )
paddle.Tensor.matmul(Tensor([48, 1],"float64"), Tensor([1, 80],"float64"), )
paddle.Tensor.matmul(Tensor([2, 56],"float64"), Tensor([56, 7],"float64"), )
paddle.Tensor.matmul(Tensor([25, 5],"float64"), Tensor([5, 25],"float64"), )
paddle.Tensor.matmul(Tensor([6, 12],"float64"), Tensor([12, 12],"float64"), )
paddle.Tensor.matmul(Tensor([125, 1],"float64"), Tensor([1, 25],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 2],"float64"), Tensor([1, 2, 2],"float64"), )
paddle.Tensor.matmul(Tensor([1, 4, 1],"float64"), Tensor([1, 1, 100],"float64"), )
paddle.Tensor.matmul(Tensor([100, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.Tensor.matmul(Tensor([100, 1],"float64"), Tensor([1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([3, 4, 2],"float64"), Tensor([3, 2, 100],"float64"), )
paddle.Tensor.matmul(Tensor([1, 25],"float64"), Tensor([25, 5],"float64"), )
paddle.Tensor.matmul(Tensor([1, 5],"float64"), Tensor([5, 25],"float64"), )
paddle.Tensor.matmul(Tensor([2, 3, 17, 1],"float64"), Tensor([2, 3, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([125, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.Tensor.matmul(Tensor([2, 3, 4, 5],"complex128"), Tensor([2, 3, 5, 4],"float64"), )
paddle.Tensor.matmul(Tensor([100, 6],"float64"), Tensor([6, 6],"float64"), )
paddle.Tensor.matmul(Tensor([3, 16],"float32"), Tensor([16, 5],"float32"), )
paddle.Tensor.matmul(Tensor([1, 100, 1],"float64"), Tensor([1, 1, 40],"float64"), )
paddle.Tensor.matmul(Tensor([100, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.Tensor.matmul(Tensor([1, 100, 1],"float64"), Tensor([1, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([17, 16],"float64"), Tensor([16, 17],"float64"), )
paddle.Tensor.matmul(Tensor([2, 3, 40, 1],"float64"), Tensor([2, 3, 1, 100],"float64"), )
paddle.Tensor.matmul(Tensor([100, 6],"float64"), Tensor([6, 40],"float64"), )
paddle.Tensor.matmul(Tensor([1, 2, 50],"complex64"), Tensor([1, 50, 2],"complex64"), )
paddle.Tensor.matmul(Tensor([25, 5],"float64"), Tensor([5, 1],"float64"), )
paddle.Tensor.matmul(Tensor([5, 5],"float64"), Tensor([5, 25],"float64"), )
paddle.Tensor.matmul(Tensor([40, 12],"float64"), Tensor([12, 12],"float64"), )
paddle.Tensor.matmul(Tensor([72, 1],"float64"), Tensor([1, 144],"float64"), )
paddle.Tensor.matmul(Tensor([1, 4, 2],"float64"), Tensor([1, 2, 100],"float64"), )
paddle.Tensor.matmul(Tensor([4, 1],"float64"), Tensor([1, 100],"float64"), )
paddle.Tensor.matmul(Tensor([1, 1],"float64"), Tensor([1, 100],"float64"), )
paddle.Tensor.matmul(Tensor([2, 3, 4, 5],"complex64"), Tensor([2, 3, 5, 4],"complex64"), )
paddle.Tensor.matmul(Tensor([3, 17, 4],"float64"), Tensor([3, 4, 4],"float64"), )
paddle.Tensor.matmul(Tensor([100, 2],"float64"), Tensor([2, 2],"float64"), )
paddle.Tensor.matmul(Tensor([20, 2],"float64"), Tensor([2, 20],"float64"), )
paddle.Tensor.matmul(Tensor([25, 1],"float64"), Tensor([1, 5],"float64"), )
paddle.Tensor.matmul(Tensor([25, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.Tensor.matmul(Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.Tensor.matmul(Tensor([0, 1],"float64"), Tensor([1, 0],"float64"), )
paddle.Tensor.matmul(Tensor([4, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.Tensor.matmul(Tensor([1, 17, 2],"float64"), Tensor([1, 2, 4],"float64"), )
paddle.Tensor.matmul(Tensor([1, 6],"float64"), Tensor([6, 1],"float64"), )
paddle.Tensor.matmul(Tensor([1, 4, 1],"float64"), Tensor([1, 1, 17],"float64"), )
paddle.Tensor.matmul(Tensor([25, 1],"float64"), Tensor([1, 25],"float64"), )
paddle.Tensor.matmul(Tensor([1, 5],"float64"), Tensor([5, 1],"float64"), )
paddle.Tensor.matmul(Tensor([4, 1],"float64"), Tensor([1, 17],"float64"), )
paddle.Tensor.matmul(Tensor([2, 3, 4, 2],"float64"), Tensor([2, 3, 2, 2],"float64"), )
paddle.Tensor.matmul(Tensor([17, 2],"float64"), Tensor([2, 4],"float64"), )
paddle.Tensor.matmul(Tensor([3, 17, 1],"float64"), Tensor([3, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), )
paddle.Tensor.matmul(Tensor([5, 5],"float64"), Tensor([5, 1],"float64"), )
paddle.Tensor.matmul(Tensor([1, 10],"float64"), Tensor([10, 1],"float64"), )
paddle.Tensor.matmul(Tensor([6, 3],"float64"), Tensor([3, 3],"float64"), )
paddle.Tensor.matmul(Tensor([3, 3],"float64"), Tensor([3, 6],"float64"), )
paddle.Tensor.matmul(Tensor([3, 4, 1],"float64"), Tensor([3, 1, 17],"float64"), )
paddle.Tensor.matmul(Tensor([4, 4],"float64"), Tensor([4, 17],"float64"), )
paddle.Tensor.matmul(Tensor([1, 1],"float64"), Tensor([1, 5],"float64"), )
paddle.Tensor.matmul(Tensor([17, 2],"float64"), Tensor([2, 2],"float64"), )
paddle.Tensor.matmul(Tensor([1, 17, 4],"float64"), Tensor([1, 4, 4],"float64"), )
paddle.Tensor.matmul(Tensor([5, 1],"float64"), Tensor([1, 25],"float64"), )
paddle.Tensor.matmul(Tensor([1, 4, 4],"float64"), Tensor([1, 4, 17],"float64"), )
paddle.Tensor.matmul(Tensor([17, 4],"float64"), Tensor([4, 4],"float64"), )
paddle.Tensor.matmul(Tensor([1, 4, 2],"float64"), Tensor([1, 2, 2],"float64"), )
paddle.Tensor.matmul(Tensor([17, 1],"float64"), Tensor([1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.Tensor.matmul(Tensor([4, 2],"float64"), Tensor([2, 17],"float64"), )
paddle.Tensor.matmul(Tensor([1, 17, 1],"float64"), Tensor([1, 1, 4],"float64"), )
paddle.Tensor.matmul(Tensor([1, 9],"float64"), Tensor([9, 1],"float64"), )
paddle.Tensor.matmul(Tensor([1, 9],"float32"), Tensor([9, 1],"float32"), )
paddle.Tensor.matmul(Tensor([5, 4],"float64"), Tensor([4, 8],"float64"), )
paddle.Tensor.matmul(Tensor([17, 1],"float64"), Tensor([1, 17],"float64"), )
paddle.Tensor.matmul(Tensor([3, 4, 2],"float64"), Tensor([3, 2, 2],"float64"), )
paddle.Tensor.matmul(Tensor([1, 25],"float64"), Tensor([25, 1],"float64"), )
paddle.Tensor.matmul(Tensor([2, 2],"float64"), Tensor([2, 2],"float64"), )
paddle.Tensor.matmul(Tensor([3, 4, 4],"float64"), Tensor([3, 4, 4],"float64"), )
paddle.Tensor.matmul(Tensor([5, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.Tensor.matmul(Tensor([3, 3],"float64"), Tensor([3, 3],"float64"), )
paddle.Tensor.matmul(Tensor([1, 17, 2],"float64"), Tensor([1, 2, 2],"float64"), )
paddle.Tensor.matmul(Tensor([1, 4, 4],"float64"), Tensor([1, 4, 4],"float64"), )
paddle.Tensor.matmul(Tensor([4, 2],"float64"), Tensor([2, 2],"float64"), )
paddle.Tensor.matmul(Tensor([0, 1],"float32"), Tensor([1, 0],"float32"), )
paddle.Tensor.matmul(Tensor([1, 5],"float64"), Tensor([5, 5],"float64"), )
paddle.Tensor.matmul(Tensor([1, 4, 2],"float64"), Tensor([1, 2, 17],"float64"), )
paddle.Tensor.matmul(Tensor([2, 2],"float64"), Tensor([2, 3],"float64"), )
paddle.Tensor.matmul(Tensor([5, 1],"float64"), Tensor([1, 5],"float64"), )
paddle.Tensor.mm(Tensor([10, 10],"float32"), Tensor([10, 10],"float32"), )
paddle.Tensor.mod(Tensor([1],"int64"), Tensor([],"int64"), )
paddle.Tensor.mode(Tensor([3, 2, 3],"float64"), axis=1, keepdim=False, )
paddle.Tensor.mode(Tensor([3, 2, 3],"float64"), )
paddle.Tensor.mode(Tensor([3, 2, 3],"float64"), axis=2, keepdim=True, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 5],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3, 5, 7],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2],"complex64"), source=0, destination=1, )
paddle.Tensor.moveaxis(Tensor([2, 3, 5],"float64"), -2, -1, )
paddle.Tensor.moveaxis(x=Tensor([4, 2],"float64"), source=0, destination=1, )
paddle.Tensor.moveaxis(x=Tensor([4, 2],"complex128"), source=0, destination=1, )
paddle.Tensor.moveaxis(x=Tensor([4, 2, 3],"float64"), source=0, destination=2, )
paddle.Tensor.moveaxis(x=Tensor([4, 2],"int32"), source=0, destination=1, )
paddle.Tensor.moveaxis(x=Tensor([4, 2],"int64"), source=0, destination=1, )
paddle.Tensor.moveaxis(x=Tensor([4, 2],"float32"), source=0, destination=1, )
paddle.Tensor.moveaxis(Tensor([3, 2],"complex64"), 0, 1, )
paddle.Tensor.multigammaln(Tensor([7],"float32"), 3, )
paddle.Tensor.multiply(Tensor([2],"float32"), Tensor([],"float32"), )
paddle.Tensor.multiply(Tensor([1],"float32"), Tensor([],"float32"), )
paddle.Tensor.multiply(Tensor([42],"float32"), Tensor([42],"float32"), )
paddle.Tensor.nansum(Tensor([3, 2, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.Tensor.nansum(Tensor([3, 3, 3],"float64"), )
paddle.Tensor.nansum(Tensor([3, 3, 3],"float32"), )
paddle.Tensor.nansum(Tensor([3, 3, 3],"float64"), axis=-1, )
paddle.Tensor.nansum(Tensor([3, 3, 3],"float64"), axis=0, keepdim=True, )
paddle.Tensor.neg(Tensor([2],"float32"), )
paddle.Tensor.neg(Tensor([1],"float32"), )
paddle.Tensor.nonzero(Tensor([648],"bool"), )
paddle.Tensor.nonzero(Tensor([560],"bool"), )
paddle.Tensor.nonzero(Tensor([880],"bool"), )
paddle.Tensor.nonzero(Tensor([968],"bool"), )
paddle.Tensor.nonzero(Tensor([128],"bool"), )
paddle.Tensor.nonzero(Tensor([792],"bool"), )
paddle.Tensor.nonzero(Tensor([704],"bool"), )
paddle.Tensor.nonzero(Tensor([900],"bool"), )
paddle.Tensor.nonzero(Tensor([640],"bool"), )
paddle.Tensor.nonzero(Tensor([616],"bool"), )
paddle.Tensor.nonzero(Tensor([512],"bool"), )
paddle.Tensor.nonzero(Tensor([200],"bool"), )
paddle.Tensor.nonzero(Tensor([800],"bool"), )
paddle.Tensor.nonzero(Tensor([720],"bool"), )
paddle.Tensor.nonzero(Tensor([21],"bool"), )
paddle.Tensor.nonzero(Tensor([18],"bool"), )
paddle.Tensor.nonzero(Tensor([26],"bool"), )
paddle.Tensor.nonzero(Tensor([9],"bool"), )
paddle.Tensor.nonzero(Tensor([22],"bool"), )
paddle.Tensor.nonzero(Tensor([23],"bool"), )
paddle.Tensor.nonzero(Tensor([8],"bool"), )
paddle.Tensor.nonzero(Tensor([4],"bool"), )
paddle.Tensor.nonzero(Tensor([11],"bool"), )
paddle.Tensor.nonzero(Tensor([24],"bool"), )
paddle.Tensor.nonzero(Tensor([19],"bool"), )
paddle.Tensor.nonzero(Tensor([25],"bool"), )
paddle.Tensor.norm(Tensor([768],"float32"), )
paddle.Tensor.norm(Tensor([128, 2],"float32"), p=2, axis=1, keepdim=True, )
paddle.Tensor.norm(Tensor([12, 64],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.norm(Tensor([20, 20],"float32"), p=2, axis=0, keepdim=True, )
paddle.Tensor.norm(Tensor([512, 1],"float32"), p=2, axis=1, keepdim=True, )
paddle.Tensor.norm(Tensor([12, 64],"float32"), p=2, axis=-1, keepdim=True, )
paddle.Tensor.norm(Tensor([2, 2, 2],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.norm(Tensor([1, 2, 2],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.norm(Tensor([2, 2],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.norm(Tensor([2, 20],"float32"), p=2, axis=0, keepdim=True, )
paddle.Tensor.norm(Tensor([3, 20],"float32"), p=2, axis=0, keepdim=True, )
paddle.Tensor.not_equal(Tensor([13, 14],"int64"), Tensor([1],"int64"), )
paddle.Tensor.not_equal(Tensor([13, 14],"bool"), Tensor([1],"bool"), )
paddle.Tensor.not_equal(Tensor([13, 10],"int64"), Tensor([1],"int64"), )
paddle.Tensor.not_equal(Tensor([1, 52],"int64"), Tensor([],"int64"), )
paddle.Tensor.not_equal(Tensor([1, 47],"int64"), Tensor([],"int64"), )
paddle.Tensor.not_equal(Tensor([1, 62],"int64"), Tensor([],"int64"), )
paddle.Tensor.not_equal(Tensor([1, 51],"int64"), Tensor([],"int64"), )
paddle.Tensor.not_equal(Tensor([1, 59],"int64"), Tensor([],"int64"), )
paddle.Tensor.not_equal(Tensor([1, 44],"int64"), Tensor([],"int64"), )
paddle.Tensor.not_equal(Tensor([1, 49],"int64"), Tensor([],"int64"), )
paddle.Tensor.not_equal(Tensor([1, 48],"int64"), Tensor([],"int64"), )
paddle.Tensor.not_equal(Tensor([13, 7],"int64"), Tensor([1],"int64"), )
paddle.Tensor.not_equal(Tensor([1, 45],"int64"), Tensor([],"int64"), )
paddle.Tensor.not_equal(Tensor([13, 3],"int64"), Tensor([1],"int64"), )
paddle.Tensor.not_equal(Tensor([12, 7],"int32"), Tensor([1],"int32"), )
paddle.Tensor.not_equal(Tensor([1, 46],"int64"), Tensor([],"int64"), )
paddle.Tensor.not_equal(Tensor([12, 7],"int64"), Tensor([1],"int64"), )
paddle.Tensor.not_equal(Tensor([1, 54],"int64"), Tensor([],"int64"), )
paddle.Tensor.not_equal(Tensor([1, 43],"int64"), Tensor([],"int64"), )
paddle.Tensor.outer(x=Tensor([4, 2, 5, 2],"float64"), y=Tensor([2, 3, 4, 4],"float64"), )
paddle.Tensor.outer(x=Tensor([4, 2],"float64"), y=Tensor([2, 3, 4],"float64"), )
paddle.Tensor.outer(x=Tensor([4],"float64"), y=Tensor([4],"float64"), )
paddle.Tensor.outer(x=Tensor([4, 2, 3],"float64"), y=Tensor([4, 2, 3],"float64"), )
paddle.Tensor.outer(x=Tensor([1, 4],"float32"), y=Tensor([1, 4],"float32"), )
paddle.Tensor.outer(x=Tensor([4, 1],"float64"), y=Tensor([4, 1],"float64"), )
paddle.Tensor.outer(x=Tensor([1, 4],"float64"), y=Tensor([1, 4],"float64"), )
paddle.Tensor.quantile(Tensor([3, 3, 3],"float64"), q=0.5, axis=0, )
paddle.Tensor.rad2deg(x=Tensor([4, 4, 4, 4],"float64"), )
paddle.Tensor.rad2deg(x=Tensor([1],"float64"), )
paddle.Tensor.rad2deg(x=Tensor([4, 4],"float64"), )
paddle.Tensor.rad2deg(x=Tensor([10],"float32"), )
paddle.Tensor.rad2deg(x=Tensor([10],"int32"), )
paddle.Tensor.rad2deg(x=Tensor([10],"float64"), )
paddle.Tensor.rad2deg(x=Tensor([4, 4, 4],"float64"), )
paddle.Tensor.rad2deg(x=Tensor([10],"int64"), )
paddle.Tensor.real(Tensor([2, 20, 2, 3],"complex64"), )
paddle.Tensor.real(Tensor([2, 20, 2, 3],"complex128"), )
paddle.Tensor.real(Tensor([10, 10],"complex64"), )
paddle.Tensor.real(Tensor([10, 10],"complex128"), )
paddle.Tensor.real(Tensor([4, 4],"complex128"), )
paddle.Tensor.real(Tensor([],"complex128"), )
paddle.Tensor.real(Tensor([],"complex64"), )
paddle.Tensor.reciprocal(Tensor([10, 12],"float32"), )
paddle.Tensor.reciprocal(Tensor([10, 20, 1],"float32"), )
paddle.Tensor.reciprocal(Tensor([10, 20],"float32"), )
paddle.Tensor.reciprocal(Tensor([],"float32"), )
paddle.Tensor.reciprocal(Tensor([4],"float32"), )
paddle.Tensor.remainder(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.Tensor.repeat_interleave(Tensor([2, 3, 32],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 4, 5],"float64"), repeats=2, axis=1, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 10, 10],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 3, 32],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 10, 10],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 10, 10],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 3, 32],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 4, 5],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4, 4, 5],"int32"), repeats=2, axis=3, )
paddle.Tensor.repeat_interleave(Tensor([2, 3],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 5],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(Tensor([2, 10],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 1, 3],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 5],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 3, 16],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 5],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([64, 1],"float32"), 4, axis=1, )
paddle.Tensor.repeat_interleave(Tensor([2, 3, 16],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 3, 3],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 3, 16],"float32"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 10],"int64"), 1, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 3],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 1, 3],"float32"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 3],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 1, 3],"float32"), 1, axis=0, )
paddle.Tensor.repeat_interleave(x=Tensor([4],"float32"), repeats=3, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 3, 3],"int64"), 3, axis=0, )
paddle.Tensor.repeat_interleave(x=Tensor([4, 2, 4],"float64"), repeats=2, )
paddle.Tensor.repeat_interleave(x=Tensor([4],"float64"), repeats=3, )
paddle.Tensor.repeat_interleave(Tensor([2, 1, 3, 3],"int64"), 2, axis=0, )
paddle.Tensor.repeat_interleave(Tensor([2, 10],"int64"), 2, axis=0, )
paddle.Tensor.rot90(x=Tensor([4, 4, 4, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 4, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.Tensor.rot90(x=Tensor([4, 4, 4, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.Tensor.rot90(x=Tensor([4, 4, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 4],"float64"), k=4, )
paddle.Tensor.rot90(x=Tensor([4, 4],"float32"), )
paddle.Tensor.rot90(x=Tensor([2, 2],"float64"), k=-4, )
paddle.Tensor.rot90(x=Tensor([3, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 4],"float64"), )
paddle.Tensor.rot90(x=Tensor([4, 4],"int64"), )
paddle.Tensor.rot90(x=Tensor([4, 4],"float64"), k=-1, )
paddle.Tensor.rot90(Tensor([3, 2],"float32"), 1, axes=list[0,1,], )
paddle.Tensor.rot90(x=Tensor([4, 4],"int32"), )
paddle.Tensor.round(Tensor([10, 20, 1],"float32"), )
paddle.Tensor.round(Tensor([10, 20],"float32"), )
paddle.Tensor.round(Tensor([],"float32"), )
paddle.Tensor.rsqrt(Tensor([10, 20],"float32"), )
paddle.Tensor.rsqrt(Tensor([10, 20, 1],"float32"), )
paddle.Tensor.scale(Tensor([1, 16, 1, 30],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 24],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 28],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 31],"float32"), 24, )
paddle.Tensor.scale(Tensor([256],"float32"), 0.5, )
paddle.Tensor.scale(Tensor([1, 16, 1, 60],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 36],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 38],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 48],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 21],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 27],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 54],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 40],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 19],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 25],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 50],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 58],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 47],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 15],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 34],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 39],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 61],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 59],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 52],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 20],"float32"), 24, )
paddle.Tensor.scale(Tensor([10, 20, 1],"float32"), scale=2.0, bias=3.0, )
paddle.Tensor.scale(Tensor([1, 16, 1, 32],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 22],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 51],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 17],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 37],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 14],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 33],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 42],"float32"), 24, )
paddle.Tensor.scale(Tensor([384],"float32"), 0.5, )
paddle.Tensor.scale(Tensor([1, 16, 1, 43],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 23],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 53],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 16],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 35],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 55],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 62],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 57],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 44],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 56],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 18],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 49],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 26],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 29],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 46],"float32"), 24, )
paddle.Tensor.scale(Tensor([1, 16, 1, 45],"float32"), 24, )
paddle.Tensor.scale(Tensor([192],"float32"), 0.5, )
paddle.Tensor.scale(Tensor([1, 16, 1, 41],"float32"), 24, )
paddle.Tensor.scale(Tensor([10],"float32"), 0.5, )
paddle.Tensor.scale(Tensor([64],"float32"), 0.5, )
paddle.Tensor.set_(Tensor([20],"int32"), Tensor([15, 3],"int32"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"int16"), Tensor([15, 3],"int16"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"float64"), Tensor([15, 3],"float64"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"uint8"), Tensor([15, 3],"uint8"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"complex128"), Tensor([15, 3],"complex128"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"float32"), Tensor([15, 3],"float32"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"complex64"), Tensor([15, 3],"complex64"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"int8"), Tensor([15, 3],"int8"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"bool"), Tensor([15, 3],"bool"), list[20,], list[2,], 0, )
paddle.Tensor.set_(Tensor([20],"int64"), Tensor([15, 3],"int64"), list[20,], list[2,], 0, )
paddle.Tensor.sigmoid(Tensor([1, 18, 4],"float32"), )
paddle.Tensor.sigmoid(Tensor([1, 21, 4],"float32"), )
paddle.Tensor.sigmoid(Tensor([1, 22, 4],"float32"), )
paddle.Tensor.sigmoid(Tensor([1, 11, 4],"float32"), )
paddle.Tensor.sigmoid(Tensor([1, 9, 4],"float32"), )
paddle.Tensor.sign(Tensor([16, 32],"float32"), )
paddle.Tensor.sign(Tensor([37],"float32"), )
paddle.Tensor.sign(Tensor([2],"float64"), )
paddle.Tensor.sign(Tensor([],"float32"), )
paddle.Tensor.sign(Tensor([32],"float32"), )
paddle.Tensor.sign(Tensor([2, 2],"float64"), )
paddle.Tensor.sign(Tensor([4, 5],"float32"), )
paddle.Tensor.signbit(Tensor([12, 20, 2],"int64"), )
paddle.Tensor.signbit(Tensor([12, 20, 2],"float32"), )
paddle.Tensor.signbit(Tensor([12, 20, 2],"uint8"), )
paddle.Tensor.signbit(Tensor([12, 20, 2],"int8"), )
paddle.Tensor.signbit(Tensor([12, 20, 2],"float64"), )
paddle.Tensor.signbit(Tensor([12, 20, 2],"int32"), )
paddle.Tensor.signbit(Tensor([12, 20, 2],"int16"), )
paddle.Tensor.sin(Tensor([16, 8],"float32"), )
paddle.Tensor.sin(Tensor([58, 8],"float32"), )
paddle.Tensor.sin(Tensor([200, 4],"float32"), )
paddle.Tensor.sin(Tensor([1, 9, 64],"float32"), )
paddle.Tensor.sin(Tensor([11, 4],"float32"), )
paddle.Tensor.sin(Tensor([6],"float64"), )
paddle.Tensor.sin(Tensor([8],"float32"), )
paddle.Tensor.sin(Tensor([8, 4],"float32"), )
paddle.Tensor.sin(Tensor([10, 4],"float32"), )
paddle.Tensor.sin(Tensor([7, 8],"float32"), )
paddle.Tensor.sin(Tensor([42],"float32"), )
paddle.Tensor.sin(Tensor([6, 4],"float32"), )
paddle.Tensor.sin(Tensor([9, 4],"float32"), )
paddle.Tensor.sin(Tensor([10, 8],"float32"), )
paddle.Tensor.sin(Tensor([20, 3],"float32"), )
paddle.Tensor.sin(Tensor([7, 4],"float32"), )
paddle.Tensor.sin(Tensor([6],"float32"), )
paddle.Tensor.slice_scatter(Tensor([8, 6],"float64"), Tensor([8, 3],"float64"), list[1,], list[0,], list[6,], list[2,], )
paddle.Tensor.split(Tensor([1, 25, 4, 2],"float32"), 4, axis=2, )
paddle.Tensor.split(Tensor([168, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([203, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([217, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([54, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([243, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([300, 1],"float32"), list[1,], -1, )
paddle.Tensor.split(Tensor([200, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([108, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([101, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([52, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([57, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([10, 2, 16],"float32"), list[8,4,4,], axis=-1, )
paddle.Tensor.split(Tensor([1, 196, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([1, 200, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([77, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([5, 2, 16],"float32"), list[8,4,4,], axis=-1, )
paddle.Tensor.split(Tensor([88, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([96, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([98, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([166, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([64, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([134, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([98, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([160, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([85, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([69, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([211, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([163, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([156, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([27, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([115, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([96, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([13, 32, 2],"float32"), 2, axis=-1, )
paddle.Tensor.split(Tensor([40, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([102, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([29, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([101, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([226, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([222, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([99, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([2, 1, 2, 1, 32],"float32"), 2, )
paddle.Tensor.split(Tensor([58, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([132, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([83, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([31, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([174, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([35, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([162, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([220, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([1, 192, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([89, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([33, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([13, 13, 2],"float32"), 2, axis=-1, )
paddle.Tensor.split(Tensor([71, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([5, 4, 16],"float32"), list[8,4,4,], axis=-1, )
paddle.Tensor.split(Tensor([110, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([100, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([124, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([74, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([80, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([73, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([13, 7, 2],"float32"), 2, axis=-1, )
paddle.Tensor.split(Tensor([59, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([133, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([183, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([82, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([184, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([300, 2],"float32"), list[1,1,], -1, )
paddle.Tensor.split(Tensor([34, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([94, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([107, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([100, 4],"float32"), list[1,1,1,1,], -1, )
paddle.Tensor.split(Tensor([68, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([118, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([126, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([51, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([155, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([5, 6, 16],"float32"), list[8,4,4,], axis=-1, )
paddle.Tensor.split(Tensor([48, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([128, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([78, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([1, 2, 16],"float32"), list[8,4,4,], axis=-1, )
paddle.Tensor.split(Tensor([23, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([9, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([22, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([18, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([7, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([5],"float64"), list[1,1,2,1,], )
paddle.Tensor.split(Tensor([12],"float32"), list[2,3,7,], )
paddle.Tensor.split(Tensor([1, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([16],"float64"), list[3,4,9,], )
paddle.Tensor.split(Tensor([21, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([8, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([1, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([2, 2, 1, 2, 8],"float32"), 2, )
paddle.Tensor.split(Tensor([1, 1, 64],"float32"), list[32,16,16,], axis=-1, )
paddle.Tensor.split(Tensor([5, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([4, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([16, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([1, 22, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([1, 21, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([2, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([11, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([1, 18, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([1, 6, 16],"float32"), list[8,4,4,], axis=-1, )
paddle.Tensor.split(Tensor([1, 9, 4],"float32"), 4, -1, )
paddle.Tensor.split(Tensor([17, 4],"float32"), 4, axis=-1, )
paddle.Tensor.split(Tensor([1, 4, 16],"float32"), list[8,4,4,], axis=-1, )
paddle.Tensor.sqrt(Tensor([10, 10],"float32"), )
paddle.Tensor.sqrt(Tensor([144],"float32"), )
paddle.Tensor.sqrt(Tensor([480],"float32"), )
paddle.Tensor.sqrt(Tensor([10, 20],"float32"), )
paddle.Tensor.sqrt(Tensor([1, 11, 8, 8],"float32"), )
paddle.Tensor.sqrt(Tensor([192],"float32"), )
paddle.Tensor.sqrt(Tensor([2, 4, 10, 10],"float32"), )
paddle.Tensor.sqrt(Tensor([120],"float32"), )
paddle.Tensor.sqrt(Tensor([384],"float32"), )
paddle.Tensor.sqrt(Tensor([4, 4, 7, 7],"float32"), )
paddle.Tensor.sqrt(Tensor([240],"float32"), )
paddle.Tensor.sqrt(Tensor([288],"float32"), )
paddle.Tensor.sqrt(Tensor([512],"float32"), )
paddle.Tensor.sqrt(Tensor([10, 20, 1],"float32"), )
paddle.Tensor.sqrt(Tensor([1, 11, 7, 7],"float32"), )
paddle.Tensor.sqrt(Tensor([4, 4, 6, 6],"float32"), )
paddle.Tensor.sqrt(Tensor([1, 11, 9, 9],"float32"), )
paddle.Tensor.sqrt(Tensor([256],"float32"), )
paddle.Tensor.sqrt(Tensor([48],"float32"), )
paddle.Tensor.sqrt(Tensor([6],"float32"), )
paddle.Tensor.sqrt(Tensor([24],"float32"), )
paddle.Tensor.sqrt(Tensor([2],"float32"), )
paddle.Tensor.sqrt(Tensor([60],"float32"), )
paddle.Tensor.sqrt(Tensor([96],"float32"), )
paddle.Tensor.sqrt(Tensor([1, 2],"float32"), )
paddle.Tensor.sqrt(Tensor([1],"float32"), )
paddle.Tensor.sqrt(Tensor([],"float32"), )
paddle.Tensor.sqrt(Tensor([1, 1, 2],"float32"), )
paddle.Tensor.sqrt(Tensor([2, 2],"float32"), )
paddle.Tensor.sqrt(Tensor([72],"float32"), )
paddle.Tensor.sqrt(Tensor([36],"float32"), )
paddle.Tensor.sqrt(Tensor([42],"float32"), )
paddle.Tensor.square(Tensor([10, 20, 1],"float32"), )
paddle.Tensor.square(Tensor([2, 128],"float32"), )
paddle.Tensor.square(Tensor([4],"float32"), )
paddle.Tensor.square(Tensor([20],"float32"), )
paddle.Tensor.square(Tensor([6],"float32"), )
paddle.Tensor.square(Tensor([10],"float32"), )
paddle.Tensor.square(Tensor([30],"float32"), )
paddle.Tensor.square(Tensor([2],"float32"), )
paddle.Tensor.std(Tensor([1, 12, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 8, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([2, 13, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([2, 10, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([4, 3, 27],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([2, 9, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([8, 2, 27],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([4, 1, 27],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 16, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([8, 1, 27],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([4, 3, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([4, 6, 27],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([4, 5, 27],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 11, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([8, 2, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([2, 4, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 4, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 6, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([2, 6, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([2, 11, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([2, 2, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([8, 3, 27],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([2, 7, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 9, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([4, 2, 27],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([4, 7, 27],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 5, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([2, 3, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 10, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([4, 4, 27],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([8, 4, 27],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([8, 3, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 3, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([8, 1, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([2, 5, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 13, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 14, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([4, 1, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 7, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([4, 2, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([4, 5, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([2, 8, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([2, 12, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 2, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 1, 45],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 1, 54],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([2, 1, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.std(Tensor([1, 1, 36],"float32"), axis=-1, keepdim=True, )
paddle.Tensor.subtract(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.Tensor.subtract(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.Tensor.subtract(Tensor([2],"float32"), Tensor([2],"float32"), )
paddle.Tensor.subtract(Tensor([42],"float32"), Tensor([42],"float32"), )
paddle.Tensor.tanh(Tensor([],"float32"), )
paddle.Tensor.tanh(Tensor([2, 2],"float32"), )
paddle.Tensor.tanh(Tensor([2, 3],"float32"), )
paddle.Tensor.tanh(Tensor([2, 4],"float64"), )
paddle.Tensor.tanh(Tensor([3],"float64"), )
paddle.Tensor.tanh(Tensor([4],"float64"), )
paddle.Tensor.tanh(Tensor([1, 2, 3],"float64"), )
paddle.Tensor.tanh(Tensor([3],"float32"), )
paddle.Tensor.tanh(Tensor([1, 2, 3],"float32"), )
paddle.Tensor.tanh(Tensor([2, 3],"float64"), )
paddle.Tensor.tolist(Tensor([15],"int64"), )
paddle.Tensor.tolist(Tensor([23],"int64"), )
paddle.Tensor.tolist(Tensor([3],"int32"), )
paddle.Tensor.tolist(Tensor([3],"int64"), )
paddle.Tensor.tolist(Tensor([4],"int64"), )
paddle.Tensor.tolist(Tensor([16],"int64"), )
paddle.Tensor.tolist(Tensor([13],"int64"), )
paddle.Tensor.tolist(Tensor([2, 3],"int64"), )
paddle.Tensor.tolist(Tensor([],"float32"), )
paddle.Tensor.tolist(Tensor([5],"int32"), )
paddle.Tensor.tolist(Tensor([2, 5],"float32"), )
paddle.Tensor.tolist(Tensor([1, 8, 7],"int64"), )
paddle.Tensor.tolist(Tensor([6],"int32"), )
paddle.Tensor.tolist(Tensor([6, 4],"int64"), )
paddle.Tensor.tolist(Tensor([8],"int64"), )
paddle.Tensor.tolist(Tensor([24],"int64"), )
paddle.Tensor.tolist(Tensor([1, 2, 14],"int64"), )
paddle.Tensor.tolist(Tensor([2, 4],"int64"), )
paddle.Tensor.tolist(Tensor([9],"float64"), )
paddle.Tensor.tolist(Tensor([3],"float32"), )
paddle.Tensor.tolist(Tensor([6],"int64"), )
paddle.Tensor.tolist(Tensor([12],"int64"), )
paddle.Tensor.tolist(Tensor([25],"int64"), )
paddle.Tensor.tolist(Tensor([1],"int32"), )
paddle.Tensor.tolist(Tensor([7],"int32"), )
paddle.Tensor.tolist(Tensor([4],"float32"), )
paddle.Tensor.tolist(Tensor([2],"bool"), )
paddle.Tensor.tolist(Tensor([2],"float64"), )
paddle.Tensor.tolist(Tensor([0],"int64"), )
paddle.Tensor.tolist(Tensor([5],"float32"), )
paddle.Tensor.tolist(Tensor([11],"int64"), )
paddle.Tensor.tolist(Tensor([2],"int64"), )
paddle.Tensor.tolist(Tensor([2, 9],"int64"), )
paddle.Tensor.tolist(Tensor([7],"int64"), )
paddle.Tensor.tolist(Tensor([2, 2],"int64"), )
paddle.Tensor.tolist(Tensor([10],"int64"), )
paddle.Tensor.tolist(Tensor([6, 3],"int64"), )
paddle.Tensor.tolist(Tensor([4, 10],"int64"), )
paddle.Tensor.tolist(Tensor([2, 3],"bool"), )
paddle.Tensor.tolist(Tensor([14],"int64"), )
paddle.Tensor.tolist(Tensor([4, 4],"int64"), )
paddle.Tensor.tolist(Tensor([5],"int64"), )
paddle.Tensor.tolist(Tensor([8],"int32"), )
paddle.Tensor.tolist(Tensor([20],"int64"), )
paddle.Tensor.tolist(Tensor([2, 21],"int64"), )
paddle.Tensor.tolist(Tensor([10],"bool"), )
paddle.Tensor.tolist(Tensor([22],"int64"), )
paddle.Tensor.tolist(Tensor([4, 3],"int64"), )
paddle.Tensor.tolist(Tensor([1],"int64"), )
paddle.Tensor.tolist(Tensor([],"int32"), )
paddle.Tensor.tolist(Tensor([12],"float32"), )
paddle.Tensor.tolist(Tensor([21],"int64"), )
paddle.Tensor.tolist(Tensor([2, 16],"int64"), )
paddle.Tensor.tolist(Tensor([9],"int64"), )
paddle.Tensor.tolist(Tensor([2, 8],"int64"), )
paddle.Tensor.tolist(Tensor([30],"int64"), )
paddle.Tensor.tolist(Tensor([2],"int32"), )
paddle.Tensor.tolist(Tensor([4],"float64"), )
paddle.Tensor.tolist(Tensor([2, 2],"float32"), )
paddle.Tensor.tolist(Tensor([2, 10],"int64"), )
paddle.Tensor.tolist(Tensor([8],"float32"), )
paddle.Tensor.tolist(Tensor([4],"int32"), )
paddle.Tensor.tolist(Tensor([1],"float64"), )
paddle.Tensor.tolist(Tensor([2, 5],"int64"), )
paddle.Tensor.tolist(Tensor([3],"float64"), )
paddle.Tensor.tolist(Tensor([18],"int64"), )
paddle.Tensor.tolist(Tensor([2, 2, 14],"int64"), )
paddle.Tensor.tolist(Tensor([7],"float32"), )
paddle.Tensor.tolist(Tensor([17],"int64"), )
paddle.Tensor.tolist(Tensor([2, 5],"bool"), )
paddle.Tensor.tolist(Tensor([2],"float32"), )
paddle.Tensor.tolist(Tensor([19],"int64"), )
paddle.Tensor.tolist(Tensor([0],"int32"), )
paddle.Tensor.tolist(Tensor([28],"int64"), )
paddle.Tensor.tril(Tensor([2, 2],"float32"), -1, )
paddle.Tensor.tril(Tensor([1, 2, 2],"float32"), -1, )
paddle.Tensor.tril(Tensor([2, 2, 2],"float32"), -1, )
paddle.Tensor.trunc(Tensor([2, 8, 8],"float32"), )
paddle.Tensor.trunc(Tensor([28, 28],"float32"), )
paddle.Tensor.trunc(Tensor([8, 8],"float32"), )
paddle.Tensor.unbind(Tensor([2, 3, 8, 8],"float32"), axis=-3, )
paddle.Tensor.unbind(Tensor([3, 8, 8],"float32"), axis=-3, )
paddle.Tensor.unbind(Tensor([3, 2, 3],"float32"), -2, )
paddle.Tensor.unique(Tensor([18],"int64"), )
paddle.Tensor.unique(Tensor([9],"int64"), )
paddle.Tensor.zero_(Tensor([257],"float32"), )
paddle.Tensor.zero_(Tensor([256],"float32"), )
paddle.Tensor.zero_(Tensor([1, 384],"int64"), )
paddle.Tensor.zero_(Tensor([1, 384],"float32"), )
paddle.Tensor.zero_(Tensor([320],"float32"), )
paddle.Tensor.zero_(Tensor([896],"float32"), )
paddle.Tensor.zero_(x=Tensor([16, 16],"float64"), )
paddle.Tensor.zero_(Tensor([128],"float32"), )
paddle.Tensor.zero_(Tensor([],"float32"), )
paddle.Tensor.zero_(x=Tensor([4, 4],"int32"), )
paddle.Tensor.zero_(Tensor([37],"float16"), )
paddle.Tensor.zero_(Tensor([1],"int32"), )
paddle.Tensor.zero_(Tensor([1],"float16"), )
paddle.Tensor.zero_(Tensor([2],"float32"), )
paddle.Tensor.zero_(Tensor([4],"float32"), )
paddle.Tensor.zero_(x=Tensor([4, 4],"float32"), )
paddle.Tensor.zero_(Tensor([32],"float32"), )
paddle.Tensor.zero_(Tensor([2],"float16"), )
paddle.Tensor.zero_(x=Tensor([16],"float64"), )
paddle.Tensor.zero_(Tensor([1],"float32"), )
paddle.Tensor.zero_(Tensor([1, 64],"float32"), )
paddle.Tensor.zero_(Tensor([80],"float32"), )
paddle.Tensor.zero_(x=Tensor([4, 4],"int64"), )
paddle.Tensor.zero_(Tensor([32],"float16"), )
paddle.Tensor.zero_(Tensor([1],"float32"), )
paddle.Tensor.zero_(x=Tensor([4, 4],"float64"), )
paddle.Tensor.zero_(Tensor([64],"float32"), )
paddle.Tensor.zero_(Tensor([37],"float32"), )
paddle.acos(Tensor([10, 20, 1],"float32"), )
paddle.acos(Tensor([10, 10],"float32"), )
paddle.acos(Tensor([2, 4],"float64"), )
paddle.acos(Tensor([],"float32"), )
paddle.acos(x=Tensor([3, 3, 3],"float64"), )
paddle.acos(x=Tensor([3, 3, 3],"float32"), )
paddle.acosh(Tensor([10, 20, 1],"float32"), )
paddle.acosh(Tensor([],"float32"), )
paddle.add(Tensor([168],"int64"), Tensor([168],"int64"), )
paddle.add(Tensor([8, 8],"float32"), Tensor([8, 8],"float32"), )
paddle.add(Tensor([1, 2, 8, 8],"float32"), Tensor([1, 2, 8, 8],"float32"), )
paddle.add(Tensor([100, 1],"float64"), Tensor([100, 1],"float64"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1, 2, 2],"float32"), Tensor([100, 1, 2, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1],"float32"), Tensor([100, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([2, 3, 4, 5],"complex128"), Tensor([2, 3, 4, 5],"complex128"), )
paddle.add(Tensor([100, 2, 1],"float32"), Tensor([100, 2, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([4, 3, 10],"float64"), Tensor([10],"float64"), )
paddle.add(Tensor([3, 1],"int64"), Tensor([3, 40],"int64"), )
paddle.add(Tensor([100],"float32"), Tensor([],"float32"), name="Uniform_sample", )
paddle.add(Tensor([200, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.add(Tensor([4, 3, 1, 10],"float32"), Tensor([10],"float32"), )
paddle.add(Tensor([100],"float32"), Tensor([100],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([6, 3, 1, 32],"float32"), Tensor([32],"float32"), )
paddle.add(Tensor([50, 3],"int64"), Tensor([50, 3],"int64"), )
paddle.add(Tensor([4, 3, 10],"float32"), Tensor([10],"float32"), )
paddle.add(Tensor([7, 5, 6],"float64"), Tensor([5, 6],"float64"), name="Uniform_sample", )
paddle.add(Tensor([10, 12],"float64"), Tensor([10, 12],"float64"), )
paddle.add(Tensor([4, 40],"float32"), Tensor([40],"float32"), )
paddle.add(Tensor([8, 32],"float32"), Tensor([32],"float32"), )
paddle.add(Tensor([2, 8, 8],"float32"), Tensor([2, 8, 8],"float32"), )
paddle.add(Tensor([25, 25],"float64"), Tensor([],"float64"), )
paddle.add(Tensor([2, 3, 4, 5],"complex64"), Tensor([2, 3, 4, 5],"complex64"), )
paddle.add(Tensor([4, 1, 128],"float32"), Tensor([128],"float32"), )
paddle.add(Tensor([7, 5, 6],"float32"), Tensor([5, 6],"float32"), name="Uniform_sample", )
paddle.add(Tensor([256, 1],"float32"), Tensor([],"float32"), )
paddle.add(Tensor([100, 1],"float32"), Tensor([100, 1],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([4, 4, 32],"float32"), Tensor([4, 4, 1],"float32"), )
paddle.add(Tensor([2, 3, 4, 5],"float32"), Tensor([5],"complex64"), )
paddle.add(Tensor([30, 1],"int64"), Tensor([30, 3],"int64"), )
paddle.add(Tensor([16, 1, 25, 1],"float32"), Tensor([1],"float32"), name="Normal_sample", )
paddle.add(Tensor([1, 4, 8, 8],"float32"), Tensor([1, 4, 8, 8],"float32"), )
paddle.add(Tensor([100, 1, 2, 2],"float32"), Tensor([100, 1, 2, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([2, 3, 4, 5],"float64"), Tensor([5],"complex128"), )
paddle.add(Tensor([100],"float32"), Tensor([100],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 1],"float64"), Tensor([100, 1],"float64"), name="Cauchy_rsample", )
paddle.add(Tensor([10, 12],"float32"), Tensor([10, 12],"float32"), )
paddle.add(Tensor([100, 1, 2],"float32"), Tensor([100, 1, 2],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([2, 3, 4, 5],"complex128"), Tensor([4, 5],"float64"), )
paddle.add(Tensor([2, 1, 128],"float32"), Tensor([128],"float32"), )
paddle.add(Tensor([100, 2, 1],"float32"), Tensor([100, 2, 1],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([100, 2],"float32"), Tensor([100, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([30, 30],"float64"), Tensor([],"float64"), )
paddle.add(Tensor([2, 3, 4, 5],"complex64"), Tensor([4, 5],"float32"), )
paddle.add(Tensor([100, 1, 2],"float32"), Tensor([100, 1, 2],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([5, 10, 8],"float32"), Tensor([],"float32"), name="Normal_sample", )
paddle.add(Tensor([100, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.add(Tensor([4, 4, 16],"float32"), Tensor([4, 4, 1],"float32"), )
paddle.add(Tensor([20, 20],"float64"), Tensor([],"float64"), )
paddle.add(Tensor([2, 1, 8, 8],"float32"), Tensor([2, 1, 8, 8],"float32"), )
paddle.add(Tensor([100, 2],"float32"), Tensor([100, 2],"float32"), name="Cauchy_sample", )
paddle.add(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 1, 3],"float64"), )
paddle.add(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int8"), )
paddle.add(Tensor([],"float32"), Tensor([],"float32"), )
paddle.add(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.add(Tensor([1, 8, 4],"float32"), Tensor([8, 4],"float32"), )
paddle.add(Tensor([2, 3, 3, 4],"float32"), Tensor([2, 3, 1, 1],"float32"), )
paddle.add(Tensor([],"float32"), Tensor([],"float32"), name="Uniform_sample", )
paddle.add(Tensor([],"float64"), Tensor([],"float64"), )
paddle.add(x=Tensor([3, 3, 3],"float64"), y=Tensor([1, 3, 3],"float64"), )
paddle.add(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([],"int64"), Tensor([],"int64"), )
paddle.add(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"bool"), )
paddle.add(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), name="Normal_entropy", )
paddle.add(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.add(Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.add(Tensor([25, 1],"float64"), Tensor([],"float64"), )
paddle.add(Tensor([],"float32"), Tensor([],"float32"), name="Cauchy_rsample", )
paddle.add(Tensor([4, 3, 2],"uint8"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([2, 3, 3, 4],"float32"), Tensor([3, 1, 4],"float32"), )
paddle.add(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float16"), )
paddle.add(Tensor([],"float32"), Tensor([],"float32"), name=None, )
paddle.add(Tensor([2, 2],"complex64"), Tensor([1, 2],"complex64"), )
paddle.add(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), name="Normal_entropy", )
paddle.add(Tensor([7, 2, 3],"complex64"), Tensor([],"complex64"), name="Normal_sample", )
paddle.add(x=Tensor([3, 3, 3],"int64"), y=Tensor([3, 3, 3],"int64"), )
paddle.add(Tensor([4, 5, 2],"float32"), Tensor([4, 5, 2],"float32"), )
paddle.add(Tensor([7, 2, 3],"float32"), Tensor([2, 3],"float32"), name="Normal_sample", )
paddle.add(Tensor([7],"float32"), Tensor([],"float32"), name="Normal_sample", )
paddle.add(Tensor([32],"float32"), Tensor([32],"float32"), )
paddle.add(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.add(Tensor([7, 2, 3],"complex128"), Tensor([2, 3],"complex128"), name="Normal_sample", )
paddle.add(Tensor([2],"float64"), Tensor([2],"float64"), name="Normal_kl_divergence", )
paddle.add(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.add(Tensor([],"float64"), Tensor([],"float64"), name="Cauchy_entropy", )
paddle.add(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([2, 3, 3, 4],"float32"), Tensor([3, 1, 1],"float32"), )
paddle.add(Tensor([2, 3, 1, 10],"float32"), Tensor([10],"float32"), )
paddle.add(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"complex128"), )
paddle.add(Tensor([1, 64],"float32"), Tensor([],"float32"), )
paddle.add(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"bfloat16"), )
paddle.add(Tensor([4, 3],"float32"), Tensor([3],"float32"), )
paddle.add(Tensor([30, 1],"float64"), Tensor([],"float64"), )
paddle.add(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.add(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 3],"float64"), )
paddle.add(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([],"float32"), Tensor([],"float32"), name="Cauchy_sample", )
paddle.add(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"uint8"), )
paddle.add(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.add(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.add(Tensor([1],"float32"), Tensor([1],"float32"), name="Cauchy_entropy", )
paddle.add(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.add(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int64"), )
paddle.add(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int32"), )
paddle.add(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int16"), )
paddle.add(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 1],"float64"), )
paddle.add(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float16"), )
paddle.add(Tensor([4, 5, 2],"float64"), Tensor([4, 5, 2],"float64"), )
paddle.add(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int8"), )
paddle.add(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int16"), )
paddle.add(x=Tensor([2, 24],"float32"), y=Tensor([2, 24],"float32"), )
paddle.add(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"bool"), )
paddle.add(x=Tensor([3, 3, 3],"float32"), y=Tensor([3, 3, 3],"float32"), )
paddle.add(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float32"), )
paddle.add(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.add(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float64"), )
paddle.add(x=Tensor([3, 3, 3],"int32"), y=Tensor([3, 3, 3],"int32"), )
paddle.add(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float32"), )
paddle.add(Tensor([3],"float32"), Tensor([],"float32"), )
paddle.add(Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.add(Tensor([1],"int64"), Tensor([],"int64"), )
paddle.add(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex128"), )
paddle.add(Tensor([],"float32"), Tensor([],"float32"), name="Cauchy_entropy", )
paddle.add(Tensor([16, 2, 3, 1],"float32"), Tensor([1],"float32"), name="Normal_sample", )
paddle.add(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.add(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex128"), )
paddle.add(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"bfloat16"), )
paddle.add(Tensor([20, 1],"float64"), Tensor([],"float64"), )
paddle.add(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int32"), )
paddle.add(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"uint8"), )
paddle.add(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"complex128"), )
paddle.add(Tensor([2, 2],"complex128"), Tensor([1, 2],"complex128"), )
paddle.add(Tensor([],"float32"), Tensor([],"float32"), name="Normal_sample", )
paddle.add(Tensor([2, 30],"float64"), Tensor([],"float64"), )
paddle.add(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.add(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex64"), )
paddle.add(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"bfloat16"), )
paddle.add(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.add(Tensor([2, 20],"float64"), Tensor([],"float64"), )
paddle.add(Tensor([7],"complex64"), Tensor([],"complex64"), name="Normal_sample", )
paddle.add(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float64"), )
paddle.add(Tensor([1],"float32"), Tensor([],"float32"), )
paddle.add(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int64"), )
paddle.add(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex128"), )
paddle.add(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex128"), )
paddle.add(Tensor([3],"float32"), Tensor([3],"float32"), )
paddle.add(Tensor([2, 25],"float64"), Tensor([],"float64"), )
paddle.add(Tensor([3, 3],"float64"), Tensor([3, 3],"float64"), name="Normal_entropy", )
paddle.add(Tensor([7, 2, 3],"float64"), Tensor([2, 3],"float64"), name="Normal_sample", )
paddle.add(Tensor([2, 3, 3, 4],"float32"), Tensor([2, 3, 1, 4],"float32"), )
paddle.add(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), name="Normal_kl_divergence", )
paddle.add(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex128"), )
paddle.add(Tensor([7],"float32"), Tensor([],"float32"), name="Uniform_sample", )
paddle.add(Tensor([1, 3],"int64"), Tensor([3, 3],"int64"), )
paddle.add_n(list[Tensor([100, 1],"float32"),Tensor([100, 1],"float32"),], )
paddle.add_n(Tensor([2, 13, 11],"float32"), )
paddle.add_n(inputs=Tensor([4, 4, 4, 4],"float64"), )
paddle.add_n(list[Tensor([3, 40],"float64"),Tensor([3, 40],"float64"),Tensor([3, 40],"float64"),], )
paddle.add_n(list[Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),], )
paddle.add_n(inputs=Tensor([10],"int64"), )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(Tensor([],"float32"), )
paddle.add_n(list[Tensor([3],"float32"),Tensor([3],"float32"),], )
paddle.add_n(list[Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([],"float32"),], )
paddle.add_n(list[Tensor([],"float16"),], )
paddle.add_n(list[Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),Tensor([2],"float32"),], )
paddle.add_n(list[Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),], )
paddle.add_n(list[Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(inputs=Tensor([4, 4, 4],"float64"), )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([],"complex64"),Tensor([],"complex64"),], )
paddle.add_n(list[Tensor([],"float64"),Tensor([],"float64"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([3],"complex128"),Tensor([3],"complex128"),], )
paddle.add_n(list[Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),], )
paddle.add_n(list[Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),], )
paddle.add_n(list[Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),], )
paddle.add_n(list[Tensor([],"float64"),Tensor([],"float64"),Tensor([],"float64"),], )
paddle.add_n(list[Tensor([],"float32"),Tensor([],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], )
paddle.add_n(list[Tensor([],"float32"),], )
paddle.add_n(list[Tensor([],"float16"),Tensor([],"float16"),], )
paddle.add_n(list[Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),], )
paddle.add_n(list[Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),], )
paddle.add_n(inputs=Tensor([4, 4],"float64"), )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(inputs=Tensor([10],"float32"), )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(inputs=Tensor([10],"float64"), )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([3],"complex64"),Tensor([3],"complex64"),], )
paddle.add_n(list[Tensor([],"complex128"),Tensor([],"complex128"),], )
paddle.add_n(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.add_n(list[Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),Tensor([],"float16"),], )
paddle.add_n(list[Tensor([4, 4],"float64"),Tensor([4, 4],"float64"),], )
paddle.add_n(list[Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),], )
paddle.addmm(Tensor([10, 10],"float32"), x=Tensor([10, 10],"float32"), y=Tensor([10, 10],"float32"), )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0.5, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0, alpha=-3.3, )
paddle.addmm(input=Tensor([2, 2],"float64"), x=Tensor([2, 2],"float64"), y=Tensor([2, 2],"float64"), beta=0.5, alpha=5.0, )
paddle.addmm(input=Tensor([5, 1],"float64"), x=Tensor([5, 4],"float64"), y=Tensor([4, 5],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0, alpha=0, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=-0.7, alpha=-3.3, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0.5, alpha=0, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), )
paddle.addmm(input=Tensor([1, 1],"float64"), x=Tensor([5, 4],"float64"), y=Tensor([4, 5],"float64"), beta=-3.3, alpha=3.3, )
paddle.addmm(input=Tensor([2, 2],"float32"), x=Tensor([2, 2],"float32"), y=Tensor([2, 2],"float32"), beta=0.5, alpha=5.0, )
paddle.addmm(input=Tensor([5, 5],"float64"), x=Tensor([5, 3],"float64"), y=Tensor([3, 5],"float64"), beta=0.5, alpha=5.0, )
paddle.all(Tensor([12, 10],"bool"), )
paddle.all(Tensor([12, 10],"float64"), )
paddle.all(Tensor([448],"bool"), )
paddle.all(Tensor([5, 6, 10],"bool"), None, False, None, )
paddle.all(x=Tensor([10, 10],"bool"), )
paddle.all(Tensor([3, 40],"bool"), )
paddle.all(Tensor([12, 10],"bool"), axis=0, )
paddle.all(Tensor([12, 10],"int64"), )
paddle.all(Tensor([5, 6, 10],"int64"), None, False, None, )
paddle.all(Tensor([12, 10],"bool"), axis=1, keepdim=True, )
paddle.all(Tensor([13, 9],"bool"), )
paddle.all(Tensor([12, 10],"bool"), axis=-1, )
paddle.all(Tensor([5, 6, 10],"float64"), None, False, None, )
paddle.all(Tensor([2, 3, 4, 5],"bool"), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=-1, keepdim=True, )
paddle.all(Tensor([5],"bool"), axis=0, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(0,1,), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=0, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=None, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(0,2,), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(-1,-2,), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=-2, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=tuple(), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"int32"), axis=-1, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=tuple(1,2,), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=1, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(-1,-2,), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=2, keepdim=True, )
paddle.all(Tensor([2, 2],"bool"), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=-1, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"int32"), axis=1, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(-1,-2,), keepdim=False, )
paddle.all(Tensor([16],"bool"), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(0,2,), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"int32"), axis=1, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=1, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=-2, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=None, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=0, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(0,2,), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=tuple(0,1,), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"int32"), axis=2, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(1,2,), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=-2, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=-2, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=tuple(-1,-2,), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"int32"), axis=-2, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(1,2,), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=2, keepdim=False, )
paddle.all(Tensor([],"bool"), axis=None, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=2, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=-2, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=-1, keepdim=False, )
paddle.all(Tensor([],"bool"), axis=0, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=2, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=2, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(0,1,), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=None, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.all(Tensor([4, 8],"bool"), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=None, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=tuple(), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=0, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(0,1,), keepdim=False, )
paddle.all(Tensor([64],"bool"), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(-1,-2,), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(1,2,), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=2, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=-1, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=None, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=0, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=0, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=tuple(-1,-2,), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=1, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(0,2,), keepdim=False, )
paddle.all(x=Tensor([2, 4, 4, 2],"bool"), axis=tuple(0,1,), )
paddle.all(Tensor([3, 5],"bool"), axis=None, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(-1,-2,), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=-1, keepdim=True, )
paddle.all(Tensor([2],"bool"), axis=-1, )
paddle.all(Tensor([2],"bool"), )
paddle.all(Tensor([1, 0, 2],"bool"), axis=tuple(0,2,), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=tuple(0,1,), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"int32"), axis=2, keepdim=True, )
paddle.all(Tensor([4, 4],"bool"), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(1,2,), keepdim=False, )
paddle.all(Tensor([32],"bool"), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=0, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=-2, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(0,2,), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"int32"), axis=0, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=None, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(-1,-2,), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=-2, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=None, keepdim=True, )
paddle.all(Tensor([2, 1],"bool"), )
paddle.all(x=Tensor([10],"bool"), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=-1, keepdim=False, )
paddle.all(Tensor([8, 4],"bool"), )
paddle.all(x=Tensor([2, 4, 4, 2],"bool"), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(), keepdim=True, )
paddle.all(x=Tensor([3, 4, 2],"bool"), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(0,2,), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=None, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(0,1,), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(0,1,), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"int32"), axis=None, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=1, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=tuple(1,2,), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=1, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=0, keepdim=True, )
paddle.all(Tensor([],"bool"), axis=list[], )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=-1, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=-1, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=0, keepdim=False, )
paddle.all(Tensor([8],"bool"), )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(0,2,), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=-2, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(0,1,), keepdim=True, )
paddle.all(Tensor([1],"bool"), )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(), keepdim=False, )
paddle.all(Tensor([],"bool"), axis=-1, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=1, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=1, keepdim=False, )
paddle.all(Tensor([],"bool"), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=0, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=-2, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(-1,-2,), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=None, keepdim=False, )
paddle.all(Tensor([4],"bool"), )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(0,1,), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=1, keepdim=False, )
paddle.all(Tensor([3, 5],"bool"), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(1,2,), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"int32"), axis=None, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=1, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=-1, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(-1,-2,), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(0,2,), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=-1, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=-1, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=2, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(1,2,), keepdim=True, )
paddle.all(Tensor([1, 5],"bool"), )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(0,2,), keepdim=False, )
paddle.all(Tensor([5],"bool"), )
paddle.all(x=Tensor([2, 4, 4, 2],"bool"), axis=1, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(1,2,), keepdim=True, )
paddle.all(Tensor([10],"bool"), )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=2, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=-2, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=None, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(0,1,), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"int32"), axis=-2, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=2, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex128"), axis=tuple(0,1,), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=0, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(1,2,), keepdim=False, )
paddle.all(x=Tensor([2, 4],"bool"), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=0, keepdim=False, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=2, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(-1,-2,), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"int32"), axis=tuple(0,2,), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"float64"), axis=tuple(-1,-2,), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=tuple(), keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"complex64"), axis=1, keepdim=True, )
paddle.all(Tensor([1, 0, 2],"float32"), axis=tuple(1,2,), keepdim=False, )
paddle.all(Tensor([1, 0, 2],"bool"), axis=tuple(0,2,), keepdim=True, )
paddle.allclose(Tensor([13, 7],"float32"), Tensor([13, 7],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([16, 16],"float32"), Tensor([16, 16],"float32"), )
paddle.allclose(Tensor([4, 15],"float32"), Tensor([4, 15],"float32"), atol=0.001, )
paddle.allclose(Tensor([14, 7, 2],"float32"), Tensor([14, 7, 2],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 13],"float32"), Tensor([13, 13],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([1, 5, 32],"float32"), Tensor([1, 5, 32],"float32"), atol=1e-05, )
paddle.allclose(Tensor([13, 4],"float32"), Tensor([13, 4],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 32],"float32"), Tensor([13, 32],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([8, 8],"float32"), Tensor([8, 8],"float32"), )
paddle.allclose(Tensor([2, 4, 8],"float32"), Tensor([2, 4, 8],"float32"), )
paddle.allclose(Tensor([64],"float32"), Tensor([64],"float32"), atol=1e-05, rtol=1e-05, )
paddle.allclose(Tensor([2, 3, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), )
paddle.allclose(Tensor([13, 7, 3],"float32"), Tensor([13, 7, 3],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([2, 4, 16],"float32"), Tensor([2, 4, 16],"float32"), )
paddle.allclose(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), rtol=1e-05, atol=1e-08, )
paddle.allclose(Tensor([16, 8],"float32"), Tensor([16, 8],"float32"), )
paddle.allclose(Tensor([4],"float32"), Tensor([4],"float32"), atol=0.001, )
paddle.allclose(Tensor([14, 2],"float32"), Tensor([14, 2],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([14],"float32"), Tensor([14],"float32"), atol=0.5, )
paddle.allclose(Tensor([8],"float32"), Tensor([8],"float32"), )
paddle.allclose(Tensor([32],"float32"), Tensor([32],"float32"), )
paddle.allclose(Tensor([30],"float32"), Tensor([30],"float32"), atol=1e-06, rtol=1e-06, )
paddle.allclose(Tensor([14, 3],"float32"), Tensor([14, 3],"float32"), atol=0.001, )
paddle.allclose(Tensor([2, 8],"float32"), Tensor([2, 8],"float32"), atol=1e-06, )
paddle.allclose(Tensor([13],"float32"), Tensor([13],"float32"), atol=0.001, )
paddle.allclose(Tensor([2],"float32"), Tensor([2],"float32"), rtol=1e-05, atol=1e-08, equal_nan=False, name="test_1", )
paddle.allclose(Tensor([1],"int64"), Tensor([1],"int64"), 50., 49., False, )
paddle.allclose(x=Tensor([1],"float64"), y=Tensor([1],"float64"), rtol=0.01, atol=0.0, equal_nan=False, )
paddle.allclose(x=Tensor([1],"float64"), y=Tensor([1],"float64"), )
paddle.allclose(Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.allclose(Tensor([13, 3],"float32"), Tensor([13, 3],"float32"), atol=0.001, )
paddle.allclose(Tensor([2],"float32"), Tensor([2],"float32"), rtol=1e-05, atol=1e-08, equal_nan=True, name="test_4", )
paddle.allclose(Tensor([2],"float32"), Tensor([2],"float32"), rtol=1e-05, atol=1e-08, equal_nan=False, name="test_5", )
paddle.allclose(Tensor([2],"float32"), Tensor([2],"float32"), atol=0.001, )
paddle.allclose(Tensor([2],"float32"), Tensor([2],"float32"), rtol=1e-05, atol=1e-08, equal_nan=True, name="test_6", )
paddle.allclose(Tensor([13, 2],"float32"), Tensor([13, 2],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([2],"float32"), Tensor([2],"float32"), rtol=1e-05, atol=1e-08, equal_nan=False, name="test_3", )
paddle.allclose(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.allclose(x=Tensor([1],"float64"), y=Tensor([1],"float64"), rtol=1e-06, atol=0.001, equal_nan=False, )
paddle.allclose(Tensor([],"float32"), Tensor([],"float32"), atol=1e-05, )
paddle.allclose(x=Tensor([2, 2, 2, 3],"float64"), y=Tensor([2, 2, 2, 3],"float64"), )
paddle.allclose(Tensor([37],"float32"), Tensor([37],"float32"), )
paddle.allclose(Tensor([1],"float32"), Tensor([1],"float32"), rtol=0.01, atol=0.0, name="test_7", )
paddle.allclose(Tensor([30],"float32"), Tensor([30],"float32"), atol=1e-06, )
paddle.allclose(Tensor([2],"float32"), Tensor([2],"float32"), rtol=1e-05, atol=1e-08, equal_nan=True, name="test_2", )
paddle.allclose(x=Tensor([2, 2, 2, 3],"float64"), y=Tensor([2, 2, 2, 3],"float64"), rtol=-3.0, atol=-2.0, )
paddle.allclose(Tensor([],"float32"), Tensor([],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), atol=0.001, )
paddle.allclose(Tensor([1],"int32"), Tensor([1],"int32"), 50., 49., False, )
paddle.allclose(Tensor([2, 5],"float32"), Tensor([2, 5],"float32"), atol=0.001, )
paddle.allclose(Tensor([1],"float64"), Tensor([1],"float64"), rtol=0.015, atol=0.0, name="test_8", )
paddle.allclose(Tensor([],"float32"), Tensor([],"float32"), )
paddle.allclose(Tensor([1],"int32"), Tensor([1],"int32"), 50., 48., False, )
paddle.allclose(x=Tensor([1],"float32"), y=Tensor([1],"float32"), rtol=0.01, atol=0.01, equal_nan=False, )
paddle.allclose(Tensor([1, 8],"float32"), Tensor([1, 8],"float32"), atol=1e-06, rtol=1e-06, )
paddle.allclose(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), atol=0.0001, )
paddle.allclose(Tensor([30],"float32"), Tensor([30],"float32"), atol=0.0001, )
paddle.allclose(x=Tensor([1],"float64"), y=Tensor([1],"float64"), rtol=1e-05, atol=0.001, equal_nan=True, )
paddle.allclose(Tensor([1],"float64"), Tensor([1],"float64"), atol=0.0001, rtol=0.0001, )
paddle.allclose(x=Tensor([1],"float64"), y=Tensor([1],"float64"), rtol=1e-05, atol=0.001, equal_nan=False, )
paddle.allclose(Tensor([],"float32"), Tensor([],"float32"), rtol=0.01, atol=0.01, )
paddle.allclose(Tensor([13, 3],"float32"), Tensor([13, 3],"float32"), rtol=0.0001, atol=0.0001, )
paddle.allclose(Tensor([13, 3],"float32"), Tensor([13, 3],"float32"), atol=0.01, )
paddle.allclose(Tensor([2, 4],"float32"), Tensor([2, 4],"float32"), atol=0.001, )
paddle.allclose(Tensor([4, 5],"float32"), Tensor([4, 5],"float32"), atol=1e-06, )
paddle.allclose(Tensor([1],"bool"), Tensor([1],"bool"), 0., 0., False, )
paddle.allclose(Tensor([1],"int64"), Tensor([1],"int64"), 50., 48., False, )
paddle.allclose(x=Tensor([1],"float64"), y=Tensor([1],"float64"), rtol=0.01, atol=0.01, equal_nan=False, )
paddle.allclose(x=Tensor([3],"float64"), y=Tensor([3],"float64"), rtol=1e-06, atol=0.001, equal_nan=True, )
paddle.allclose(Tensor([20],"float32"), Tensor([20],"float32"), atol=0.001, )
paddle.allclose(Tensor([14],"float32"), Tensor([14],"float32"), atol=0.001, )
paddle.amax(Tensor([3, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.amax(Tensor([384],"float32"), )
paddle.amax(Tensor([3, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.amax(Tensor([384],"int64"), )
paddle.amax(Tensor([3, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.amax(Tensor([3, 2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.amax(Tensor([],"float32"), axis=list[], )
paddle.amax(Tensor([2, 4],"float64"), 0, False, )
paddle.amax(Tensor([],"float32"), axis=0, )
paddle.amax(Tensor([2, 2, 2],"int32"), tuple(0,1,), False, )
paddle.amax(Tensor([3, 5],"float32"), keepdim=True, )
paddle.amax(Tensor([2, 4],"float32"), axis=None, keepdim=False, )
paddle.amax(Tensor([2, 4],"float64"), None, False, )
paddle.amax(Tensor([10],"int64"), axis=None, keepdim=False, )
paddle.amax(Tensor([10],"float32"), axis=None, keepdim=False, )
paddle.amax(Tensor([64],"int64"), )
paddle.amax(Tensor([2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.amax(Tensor([3, 5],"float32"), axis=None, )
paddle.amax(Tensor([],"float64"), None, False, )
paddle.amax(Tensor([5],"float32"), axis=0, )
paddle.amax(Tensor([10],"int32"), axis=None, keepdim=False, )
paddle.amax(Tensor([10],"float64"), axis=None, keepdim=False, )
paddle.amax(Tensor([],"float32"), axis=-1, )
paddle.amax(Tensor([30],"float32"), keepdim=True, )
paddle.amax(Tensor([],"float32"), axis=None, )
paddle.amax(Tensor([2, 4],"float64"), 1, True, )
paddle.amin(Tensor([3, 2, 4, 5],"float32"), axis=-1, keepdim=True, )
paddle.amin(Tensor([3, 2, 5, 4],"float32"), axis=2, keepdim=True, )
paddle.amin(Tensor([3, 2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.amin(Tensor([3, 2, 5, 4],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.amin(Tensor([384],"float32"), )
paddle.amin(Tensor([384],"int64"), )
paddle.amin(Tensor([2, 4],"float64"), 0, False, )
paddle.amin(Tensor([2, 4],"float64"), None, False, )
paddle.amin(Tensor([10],"int64"), axis=None, keepdim=False, )
paddle.amin(Tensor([2, 4],"float64"), 1, True, )
paddle.amin(Tensor([],"float32"), axis=0, )
paddle.amin(Tensor([5],"float32"), axis=0, )
paddle.amin(Tensor([3, 5],"float32"), keepdim=True, )
paddle.amin(Tensor([],"float64"), None, False, )
paddle.amin(Tensor([10],"int32"), axis=None, keepdim=False, )
paddle.amin(Tensor([],"float32"), axis=list[], )
paddle.amin(Tensor([],"float32"), axis=-1, )
paddle.amin(Tensor([30],"float32"), keepdim=True, )
paddle.amin(Tensor([],"float32"), axis=None, )
paddle.amin(Tensor([64],"int64"), )
paddle.amin(Tensor([10],"float64"), axis=None, keepdim=False, )
paddle.amin(Tensor([2, 2, 2],"int32"), tuple(0,1,), False, )
paddle.amin(Tensor([10],"float32"), axis=None, keepdim=False, )
paddle.amin(Tensor([2, 4],"float32"), axis=None, keepdim=False, )
paddle.amin(Tensor([2, 5, 4],"float32"), axis=None, keepdim=False, )
paddle.amin(Tensor([3, 5],"float32"), axis=None, )
paddle.angle(Tensor([2, 3],"complex128"), )
paddle.angle(Tensor([],"complex64"), )
paddle.any(Tensor([5, 6, 10],"float64"), None, False, None, )
paddle.any(Tensor([10, 20],"bool"), )
paddle.any(Tensor([12, 10],"int64"), )
paddle.any(Tensor([12, 10],"bool"), axis=0, )
paddle.any(Tensor([12, 10],"float32"), )
paddle.any(Tensor([16, 32],"bool"), )
paddle.any(x=Tensor([10, 10],"bool"), )
paddle.any(Tensor([5, 6, 10],"bool"), None, False, None, )
paddle.any(Tensor([5, 6, 10],"int64"), None, False, None, )
paddle.any(Tensor([6, 2, 4, 5],"bool"), )
paddle.any(Tensor([12, 10],"bool"), axis=1, keepdim=True, )
paddle.any(Tensor([12, 10],"bool"), axis=-1, )
paddle.any(Tensor([12, 10],"bool"), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=tuple(0,2,), keepdim=False, )
paddle.any(Tensor([1, 0, 2],"float64"), axis=tuple(-1,-2,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=0, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=1, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=tuple(0,2,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"int32"), axis=-1, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=tuple(1,2,), keepdim=False, )
paddle.any(Tensor([1, 0, 2],"bool"), axis=-1, keepdim=True, )
paddle.any(Tensor([1, 1],"bool"), )
paddle.any(Tensor([1, 7],"bool"), )
paddle.any(Tensor([5, 1],"bool"), )
paddle.any(x=Tensor([2, 4, 4, 2],"bool"), axis=tuple(0,1,), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=2, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"bool"), axis=0, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"int32"), axis=0, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=1, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float32"), axis=0, keepdim=False, )
paddle.any(Tensor([32],"bool"), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=1, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"int32"), axis=tuple(0,1,), keepdim=False, )
paddle.any(x=Tensor([3, 4, 2],"bool"), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=None, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float32"), axis=1, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"bool"), axis=None, keepdim=False, )
paddle.any(Tensor([10, 2],"bool"), )
paddle.any(Tensor([1, 0, 2],"int32"), axis=1, keepdim=True, )
paddle.any(Tensor([],"bool"), )
paddle.any(Tensor([2, 3],"bool"), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=1, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=2, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"bool"), axis=tuple(-1,-2,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"int32"), axis=1, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=2, keepdim=True, )
paddle.any(Tensor([3, 5],"bool"), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float32"), axis=tuple(-1,-2,), keepdim=False, )
paddle.any(Tensor([1, 0, 2],"int32"), axis=-1, keepdim=False, )
paddle.any(x=Tensor([2, 4, 4, 2],"bool"), )
paddle.any(x=Tensor([2, 4, 4, 2],"bool"), axis=1, )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=None, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float64"), axis=-1, keepdim=True, )
paddle.any(Tensor([6],"bool"), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=tuple(0,2,), keepdim=False, )
paddle.any(Tensor([1, 0, 2],"bool"), axis=tuple(0,2,), keepdim=False, )
paddle.any(Tensor([1, 0, 2],"bool"), axis=tuple(1,2,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float64"), axis=-2, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float32"), axis=tuple(0,2,), keepdim=False, )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=2, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"float32"), axis=-2, keepdim=False, )
paddle.any(Tensor([5],"bool"), axis=0, )
paddle.any(Tensor([4, 5],"bool"), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=tuple(-1,-2,), keepdim=False, )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=None, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"bool"), axis=0, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=-1, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=tuple(0,1,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=0, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"bool"), axis=tuple(0,1,), keepdim=False, )
paddle.any(Tensor([13, 1],"bool"), )
paddle.any(Tensor([1, 0, 2],"float64"), axis=tuple(1,2,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float32"), axis=tuple(0,1,), keepdim=False, )
paddle.any(Tensor([1, 0, 2],"int32"), axis=0, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float64"), axis=2, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"float32"), axis=-1, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"float64"), axis=None, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=-2, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=None, keepdim=False, )
paddle.any(Tensor([],"bool"), axis=None, )
paddle.any(Tensor([1, 0, 2],"int32"), axis=None, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float64"), axis=tuple(-1,-2,), keepdim=False, )
paddle.any(Tensor([],"bool"), axis=list[], )
paddle.any(Tensor([1, 0, 2],"int32"), axis=None, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"float64"), axis=2, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=-1, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"float32"), axis=1, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"bool"), axis=-1, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"float64"), axis=tuple(0,1,), keepdim=False, )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=None, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"int32"), axis=tuple(1,2,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=tuple(-1,-2,), keepdim=False, )
paddle.any(Tensor([1, 17],"bool"), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=tuple(0,1,), keepdim=False, )
paddle.any(Tensor([],"bool"), axis=-1, )
paddle.any(Tensor([1, 0, 2],"int32"), axis=2, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"int32"), axis=tuple(0,2,), keepdim=False, )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=tuple(-1,-2,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"bool"), axis=-2, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"int32"), axis=tuple(-1,-2,), keepdim=False, )
paddle.any(Tensor([2, 4, 5],"bool"), )
paddle.any(Tensor([1, 0, 2],"bool"), axis=1, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=0, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"int32"), axis=tuple(0,1,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=-1, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float32"), axis=None, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=tuple(0,1,), keepdim=False, )
paddle.any(Tensor([],"bool"), axis=0, )
paddle.any(Tensor([1, 0, 2],"float32"), axis=-2, keepdim=True, )
paddle.any(Tensor([2, 1],"bool"), )
paddle.any(Tensor([1, 32],"bool"), )
paddle.any(Tensor([2, 16],"bool"), )
paddle.any(Tensor([37],"bool"), )
paddle.any(Tensor([1, 0, 2],"bool"), axis=2, keepdim=True, )
paddle.any(Tensor([1, 3],"bool"), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=tuple(-1,-2,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"bool"), axis=tuple(-1,-2,), keepdim=False, )
paddle.any(Tensor([1, 0, 2],"bool"), axis=tuple(0,2,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=tuple(-1,-2,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=tuple(1,2,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"bool"), axis=-2, keepdim=True, )
paddle.any(Tensor([2, 10],"bool"), )
paddle.any(Tensor([1, 0, 2],"bool"), axis=tuple(0,1,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=tuple(0,2,), keepdim=False, )
paddle.any(x=Tensor([10],"bool"), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=-2, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"bool"), axis=2, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"float32"), axis=2, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=tuple(0,2,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float64"), axis=1, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=tuple(1,2,), keepdim=False, )
paddle.any(Tensor([1, 0, 2],"float64"), axis=-2, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"int32"), axis=-2, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"bool"), axis=1, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.any(Tensor([2, 2],"bool"), list[0,], )
paddle.any(Tensor([1, 0, 2],"int32"), axis=-2, keepdim=False, )
paddle.any(Tensor([10, 2, 1],"bool"), )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=-2, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float32"), axis=-1, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float64"), axis=None, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"float64"), axis=1, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"int32"), axis=tuple(1,2,), keepdim=False, )
paddle.any(Tensor([1, 0, 2],"float32"), axis=tuple(1,2,), keepdim=False, )
paddle.any(Tensor([1, 0, 2],"bool"), axis=tuple(1,2,), keepdim=False, )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=0, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float32"), axis=2, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float64"), axis=-1, keepdim=False, )
paddle.any(Tensor([1, 0, 2],"float64"), axis=tuple(1,2,), keepdim=False, )
paddle.any(Tensor([1, 0, 2],"bool"), axis=None, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float32"), axis=tuple(1,2,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"int32"), axis=tuple(-1,-2,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=-1, keepdim=True, )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=tuple(0,1,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"complex64"), axis=2, keepdim=False, )
paddle.any(x=Tensor([2, 4],"bool"), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float32"), axis=0, keepdim=True, )
paddle.any(Tensor([3, 5],"bool"), axis=None, )
paddle.any(Tensor([1, 0, 2],"float32"), axis=tuple(0,1,), keepdim=True, )
paddle.any(Tensor([1, 11],"bool"), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=-2, keepdim=False, )
paddle.any(Tensor([1, 15],"bool"), )
paddle.any(Tensor([6, 1],"bool"), )
paddle.any(Tensor([1, 0, 2],"float32"), axis=tuple(0,2,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"int32"), axis=tuple(0,2,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float64"), axis=0, keepdim=True, )
paddle.any(Tensor([1],"bool"), )
paddle.any(Tensor([1, 0, 2],"complex128"), axis=tuple(1,2,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float64"), axis=tuple(0,2,), keepdim=True, )
paddle.any(Tensor([1, 0, 2],"float64"), axis=0, keepdim=False, )
paddle.arange(12, 13, dtype="int64", )
paddle.arange(814, )
paddle.arange(0, 16, 2, )
paddle.arange(374, )
paddle.arange(113, 114, dtype="int64", )
paddle.arange(end=8, dtype="int64", )
paddle.arange(252, )
paddle.arange(169, )
paddle.arange(0.0, 992, step=16, dtype="float32", )
paddle.arange(323, )
paddle.arange(0.0, 736, step=32, dtype="float32", )
paddle.arange(467, )
paddle.arange(0.0, 1312, step=32, dtype="float32", )
paddle.arange(38, dtype=VarType(float32), )
paddle.arange(41, )
paddle.arange(start=0, end=112, dtype=Dtype(int64), )
paddle.arange(87, )
paddle.arange(591, )
paddle.arange(148, )
paddle.arange(68, 69, dtype="int64", )
paddle.arange(0.0, 1280, step=32, dtype="float32", )
paddle.arange(6, dtype=Dtype(float64), )
paddle.arange(294, )
paddle.arange(6, dtype="float32", )
paddle.arange(596, )
paddle.arange(566, )
paddle.arange(end=20, dtype="float32", )
paddle.arange(end=208, )
paddle.arange(13, dtype=Dtype(int32), )
paddle.arange(609, )
paddle.arange(520, )
paddle.arange(400, )
paddle.arange(91, 92, dtype="int64", )
paddle.arange(293, )
paddle.arange(344, )
paddle.arange(0, 165, dtype=VarType(int64), )
paddle.arange(93, )
paddle.arange(535, )
paddle.arange(272, )
paddle.arange(567, )
paddle.arange(0.0, 1024, step=64, dtype="float32", )
paddle.arange(start=0, end=150, dtype=Dtype(int64), )
paddle.arange(432, )
paddle.arange(671, )
paddle.arange(86, 87, dtype="int64", )
paddle.arange(start=0, end=140, dtype=Dtype(int64), )
paddle.arange(34, dtype="float32", )
paddle.arange(120, )
paddle.arange(end=20, )
paddle.arange(end=24, dtype=VarType(float32), )
paddle.arange(89, )
paddle.arange(end=22, dtype="int64", )
paddle.arange(end=176, dtype="float32", )
paddle.arange(25, 26, dtype="int64", )
paddle.arange(553, )
paddle.arange(100, 101, dtype="int64", )
paddle.arange(121, )
paddle.arange(0, 10, dtype=Dtype(int64), )
paddle.arange(start=0, end=75, dtype=Dtype(int64), )
paddle.arange(310, )
paddle.arange(0.0, 704, step=16, dtype="float32", )
paddle.arange(end=160, )
paddle.arange(start=0, end=129, dtype=Dtype(int64), )
paddle.arange(34, dtype=VarType(float32), )
paddle.arange(0, 50, dtype="float32", )
paddle.arange(196, )
paddle.arange(737, )
paddle.arange(start=0, end=28, dtype=Dtype(int64), )
paddle.arange(20, dtype="int64", )
paddle.arange(362, )
paddle.arange(0, 16, dtype=Dtype(float32), )
paddle.arange(31, )
paddle.arange(end=120, )
paddle.arange(211, )
paddle.arange(199, )
paddle.arange(28, 29, dtype="int64", )
paddle.arange(569, )
paddle.arange(24, )
paddle.arange(590, )
paddle.arange(127, dtype="float32", )
paddle.arange(2, dtype="float32", )
paddle.arange(767, )
paddle.arange(56, dtype=VarType(float32), )
paddle.arange(start=-1, end=1, step=1, dtype=Dtype(float64), )
paddle.arange(5, dtype="int64", )
paddle.arange(136, dtype="float32", )
paddle.arange(0.0, 480.0, step=8.0, dtype="float32", )
paddle.arange(513, )
paddle.arange(111, )
paddle.arange(376, )
paddle.arange(285, )
paddle.arange(6, )
paddle.arange(134, )
paddle.arange(92, )
paddle.arange(104, )
paddle.arange(0, 435, dtype=VarType(int64), )
paddle.arange(659, )
paddle.arange(end=44, dtype=VarType(float32), )
paddle.arange(348, )
paddle.arange(1, 5, dtype=Dtype(float32), )
paddle.arange(0.0, 480.0, step=16.0, dtype="float32", )
paddle.arange(80, 81, dtype="int64", )
paddle.arange(617, )
paddle.arange(384, )
paddle.arange(20, dtype="float32", )
paddle.arange(start=0, end=125, dtype=Dtype(int64), )
paddle.arange(start=0, end=10, dtype=Dtype(int64), )
paddle.arange(start=0, end=68, dtype=Dtype(int64), )
paddle.arange(256, )
paddle.arange(119, )
paddle.arange(88, dtype="float32", )
paddle.arange(-7, 7, dtype="float32", name=None, )
paddle.arange(136, )
paddle.arange(700, )
paddle.arange(55, )
paddle.arange(751, )
paddle.arange(72, )
paddle.arange(0.0, 1344, step=4, dtype="float32", )
paddle.arange(342, )
paddle.arange(17, dtype="float32", )
paddle.arange(start=0, end=95, dtype=Dtype(int64), )
paddle.arange(220, )
paddle.arange(538, )
paddle.arange(0, 2, 1, dtype="int32", )
paddle.arange(start=0, end=43, dtype=Dtype(int64), )
paddle.arange(end=19, )
paddle.arange(311, )
paddle.arange(start=0, end=119, dtype=Dtype(int64), )
paddle.arange(0, 128, 2, )
paddle.arange(0, 8000, 1000, dtype=Dtype(int64), )
paddle.arange(13, dtype=VarType(float32), )
paddle.arange(771, )
paddle.arange(0, 10, 2, dtype=Dtype(float32), )
paddle.arange(0, 128, 2, dtype="float32", )
paddle.arange(0.0, 1104, step=16, dtype="float32", )
paddle.arange(232, )
paddle.arange(663, )
paddle.arange(10, dtype=Dtype(float64), )
paddle.arange(start=0, end=63, dtype=Dtype(int64), )
paddle.arange(start=0, end=113, dtype=Dtype(int64), )
paddle.arange(0.0, 704, step=64, dtype="float32", )
paddle.arange(435, )
paddle.arange(512, )
paddle.arange(end=46, dtype="float32", )
paddle.arange(30, 31, dtype="int64", )
paddle.arange(0, 364, )
paddle.arange(0.0, 736, step=8, dtype="float32", )
paddle.arange(815, )
paddle.arange(256, dtype=VarType(float32), )
paddle.arange(346, )
paddle.arange(start=0, end=84, dtype=Dtype(int64), )
paddle.arange(36, dtype=VarType(float32), )
paddle.arange(496, )
paddle.arange(577, )
paddle.arange(708, )
paddle.arange(124, )
paddle.arange(start=0, end=54, dtype=Dtype(int64), )
paddle.arange(end=200, )
paddle.arange(50, 51, dtype="int64", )
paddle.arange(end=44, )
paddle.arange(54, dtype=VarType(float32), )
paddle.arange(257, )
paddle.arange(693, )
paddle.arange(end=7, )
paddle.arange(0.0, 960, step=64, dtype="float32", )
paddle.arange(110, )
paddle.arange(20, )
paddle.arange(start=1, end=20, step=3, dtype=type(numpy.int64), )
paddle.arange(70, 71, dtype="int64", )
paddle.arange(399, )
paddle.arange(463, )
paddle.arange(315, )
paddle.arange(46, dtype=VarType(float32), )
paddle.arange(start=0, end=107, dtype=Dtype(int64), )
paddle.arange(end=136, dtype="float32", )
paddle.arange(13, dtype="float32", )
paddle.arange(0.0, 816, step=16, dtype="float32", )
paddle.arange(107, )
paddle.arange(448, )
paddle.arange(4096, )
paddle.arange(29, dtype="float32", )
paddle.arange(88, 89, dtype="int64", )
paddle.arange(29, 30, dtype="int64", )
paddle.arange(106, 107, dtype="int64", )
paddle.arange(start=0, end=127, dtype=Dtype(int64), )
paddle.arange(128, )
paddle.arange(start=0, end=67, dtype=Dtype(int64), )
paddle.arange(0.0, 640.0, step=64.0, dtype="float32", )
paddle.arange(0.0, 1248, step=16, dtype="float32", )
paddle.arange(0, 44, 2, dtype=Dtype(float32), )
paddle.arange(0.0, 752, step=16, dtype="float32", )
paddle.arange(177, )
paddle.arange(end=2, )
paddle.arange(2, dtype="int32", )
paddle.arange(start=5, )
paddle.arange(829, )
paddle.arange(62, )
paddle.arange(772, )
paddle.arange(401, )
paddle.arange(99, )
paddle.arange(43, )
paddle.arange(661, )
paddle.arange(1, 4, dtype="int64", )
paddle.arange(428, )
paddle.arange(start=-1, end=1, step=1, dtype=Dtype(float32), )
paddle.arange(84, 85, dtype="int64", )
paddle.arange(305, )
paddle.arange(0, 728, )
paddle.arange(8, dtype="float32", )
paddle.arange(start=0, end=48, dtype=Dtype(int64), )
paddle.arange(18, dtype="float32", )
paddle.arange(613, )
paddle.arange(883, )
paddle.arange(start=0, end=17, dtype=Dtype(int64), )
paddle.arange(0, 5, dtype="int64", )
paddle.arange(743, )
paddle.arange(end=232, )
paddle.arange(3, )
paddle.arange(start=0, end=6, dtype=Dtype(int64), )
paddle.arange(10, dtype=Dtype(float32), )
paddle.arange(end=17, )
paddle.arange(3, 9, )
paddle.arange(44, dtype=VarType(float32), )
paddle.arange(0.0, 768.0, step=128.0, dtype="float32", )
paddle.arange(start=0, end=78, dtype=Dtype(int64), )
paddle.arange(161, )
paddle.arange(25, dtype="float32", )
paddle.arange(58, dtype="float32", )
paddle.arange(0.0, 1024, step=32, dtype="float32", )
paddle.arange(1, dtype=Dtype(float64), )
paddle.arange(224, )
paddle.arange(67, 68, dtype="int64", )
paddle.arange(end=80, dtype="float32", )
paddle.arange(275, )
paddle.arange(0, 11, dtype="int64", )
paddle.arange(17, dtype=VarType(float32), )
paddle.arange(179, )
paddle.arange(100, )
paddle.arange(377, )
paddle.arange(248, )
paddle.arange(22, 23, dtype="int64", )
paddle.arange(end=72, )
paddle.arange(636, )
paddle.arange(302, )
paddle.arange(64, dtype=VarType(float32), )
paddle.arange(888, )
paddle.arange(669, )
paddle.arange(start=0, end=264, dtype=Dtype(int64), )
paddle.arange(768, )
paddle.arange(0, 1024, dtype="int64", )
paddle.arange(end=16, dtype=VarType(int32), )
paddle.arange(end=64, )
paddle.arange(0, 16, 2, dtype=Dtype(float32), )
paddle.arange(5, 6, dtype="int64", )
paddle.arange(end=4, )
paddle.arange(start=0, end=18, dtype=Dtype(int64), )
paddle.arange(start=0, end=135, dtype=Dtype(int64), )
paddle.arange(512, dtype=VarType(float32), )
paddle.arange(580, )
paddle.arange(112, )
paddle.arange(0.0, 768.0, step=16.0, dtype="float32", )
paddle.arange(727, )
paddle.arange(556, )
paddle.arange(719, )
paddle.arange(74, )
paddle.arange(139, )
paddle.arange(start=0, end=109, dtype=Dtype(int64), )
paddle.arange(110, 111, dtype="int64", )
paddle.arange(0.0, 640, step=64, dtype="float32", )
paddle.arange(1024, )
paddle.arange(90, 91, dtype="int64", )
paddle.arange(start=0, end=170, dtype=Dtype(int64), )
paddle.arange(0.0, 1344, step=64, dtype="float32", )
paddle.arange(480, )
paddle.arange(6, dtype="int64", )
paddle.arange(469, )
paddle.arange(521, )
paddle.arange(81, )
paddle.arange(215, )
paddle.arange(end=4, dtype="int64", )
paddle.arange(start=0, end=131, dtype=Dtype(int64), )
paddle.arange(0.0, 1280, step=4, dtype="float32", )
paddle.arange(start=0, end=38, dtype=Dtype(int64), )
paddle.arange(125, )
paddle.arange(854, )
paddle.arange(0, 16, 1, dtype=Dtype(float32), )
paddle.arange(0.0, 1344, step=8, dtype="float32", )
paddle.arange(71, )
paddle.arange(start=0, end=9, dtype=Dtype(int64), )
paddle.arange(0.0, 992, step=4, dtype="float32", )
paddle.arange(0, 4.0, 2, )
paddle.arange(145, )
paddle.arange(74, 75, dtype="int64", )
paddle.arange(87, 88, dtype="int64", )
paddle.arange(328, )
paddle.arange(214, )
paddle.arange(187, )
paddle.arange(-30.08, 30.080009999999998, step=0.32171122994652407, dtype="float32", )
paddle.arange(0.0, 784, step=16, dtype="float32", )
paddle.arange(477, )
paddle.arange(0.0, 1280, step=16, dtype="float32", )
paddle.arange(7, -7, -1.0, dtype="float32", )
paddle.arange(start=0, end=116, dtype=Dtype(int64), )
paddle.arange(113, )
paddle.arange(33, 34, dtype="int64", )
paddle.arange(279, )
paddle.arange(597, )
paddle.arange(24, 25, dtype="int64", )
paddle.arange(end=96, dtype=VarType(float32), )
paddle.arange(0.0, 768.0, step=64.0, dtype="float32", )
paddle.arange(77, )
paddle.arange(505, )
paddle.arange(end=52, )
paddle.arange(218, )
paddle.arange(284, )
paddle.arange(73, 74, dtype="int64", )
paddle.arange(0.0, 864, step=32, dtype="float32", )
paddle.arange(end=240, )
paddle.arange(633, )
paddle.arange(396, )
paddle.arange(0, 7, dtype=Dtype(float32), )
paddle.arange(1, 9, dtype=Dtype(float32), )
paddle.arange(512, dtype="float32", )
paddle.arange(212, )
paddle.arange(379, )
paddle.arange(42, dtype="float32", )
paddle.arange(0, 32, 2.0, dtype="float32", )
paddle.arange(68, dtype="float32", )
paddle.arange(494, )
paddle.arange(255, )
paddle.arange(end=64, dtype=Dtype(int32), )
paddle.arange(start=0, end=60, dtype=Dtype(int64), )
paddle.arange(59, )
paddle.arange(740, )
paddle.arange(103, 104, dtype="int64", )
paddle.arange(356, )
paddle.arange(1, )
paddle.arange(667, )
paddle.arange(123, 124, dtype="int64", )
paddle.arange(end=136, )
paddle.arange(200, dtype="float32", )
paddle.arange(97, )
paddle.arange(461, )
paddle.arange(778, )
paddle.arange(end=88, dtype="float32", )
paddle.arange(530, )
paddle.arange(0.0, 480.0, step=32.0, dtype="float32", )
paddle.arange(start=0, end=158, dtype=Dtype(int64), )
paddle.arange(start=0, end=55, dtype=Dtype(int64), )
paddle.arange(41, 42, dtype="int64", )
paddle.arange(start=0, end=44, dtype=Dtype(int64), )
paddle.arange(489, )
paddle.arange(761, )
paddle.arange(68, )
paddle.arange(571, )
paddle.arange(332, )
paddle.arange(458, )
paddle.arange(94, )
paddle.arange(0.0, 576.0, step=64.0, dtype="float32", )
paddle.arange(106, )
paddle.arange(691, )
paddle.arange(582, )
paddle.arange(128, dtype="float32", )
paddle.arange(335, )
paddle.arange(188, )
paddle.arange(0.0, 736.0, step=32.0, dtype="float32", )
paddle.arange(52, dtype=VarType(float32), )
paddle.arange(53, )
paddle.arange(610, )
paddle.arange(280, )
paddle.arange(786, )
paddle.arange(32, )
paddle.arange(402, )
paddle.arange(388, )
paddle.arange(end=16, dtype="float32", )
paddle.arange(0.0, 960, step=16, dtype="float32", )
paddle.arange(19, )
paddle.arange(459, )
paddle.arange(201, )
paddle.arange(0.0, 944, step=16, dtype="float32", )
paddle.arange(301, )
paddle.arange(512, dtype=Dtype(int64), )
paddle.arange(15, )
paddle.arange(0, 32, dtype=Dtype(int32), )
paddle.arange(243, )
paddle.arange(0.0, 1056, step=8, dtype="float32", )
paddle.arange(46, )
paddle.arange(0.0, 672, step=32, dtype="float32", )
paddle.arange(393, )
paddle.arange(527, )
paddle.arange(0, 209, step=3, )
paddle.arange(end=8, dtype=Dtype(int32), )
paddle.arange(start=0, end=8, dtype=Dtype(int64), )
paddle.arange(start=0, end=23, dtype=Dtype(int64), )
paddle.arange(0.0, 1072, step=16, dtype="float32", )
paddle.arange(690, )
paddle.arange(0, 7, )
paddle.arange(34, 35, dtype="int64", )
paddle.arange(10, )
paddle.arange(end=60, )
paddle.arange(start=0, end=82, dtype=Dtype(int64), )
paddle.arange(0, 5000, dtype=Dtype(float32), )
paddle.arange(240, )
paddle.arange(21, dtype=VarType(float32), )
paddle.arange(413, )
paddle.arange(end=72, dtype="float32", )
paddle.arange(8, dtype=VarType(float32), )
paddle.arange(start=0, end=76, dtype=Dtype(int64), )
paddle.arange(58, )
paddle.arange(333, )
paddle.arange(0.0, 640.0, step=128.0, dtype="float32", )
paddle.arange(end=104, )
paddle.arange(511, )
paddle.arange(371, )
paddle.arange(start=0, end=57, dtype=Dtype(int64), )
paddle.arange(0.0, 512.0, step=128.0, dtype="float32", )
paddle.arange(58, dtype=Dtype(float32), )
paddle.arange(277, )
paddle.arange(386, )
paddle.arange(start=0, end=53, dtype=Dtype(int64), )
paddle.arange(568, )
paddle.arange(4004, dtype="float32", )
paddle.arange(704, )
paddle.arange(108, 109, dtype="int64", )
paddle.arange(0.0, 768.0, step=8.0, dtype="float32", )
paddle.arange(518, )
paddle.arange(608, )
paddle.arange(483, )
paddle.arange(848, )
paddle.arange(start=0, end=117, dtype=Dtype(int64), )
paddle.arange(1358, )
paddle.arange(512, dtype="int64", )
paddle.arange(start=0, end=11, dtype=Dtype(int64), )
paddle.arange(418, )
paddle.arange(end=224, )
paddle.arange(123, )
paddle.arange(0, 2, )
paddle.arange(start=0, end=14, dtype=Dtype(int64), )
paddle.arange(330, )
paddle.arange(60, 61, dtype="int64", )
paddle.arange(end=92, dtype=VarType(float32), )
paddle.arange(0, 4, 2, )
paddle.arange(start=0, end=4, )
paddle.arange(210, )
paddle.arange(75, 76, dtype="int64", )
paddle.arange(625, )
paddle.arange(start=0, end=137, dtype=Dtype(int64), )
paddle.arange(end=64, dtype="float32", )
paddle.arange(end=1, dtype="int64", )
paddle.arange(end=40, dtype="float32", )
paddle.arange(533, )
paddle.arange(16, dtype=VarType(float32), )
paddle.arange(0.0, 928, step=8, dtype="float32", )
paddle.arange(72, 73, dtype="int64", )
paddle.arange(85, 86, dtype="int64", )
paddle.arange(0, 128, 2, dtype=Dtype(float32), )
paddle.arange(44, 45, dtype="int64", )
paddle.arange(end=60, dtype="float32", )
paddle.arange(start=0, end=34, dtype=Dtype(int64), )
paddle.arange(11, dtype=Dtype(float32), )
paddle.arange(254, )
paddle.arange(261, )
paddle.arange(282, )
paddle.arange(9, 10, dtype="int64", )
paddle.arange(442, )
paddle.arange(0, 14, 2, dtype=Dtype(float32), )
paddle.arange(4096, dtype="int64", )
paddle.arange(start=0, end=42, dtype=Dtype(int64), )
paddle.arange(59, 60, dtype="int64", )
paddle.arange(0.0, 704, step=8, dtype="float32", )
paddle.arange(707, )
paddle.arange(122, )
paddle.arange(12, dtype=VarType(float32), )
paddle.arange(291, )
paddle.arange(141, )
paddle.arange(1024, dtype="float32", )
paddle.arange(299, )
paddle.arange(454, dtype="float32", )
paddle.arange(11, dtype="float32", )
paddle.arange(3, dtype="float32", )
paddle.arange(492, )
paddle.arange(start=0, end=118, dtype=Dtype(int64), )
paddle.arange(524, )
paddle.arange(559, )
paddle.arange(522, )
paddle.arange(515, )
paddle.arange(434, )
paddle.arange(91, )
paddle.arange(394, )
paddle.arange(14, dtype="float32", )
paddle.arange(36, dtype="float32", )
paddle.arange(start=0, end=74, dtype=Dtype(int64), )
paddle.arange(end=22, )
paddle.arange(460, )
paddle.arange(128, dtype=Dtype(float32), )
paddle.arange(end=5, )
paddle.arange(340, )
paddle.arange(start=0, end=141, dtype=Dtype(int64), )
paddle.arange(0, 6, dtype=Dtype(int64), )
paddle.arange(0.0, 1216, step=4, dtype="float32", )
paddle.argmax(Tensor([2, 256],"float32"), axis=-1, )
paddle.argmax(Tensor([2, 123],"float32"), axis=-1, )
paddle.argmax(Tensor([2, 99],"float32"), axis=-1, )
paddle.argmax(Tensor([10, 10],"float32"), axis=1, )
paddle.argmax(Tensor([10, 10],"float32"), axis=-1, keepdim=True, dtype="int32", )
paddle.argmax(Tensor([5, 5, 5, 5],"float64"), axis=0, )
paddle.argmax(Tensor([10, 10],"float32"), )
paddle.argmax(Tensor([1, 100],"float32"), axis=-1, )
paddle.argmax(Tensor([2, 100],"float32"), axis=-1, )
paddle.argmax(Tensor([3, 3, 3, 3, 3, 3],"float64"), axis=0, )
paddle.argmax(Tensor([1, 256],"float32"), axis=-1, )
paddle.argmax(Tensor([10, 10],"float32"), axis=-1, keepdim=True, )
paddle.argmax(Tensor([10, 10],"float32"), axis=-1, )
paddle.argmax(Tensor([],"float32"), -1, )
paddle.argmax(x=Tensor([3, 3],"float64"), axis=0, dtype=type(numpy.int32), keepdim=False, )
paddle.argmax(x=Tensor([2, 3],"int64"), axis=-1, )
paddle.argmax(x=Tensor([3, 3, 4],"float64"), axis=1, keepdim=False, )
paddle.argmax(x=Tensor([3, 1],"int64"), keepdim=None, )
paddle.argmax(Tensor([3, 5],"float32"), )
paddle.argmax(Tensor([5],"float32"), 0, )
paddle.argmax(x=Tensor([3, 3],"int64"), dtype="int32", )
paddle.argmax(Tensor([1, 99],"float32"), axis=-1, )
paddle.argmax(x=Tensor([3, 3, 5],"float64"), axis=2, dtype=type(numpy.int64), )
paddle.argmax(Tensor([1, 32],"float64"), axis=-1, )
paddle.argmax(Tensor([],"float32"), 0, )
paddle.argmax(x=Tensor([3, 3, 2, 1],"float64"), axis=-1, dtype="int64", )
paddle.argmax(x=Tensor([3, 3],"int64"), axis=-2, )
paddle.argmax(Tensor([],"float32"), None, )
paddle.argmax(Tensor([3, 5],"float32"), keepdim=True, )
paddle.argmax(x=Tensor([3],"int64"), axis=-1, keepdim=True, )
paddle.argmax(Tensor([4, 6],"float32"), axis=1, )
paddle.argmax(Tensor([2, 3, 4],"float64"), axis=-1, keepdim=True, )
paddle.argmax(x=Tensor([3, 3],"int64"), axis=Tensor([1],"int64"), )
paddle.argmax(x=Tensor([3, 3, 3],"float64"), )
paddle.argmin(Tensor([10, 10],"float32"), )
paddle.argmin(Tensor([5, 5, 5, 5],"float64"), axis=0, )
paddle.argmin(Tensor([10, 10],"float32"), axis=1, )
paddle.argmin(Tensor([10, 10],"float32"), axis=-1, keepdim=True, )
paddle.argmin(Tensor([10, 10],"float32"), axis=-1, )
paddle.argmin(Tensor([10, 10],"float32"), axis=-1, keepdim=True, dtype="int32", )
paddle.argmin(Tensor([3, 3, 3, 3, 3, 3],"float64"), axis=0, )
paddle.argmin(Tensor([],"float32"), None, )
paddle.argmin(x=Tensor([3, 3, 2, 1],"float64"), axis=-1, dtype="int64", )
paddle.argmin(Tensor([3, 5],"float32"), )
paddle.argmin(x=Tensor([3, 3, 4],"float64"), axis=1, keepdim=False, )
paddle.argmin(x=Tensor([3, 3],"int64"), axis=-2, )
paddle.argmin(Tensor([3, 5],"float32"), keepdim=True, )
paddle.argmin(x=Tensor([3, 1],"int64"), keepdim=None, )
paddle.argmin(x=Tensor([3, 3, 5],"float64"), axis=2, dtype=type(numpy.int64), )
paddle.argmin(x=Tensor([2, 3],"int64"), axis=-1, )
paddle.argmin(x=Tensor([3, 3],"int64"), axis=Tensor([1],"int64"), )
paddle.argmin(x=Tensor([3, 3],"int64"), dtype="int32", )               
paddle.argmin(Tensor([],"float32"), -1, )
paddle.argmin(x=Tensor([3],"int64"), axis=-1, keepdim=True, )
paddle.argmin(x=Tensor([3, 3, 3],"float64"), )
paddle.argmin(x=Tensor([3, 3],"float64"), axis=0, dtype=type(numpy.int32), keepdim=False, )
paddle.argmin(Tensor([],"float32"), 0, )
paddle.argmin(Tensor([5],"float32"), 0, )
paddle.argsort(Tensor([300],"float32"), stable=True, )
paddle.argsort(Tensor([300],"int32"), stable=True, )
paddle.argsort(Tensor([300],"float64"), stable=True, )
paddle.argsort(Tensor([2, 100],"int64"), axis=1, stable=True, )
paddle.argsort(Tensor([40, 3, 4],"float64"), axis=0, stable=True, )
paddle.argsort(Tensor([40, 3, 4],"float64"), axis=0, descending=True, stable=True, )
paddle.argsort(Tensor([300],"int64"), stable=True, )
paddle.argsort(Tensor([30, 1],"float64"), axis=0, stable=True, )
paddle.argsort(Tensor([1, 30],"float64"), axis=1, descending=True, stable=True, )
paddle.argsort(Tensor([1, 30],"float64"), axis=1, stable=True, )
paddle.argsort(Tensor([3, 4],"int64"), axis=0, stable=True, )
paddle.argsort(Tensor([3, 4],"int64"), axis=1, stable=True, )
paddle.argsort(Tensor([3, 10],"int64"), axis=1, stable=True, )
paddle.argsort(Tensor([3, 4, 2],"int64"), axis=1, stable=True, )
paddle.argsort(Tensor([5, 4],"int64"), axis=0, stable=True, )
paddle.argsort(Tensor([3, 4, 2],"int64"), axis=2, stable=True, )
paddle.argsort(Tensor([5, 4],"int64"), axis=1, stable=True, )
paddle.argsort(Tensor([30],"float64"), axis=0, stable=True, )
paddle.argsort(Tensor([30, 1],"float64"), axis=0, descending=True, stable=True, )
paddle.argsort(Tensor([30],"float64"), axis=0, descending=True, stable=True, )
paddle.argsort(Tensor([3, 4, 2],"int64"), axis=0, stable=True, )
paddle.as_complex(Tensor([10, 10, 2],"float64"), )
paddle.as_complex(Tensor([8, 8, 4, 2],"float32"), )
paddle.as_complex(x=Tensor([9, 2, 3, 2],"float64"), )
paddle.as_complex(Tensor([2, 4, 2],"float64"), )
paddle.as_complex(x=Tensor([3, 2],"float32"), )
paddle.as_complex(Tensor([2, 4, 2],"float32"), )
paddle.as_complex(x=Tensor([3, 2],"float64"), )
paddle.as_complex(x=Tensor([9, 3, 2],"float64"), )
paddle.as_complex(Tensor([2],"float32"), )
paddle.as_real(Tensor([10, 10],"complex128"), )
paddle.as_real(x=Tensor([9, 2, 3],"complex128"), )
paddle.as_real(Tensor([],"complex64"), )
paddle.as_real(Tensor([2, 4],"complex64"), )
paddle.as_real(x=Tensor([3],"complex64"), )
paddle.as_real(Tensor([2, 4],"complex128"), )
paddle.as_real(x=Tensor([3],"complex128"), )
paddle.as_real(x=Tensor([9, 3],"complex64"), )
paddle.as_real(x=Tensor([9, 3],"complex128"), )
paddle.as_real(x=Tensor([9, 2, 3],"complex64"), )
paddle.as_strided(Tensor([2, 4, 6],"float32"), list[8,6,], list[6,1,], )
paddle.asin(Tensor([10, 20, 1],"float32"), )
paddle.asin(x=Tensor([3, 3, 3],"float32"), )
paddle.asin(x=Tensor([3, 3, 3],"float64"), )
paddle.asin(Tensor([],"float32"), )
paddle.asinh(Tensor([10, 20, 1],"float32"), )
paddle.asinh(Tensor([],"float32"), )
paddle.assign(Tensor([384],"float32"), Tensor([384],"float32"), )
paddle.assign(Tensor([15, 4, 4],"float32"), Tensor([15, 4, 4],"float32"), )
paddle.assign(Tensor([128],"bfloat16"), Tensor([128],"bfloat16"), )
paddle.assign(Tensor([100],"float16"), Tensor([100],"float16"), )
paddle.assign(Tensor([1, 896],"float32"), )
paddle.assign(Tensor([128],"float32"), Tensor([128],"float32"), )
paddle.assign(Tensor([96],"float32"), Tensor([96],"float32"), )
paddle.assign(Tensor([20, 20],"float32"), Tensor([20, 20],"float32"), )
paddle.assign(Tensor([256],"float32"), Tensor([256],"float32"), )
paddle.assign(Tensor([192],"float32"), Tensor([192],"float32"), )
paddle.assign(Tensor([64],"float32"), Tensor([64],"float32"), )
paddle.assign(Tensor([64, 1, 1],"float32"), Tensor([64, 1, 1],"float32"), )
paddle.assign(Tensor([64, 5],"float32"), Tensor([64, 5],"float32"), )
paddle.assign(Tensor([2, 10, 3, 3],"float32"), )
paddle.assign(Tensor([100],"bfloat16"), Tensor([100],"bfloat16"), )
paddle.assign(Tensor([10, 16],"float32"), )
paddle.assign(Tensor([1, 64, 1],"float32"), Tensor([1, 64, 1],"float32"), )
paddle.assign(Tensor([2, 64],"float32"), Tensor([2, 64],"float32"), )
paddle.assign(Tensor([256],"bfloat16"), Tensor([256],"bfloat16"), )
paddle.assign(Tensor([90, 4],"float32"), Tensor([90, 4],"float32"), )
paddle.assign(Tensor([2, 50],"float32"), Tensor([2, 50],"float32"), )
paddle.assign(Tensor([64],"float32"), Tensor([64],"float32"), )
paddle.assign(Tensor([90],"float32"), Tensor([90],"float32"), )
paddle.assign(Tensor([5, 4, 4],"float32"), Tensor([5, 4, 4],"float32"), )
paddle.assign(Tensor([13, 8],"int64"), Tensor([13, 8],"int64"), )
paddle.assign(Tensor([256, 1],"float32"), Tensor([256, 1],"float32"), )
paddle.assign(Tensor([80],"float32"), Tensor([80],"float32"), )
paddle.assign(Tensor([100],"float32"), Tensor([100],"float32"), )
paddle.assign(Tensor([50],"float32"), Tensor([50],"float32"), )
paddle.assign(Tensor([64, 1, 3],"float32"), Tensor([64, 1, 3],"float32"), )
paddle.assign(Tensor([2, 10, 5],"float32"), )
paddle.assign(Tensor([10, 20],"float32"), Tensor([10, 20],"float32"), )
paddle.assign(Tensor([5, 3, 3, 3, 3],"float32"), Tensor([5, 3, 3, 3, 3],"float32"), )
paddle.assign(Tensor([1, 64, 3],"float32"), Tensor([1, 64, 3],"float32"), )
paddle.assign(Tensor([384],"float32"), Tensor([384],"float32"), )
paddle.assign(Tensor([3, 2, 3, 3],"float32"), Tensor([3, 2, 3, 3],"float32"), )
paddle.assign(Tensor([50, 3],"float32"), Tensor([50, 3],"float32"), )
paddle.assign(Tensor([320],"bfloat16"), Tensor([320],"bfloat16"), )
paddle.assign(Tensor([80],"bfloat16"), Tensor([80],"bfloat16"), )
paddle.assign(Tensor([100],"float64"), Tensor([100],"float64"), )
paddle.assign(Tensor([1, 896],"bfloat16"), )
paddle.assign(Tensor([5, 3, 3, 3],"float32"), Tensor([5, 3, 3, 3],"float32"), )
paddle.assign(Tensor([64],"bfloat16"), Tensor([64],"bfloat16"), )
paddle.assign(Tensor([257],"bfloat16"), Tensor([257],"bfloat16"), )
paddle.assign(Tensor([3, 90],"float32"), Tensor([3, 90],"float32"), )
paddle.assign(x=Tensor([3, 4],"float32"), )
paddle.assign(3., Tensor([],"float32"), )
paddle.assign(Tensor([32],"float32"), Tensor([32],"float32"), )
paddle.assign(10.0, )
paddle.assign(Tensor([1, 1],"float32"), )
paddle.assign(Tensor([48, 1],"float32"), Tensor([48, 1],"float32"), )
paddle.assign(Tensor([4, 3],"float64"), )
paddle.assign(0.22685145, )
paddle.assign(3.0, )
paddle.assign(Tensor([1, 38, 1],"float32"), output=Tensor([1, 38, 1],"float32"), )
paddle.assign(Tensor([5, 2],"float32"), )
paddle.assign(list[100,], )
paddle.assign(x=Tensor([3, 4],"int64"), )
paddle.assign(Tensor([1],"int32"), )
paddle.assign(Tensor([],"float64"), )
paddle.assign(.778772, Tensor([],"float32"), )
paddle.assign(Tensor([20],"float32"), Tensor([20],"float32"), )
paddle.assign(1., Tensor([1],"float32"), )
paddle.assign(Tensor([13, 5],"float32"), )
paddle.assign(Tensor([13, 1, 1],"float32"), )
paddle.assign(1, )
paddle.assign(Tensor([3, 1, 1],"float32"), )
paddle.assign(Tensor([1, 13],"int64"), )
paddle.assign(Tensor([],"float32"), )
paddle.assign(Tensor([],"float16"), )
paddle.assign(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.assign(7, )
paddle.assign(Tensor([2, 3, 4],"float64"), )
paddle.assign(Tensor([3, 3],"float32"), )
paddle.assign(Tensor([2, 2],"float32"), )
paddle.assign(Tensor([4, 7],"float32"), Tensor([4, 7],"float32"), )
paddle.assign(16, )
paddle.assign(Tensor([2, 4, 4],"float32"), Tensor([2, 4, 4],"float32"), )
paddle.assign(Tensor([20, 1],"float32"), Tensor([20, 1],"float32"), )
paddle.assign(Tensor([],"float32"), Tensor([],"float32"), )
paddle.assign(Tensor([1, 9, 1],"float32"), output=Tensor([1, 9, 1],"float32"), )
paddle.assign(Tensor([2],"float32"), Tensor([2],"float32"), )
paddle.assign(Tensor([32],"bfloat16"), Tensor([32],"bfloat16"), )
paddle.assign(Tensor([32],"float64"), Tensor([32],"float64"), )
paddle.assign(0., )
paddle.assign(Tensor([33],"float32"), Tensor([33],"float32"), )
paddle.assign(2, )
paddle.assign(Tensor([3, 4, 5],"float32"), )
paddle.assign(list[1,2,3,], )
paddle.assign(.09994, Tensor([],"float32"), )
paddle.assign(Tensor([5],"float32"), Tensor([5],"float32"), )
paddle.assign(Tensor([3, 3],"float64"), )
paddle.assign(Tensor([7],"float32"), Tensor([7],"float32"), )
paddle.assign(Tensor([6],"float16"), Tensor([6],"float16"), )
paddle.assign(Tensor([2],"float16"), )
paddle.assign(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.assign(Tensor([1, 36, 1, 1],"float32"), output=Tensor([1, 36, 1, 1],"float32"), )
paddle.assign(Tensor([2, 42],"float32"), )
paddle.assign(list[Tensor([],"float64"),], )
paddle.assign(.356435, Tensor([],"float32"), )
paddle.assign(x=tuple(tuple(3.1,2.1,2.2,),tuple(-1.0,-2.0,-2.2,),), )
paddle.assign(list[7,], )
paddle.assign(list[True,False,True,], )
paddle.assign(Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.assign(1., Tensor([],"float32"), )
paddle.assign(10, )
paddle.assign(Tensor([12],"float32"), Tensor([12],"float32"), )
paddle.assign(Tensor([2],"float64"), )
paddle.assign(Tensor([3, 2],"float32"), )
paddle.assign(Tensor([1, 1, 1, 7],"float32"), Tensor([1, 1, 1, 7],"float32"), )
paddle.assign(Tensor([1, 1, 1, 11],"float32"), Tensor([1, 1, 1, 11],"float32"), )
paddle.assign(.5880145, Tensor([],"float32"), )
paddle.assign(Tensor([36],"float32"), Tensor([36],"float32"), )
paddle.assign(Tensor([10],"float32"), )
paddle.assign(Tensor([1],"float32"), )
paddle.assign(3, )
paddle.assign(1.9834341, )
paddle.assign(Tensor([3],"float32"), )
paddle.assign(Tensor([16, 1, 1],"float32"), )
paddle.assign(list[3,], )
paddle.assign(list[64,], )
paddle.assign(Tensor([2, 20],"float32"), Tensor([2, 20],"float32"), )
paddle.assign(Tensor([3, 2],"float64"), )
paddle.assign(list[list[-32.0,-32.0,1.0,],list[-32.0,32.0,1.0,],list[32.0,32.0,1.0,],list[32.0,-32.0,1.0,],], )
paddle.assign(Tensor([5, 3],"float32"), )
paddle.assign(Tensor([3],"float32"), Tensor([3],"float32"), )
paddle.assign(x=Tensor([3, 4],"int32"), )
paddle.assign(0.9807642, )
paddle.assign(Tensor([2, 8],"int64"), )
paddle.assign(Tensor([2, 2],"float16"), )
paddle.assign(list[0,2,], )
paddle.assign(100, )
paddle.assign(Tensor([64, 1],"float32"), )
paddle.assign(Tensor([2, 3],"float32"), )
paddle.assign(x=list[list[3.1,2.1,2.2,],list[-1.0,-2.0,-2.2,],], )
paddle.assign(., Tensor([],"float32"), )
paddle.assign(6, )
paddle.assign(Tensor([2, 2],"int64"), Tensor([2, 2],"int64"), )
paddle.assign(1.659848, Tensor([],"float32"), )
paddle.assign(0.05, Tensor([1],"float32"), )
paddle.assign(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.assign(Tensor([10],"float32"), Tensor([10],"float32"), )
paddle.assign(Tensor([1, 1, 1, 9],"float32"), Tensor([1, 1, 1, 9],"float32"), )
paddle.assign(Tensor([18],"float32"), Tensor([18],"float32"), )
paddle.assign(Tensor([1, 3, 3, 5],"float32"), )
paddle.assign(0, )
paddle.assign(5., Tensor([],"float32"), )
paddle.assign(Tensor([5],"float32"), )
paddle.assign(x=Tensor([3, 4],"float64"), )
paddle.assign(0.1, )
paddle.assign(Tensor([1],"bool"), Tensor([1],"bool"), )
paddle.assign(0.005, Tensor([1],"float32"), )
paddle.assign(Tensor([2, 3],"float64"), )
paddle.assign(list[1,], )
paddle.assign(1.7355332, )
paddle.assign(Tensor([2],"float32"), )
paddle.assign(3., )
paddle.assign(list[3,3,], )
paddle.assign(Tensor([1],"int32"), Tensor([1],"int32"), )
paddle.assign(Tensor([48],"float32"), Tensor([48],"float32"), )
paddle.assign(0.04380856, Tensor([1],"float32"), )
paddle.assign(0.22594, Tensor([],"float32"), )
paddle.assign(5, )
paddle.assign(True, )
paddle.assign(0., Tensor([1],"float32"), )
paddle.assign(Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), )
paddle.assign(x=42, )
paddle.assign(x=Tensor([3, 3],"float64"), )
paddle.assign(Tensor([2, 3, 3, 2],"float64"), )
paddle.assign(Tensor([3, 5],"float32"), Tensor([3, 5],"float32"), )
paddle.assign(Tensor([3, 4],"float64"), )
paddle.assign(Tensor([4, 4],"float64"), )
paddle.assign(0.5214225, Tensor([],"float32"), )
paddle.assign(Tensor([2, 2],"float64"), )
paddle.assign(8, )
paddle.assign(Tensor([6],"float32"), Tensor([6],"float32"), )
paddle.assign(Tensor([5, 4, 2],"float32"), Tensor([5, 4, 2],"float32"), )
paddle.atan(Tensor([10, 20, 1],"float32"), )
paddle.atan(Tensor([3],"float32"), name="Cauchy_cdf", )
paddle.atan(Tensor([1],"float64"), name="Cauchy_cdf", )
paddle.atan(Tensor([],"float32"), name="Cauchy_cdf", )
paddle.atan(x=Tensor([3, 3, 3],"float64"), )
paddle.atan(Tensor([],"float64"), name="Cauchy_cdf", )
paddle.atan(Tensor([],"float32"), )
paddle.atan(Tensor([1],"float32"), name="Cauchy_cdf", )
paddle.atan(x=Tensor([3, 3, 3],"float32"), )
paddle.atan2(Tensor([11, 17],"float64"), Tensor([11, 17],"float64"), )
paddle.atan2(x=Tensor([6, 6, 6],"float64"), y=Tensor([6, 6, 6],"float64"), )
paddle.atan2(Tensor([],"float64"), Tensor([5, 17, 6],"float64"), )
paddle.atan2(Tensor([],"float32"), Tensor([],"float32"), )
paddle.atan2(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.atan2(x=Tensor([6, 6],"float32"), y=Tensor([6, 6],"float32"), )
paddle.atan2(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.atan2(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.atan2(x=Tensor([6, 6],"float64"), y=Tensor([6, 6],"float64"), )
paddle.atan2(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.atan2(x=Tensor([6, 6],"float16"), y=Tensor([6, 6],"float16"), )
paddle.atan2(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.atan2(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.atanh(Tensor([10, 20, 1],"float32"), )
paddle.atanh(Tensor([],"float32"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_1d(Tensor([],"float16"), )
paddle.atleast_1d(Tensor([1, 2],"float64"), Tensor([3],"float64"), )
paddle.atleast_1d(Tensor([1],"float64"), )
paddle.atleast_1d(Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), )
paddle.atleast_1d(Tensor([5],"float64"), Tensor([5],"float64"), Tensor([5],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1],"float64"), Tensor([2],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([2, 1],"float64"), Tensor([3],"float64"), )
paddle.atleast_1d(Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.atleast_1d(Tensor([2, 3, 1],"float64"), Tensor([1, 3],"float64"), )
paddle.atleast_1d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_1d(Tensor([],"float32"), )
paddle.atleast_1d(Tensor([3, 2],"float64"), )
paddle.atleast_1d(Tensor([],"float64"), )
paddle.atleast_1d(Tensor([1, 1],"float64"), )
paddle.atleast_1d(Tensor([2],"float32"), Tensor([2],"float64"), )
paddle.atleast_1d(Tensor([2, 3, 1],"float64"), Tensor([3],"float64"), )
paddle.atleast_1d(Tensor([],"int32"), )
paddle.atleast_1d(Tensor([],"int64"), )
paddle.atleast_1d(Tensor([1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([],"float64"), Tensor([],"float64"), Tensor([],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_1d(Tensor([1, 1, 1],"float64"), Tensor([1, 2],"float64"), )
paddle.atleast_1d(Tensor([1],"float64"), Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.atleast_1d(Tensor([],"float64"), Tensor([2],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_2d(Tensor([1, 2],"float64"), Tensor([3],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1],"float64"), Tensor([1, 2],"float64"), )
paddle.atleast_2d(Tensor([1],"float64"), )
paddle.atleast_2d(Tensor([2, 3, 1],"float64"), Tensor([1, 3],"float64"), )
paddle.atleast_2d(Tensor([],"float64"), Tensor([2],"float64"), )
paddle.atleast_2d(Tensor([2],"float64"), Tensor([1, 2],"float64"), )
paddle.atleast_2d(Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.atleast_2d(Tensor([5],"float64"), Tensor([5],"float64"), Tensor([5],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([2, 3, 1],"float64"), Tensor([3],"float64"), )
paddle.atleast_2d(Tensor([],"float64"), Tensor([],"float64"), Tensor([],"float64"), )
paddle.atleast_2d(Tensor([],"float32"), )
paddle.atleast_2d(Tensor([],"int64"), )
paddle.atleast_2d(Tensor([1, 1, 1],"float64"), Tensor([2],"float64"), )
paddle.atleast_2d(Tensor([3, 2],"float64"), )
paddle.atleast_2d(Tensor([1],"float64"), Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.atleast_2d(Tensor([2, 1],"float64"), Tensor([3],"float64"), )
paddle.atleast_2d(Tensor([3, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([],"int32"), )
paddle.atleast_2d(Tensor([1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), )
paddle.atleast_2d(Tensor([],"float64"), )
paddle.atleast_2d(Tensor([1, 1],"float64"), )
paddle.atleast_2d(Tensor([2],"float32"), Tensor([2],"float64"), )
paddle.atleast_2d(Tensor([],"float16"), )
paddle.atleast_2d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_2d(Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2, 5],"float64"), )
paddle.atleast_3d(Tensor([],"float64"), Tensor([],"float64"), Tensor([],"float64"), )
paddle.atleast_3d(Tensor([],"int32"), )
paddle.atleast_3d(Tensor([1],"float64"), Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.atleast_3d(Tensor([1, 1],"float64"), )
paddle.atleast_3d(Tensor([],"float64"), )
paddle.atleast_3d(Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), Tensor([3, 2],"float64"), )
paddle.atleast_3d(Tensor([2, 3, 1],"float64"), Tensor([3],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2],"float64"), )
paddle.atleast_3d(Tensor([],"float16"), )
paddle.atleast_3d(Tensor([5],"float64"), Tensor([5],"float64"), Tensor([5],"float64"), )
paddle.atleast_3d(Tensor([2],"float64"), Tensor([1, 2],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1],"float64"), Tensor([1, 2],"float64"), )
paddle.atleast_3d(Tensor([2],"float64"), Tensor([1, 2, 1],"float64"), )
paddle.atleast_3d(Tensor([2, 3, 1],"float64"), Tensor([1, 3],"float64"), )
paddle.atleast_3d(Tensor([],"int64"), )
paddle.atleast_3d(Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1, 2],"float64"), Tensor([3],"float64"), )
paddle.atleast_3d(Tensor([2],"float32"), Tensor([2],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([1],"float64"), )
paddle.atleast_3d(Tensor([2, 1],"float64"), Tensor([3],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([],"float64"), Tensor([2],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1],"float64"), Tensor([2],"float64"), )
paddle.atleast_3d(Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), Tensor([1, 1, 1],"float64"), )
paddle.atleast_3d(Tensor([],"float32"), )
paddle.atleast_3d(Tensor([3, 2],"float64"), )
paddle.atleast_3d(Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), Tensor([1, 1],"float64"), )
paddle.atleast_3d(Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), Tensor([3, 4, 2],"float64"), )
paddle.audio.functional.get_window("blackman", 1, )
paddle.audio.functional.get_window("blackman", 512, )
paddle.audio.functional.get_window("bartlett", 512, )
paddle.audio.functional.get_window(tuple("gaussian",7,), 512, False, )
paddle.audio.functional.get_window("hann", win_length=1024, fftbins=True, )
paddle.audio.functional.get_window("triang", 1, )
paddle.audio.functional.get_window("hamming", 1, )
paddle.audio.functional.get_window("nuttall", 1, )
paddle.audio.functional.get_window("hann", 512, )
paddle.audio.functional.get_window(tuple("exponential",None,1,), 512, False, )
paddle.audio.functional.get_window("bartlett", 1, )
paddle.audio.functional.get_window("hann", 1, )
paddle.audio.functional.get_window(tuple("gaussian",7,), 1, False, )
paddle.audio.functional.get_window(tuple("kaiser",14.0,), 512, )
paddle.audio.functional.get_window("nuttall", 512, )
paddle.audio.functional.get_window("bohman", 1, )
paddle.audio.functional.get_window("hamming", 512, )
paddle.audio.functional.get_window(tuple("kaiser",14.0,), 1, )
paddle.audio.functional.get_window("taylor", 1, )
paddle.audio.functional.get_window(tuple("exponential",None,1,), 1, False, )
paddle.audio.functional.get_window("cosine", 512, )
paddle.audio.functional.get_window("bohman", 512, )
paddle.audio.functional.get_window(tuple("general_gaussian",1,7,), 512, False, )
paddle.audio.functional.get_window(tuple("general_gaussian",1,7,), 1, False, )
paddle.audio.functional.get_window("cosine", 1, )
paddle.bincount(Tensor([8],"int64"), None, minlength=Tensor([],"int64"), )
paddle.bincount(Tensor([1],"int64"), minlength=123, )
paddle.bincount(Tensor([8],"int64"), Tensor([8],"float64"), minlength=Tensor([],"int64"), )
paddle.bincount(Tensor([1],"int64"), minlength=256000, )
paddle.bincount(Tensor([7],"int64"), )
paddle.bincount(Tensor([16],"int32"), weights=Tensor([16],"float32"), )
paddle.bincount(x=Tensor([10],"int32"), )
paddle.bincount(Tensor([1],"int64"), minlength=32000, )
paddle.bincount(Tensor([20],"int64"), minlength=Tensor([1],"int32"), )
paddle.bincount(Tensor([1],"int64"), minlength=100, )
paddle.bincount(Tensor([1],"int64"), minlength=99, )
paddle.bincount(Tensor([4],"int64"), weights=Tensor([4],"float64"), )
paddle.bincount(x=Tensor([10],"int32"), minlength=4, )
paddle.bincount(x=Tensor([4],"int64"), )
paddle.bincount(x=Tensor([10],"int32"), weights=Tensor([10],"int32"), )
paddle.bincount(x=Tensor([10],"int32"), minlength=Tensor([1],"int64"), )
paddle.bincount(Tensor([4],"int64"), None, minlength=Tensor([],"int64"), )
paddle.bincount(x=Tensor([4],"int32"), )
paddle.bincount(Tensor([1],"int64"), minlength=256, )
paddle.bincount(Tensor([1],"int64"), minlength=4, )
paddle.bincount(Tensor([4],"int64"), Tensor([4],"float64"), minlength=Tensor([],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_and(Tensor([2, 3, 5],"int32"), Tensor([2, 3, 5],"int32"), )
paddle.bitwise_and(Tensor([3],"int32"), Tensor([3],"int32"), )
paddle.bitwise_and(Tensor([2, 3, 1, 5],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), )
paddle.bitwise_and(Tensor([3, 4, 1],"int32"), Tensor([3, 4, 1],"int32"), )
paddle.bitwise_invert(Tensor([2, 3, 4, 5],"int32"), )
paddle.bitwise_invert(Tensor([3, 4, 1],"int32"), )
paddle.bitwise_left_shift(Tensor([3, 4, 5],"int32"), Tensor([3, 4, 5],"int32"), False, )
paddle.bitwise_left_shift(Tensor([3, 4, 5],"int32"), Tensor([3, 4, 5],"int32"), True, )
paddle.bitwise_left_shift(Tensor([1],"int16"), Tensor([1],"int16"), False, )
paddle.bitwise_left_shift(Tensor([1],"uint8"), Tensor([1],"uint8"), )
paddle.bitwise_left_shift(Tensor([1],"uint8"), Tensor([1],"uint8"), False, )
paddle.bitwise_left_shift(Tensor([1],"int16"), Tensor([1],"int16"), )
paddle.bitwise_not(Tensor([],"int64"), )
paddle.bitwise_not(Tensor([3, 4, 1],"int64"), out=Tensor([3, 4, 1],"int64"), )
paddle.bitwise_not(Tensor([2, 3, 5],"int32"), )
paddle.bitwise_not(Tensor([3, 4, 1],"int32"), )
paddle.bitwise_not(Tensor([3],"int32"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_or(Tensor([2, 3, 5],"int32"), Tensor([2, 3, 5],"int32"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), )
paddle.bitwise_or(Tensor([2, 3, 1, 5],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.bitwise_or(Tensor([3],"int32"), Tensor([3],"int32"), )
paddle.bitwise_or(Tensor([3, 4, 1],"int32"), Tensor([3, 4, 1],"int32"), )
paddle.bitwise_right_shift(Tensor([1],"int8"), Tensor([1],"int8"), False, )
paddle.bitwise_right_shift(Tensor([1],"uint8"), Tensor([1],"uint8"), )
paddle.bitwise_right_shift(Tensor([1],"int8"), Tensor([1],"int8"), )
paddle.bitwise_right_shift(Tensor([1],"uint8"), Tensor([1],"uint8"), False, )
paddle.bitwise_xor(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), out=Tensor([2, 3, 4, 5],"int64"), )
paddle.bitwise_xor(Tensor([3, 4, 1],"int32"), Tensor([3, 4, 1],"int32"), )
paddle.bitwise_xor(Tensor([3, 4, 1],"int64"), Tensor([2, 3, 1, 5],"int64"), )
paddle.bitwise_xor(Tensor([2, 3, 1, 5],"int64"), Tensor([3, 4, 1],"int64"), )
paddle.bitwise_xor(Tensor([3],"int32"), Tensor([3],"int32"), )
paddle.bitwise_xor(Tensor([2, 3, 5],"int32"), Tensor([2, 3, 5],"int32"), )
paddle.bmm(Tensor([4, 1, 23],"float32"), Tensor([4, 23, 8],"float32"), )
paddle.bmm(Tensor([4, 1, 4],"float32"), Tensor([4, 4, 6],"float32"), )
paddle.bmm(Tensor([4, 10, 4],"float32"), Tensor([4, 4, 10],"float32"), )
paddle.bmm(Tensor([4, 1, 26],"float32"), Tensor([4, 26, 8],"float32"), )
paddle.bmm(Tensor([4, 1, 7],"float32"), Tensor([4, 7, 4],"float32"), )
paddle.bmm(Tensor([25, 4, 2],"float32"), Tensor([25, 2, 2],"float32"), )
paddle.bmm(Tensor([8, 5, 4],"float32"), Tensor([8, 4, 5],"float32"), )
paddle.bmm(Tensor([12, 1, 7],"float32"), Tensor([12, 7, 4],"float32"), )
paddle.bmm(Tensor([8, 5, 5],"float32"), Tensor([8, 5, 4],"float32"), )
paddle.bmm(Tensor([4, 5, 4],"float32"), Tensor([4, 4, 5],"float32"), )
paddle.bmm(Tensor([12, 1, 6],"float32"), Tensor([12, 6, 4],"float32"), )
paddle.bmm(Tensor([8, 1, 7],"float32"), Tensor([8, 7, 4],"float32"), )
paddle.bmm(Tensor([8, 1, 4],"float32"), Tensor([8, 4, 7],"float32"), )
paddle.bmm(Tensor([4, 10, 10],"float32"), Tensor([4, 10, 4],"float32"), )
paddle.bmm(Tensor([4, 1, 24],"float32"), Tensor([4, 24, 8],"float32"), )
paddle.bmm(Tensor([4, 5, 5],"float32"), Tensor([4, 5, 4],"float32"), )
paddle.bmm(Tensor([12, 5, 5],"float32"), Tensor([12, 5, 4],"float32"), )
paddle.bmm(Tensor([12, 1, 4],"float32"), Tensor([12, 4, 7],"float32"), )
paddle.bmm(Tensor([12, 1, 4],"float32"), Tensor([12, 4, 6],"float32"), )
paddle.bmm(Tensor([8, 1, 6],"float32"), Tensor([8, 6, 4],"float32"), )
paddle.bmm(Tensor([4, 1, 8],"float32"), Tensor([4, 8, 24],"float32"), )
paddle.bmm(Tensor([4, 1, 6],"float32"), Tensor([4, 6, 4],"float32"), )
paddle.bmm(Tensor([8, 1, 4],"float32"), Tensor([8, 4, 6],"float32"), )
paddle.bmm(Tensor([4, 1, 4],"float32"), Tensor([4, 4, 7],"float32"), )
paddle.bmm(Tensor([4, 1, 8],"float32"), Tensor([4, 8, 26],"float32"), )
paddle.bmm(Tensor([4, 1, 8],"float32"), Tensor([4, 8, 23],"float32"), )
paddle.bmm(Tensor([4, 1, 8],"float32"), Tensor([4, 8, 25],"float32"), )
paddle.bmm(Tensor([4, 1, 25],"float32"), Tensor([4, 25, 8],"float32"), )
paddle.bmm(Tensor([12, 5, 4],"float32"), Tensor([12, 4, 5],"float32"), )
paddle.bmm(x=Tensor([2, 2, 3],"float64"), y=Tensor([2, 3, 2],"float64"), )
paddle.bmm(Tensor([2, 2, 3],"float64"), Tensor([2, 3, 2],"float64"), )
paddle.bmm(x=Tensor([2, 2, 3],"float32"), y=Tensor([2, 3, 2],"float32"), )
paddle.broadcast_shape(list[2,678,], list[2,678,], )
paddle.broadcast_shape(list[4,2,2577,], list[4,2,2577,], )
paddle.broadcast_shape(list[10,8,84,73,], list[], )
paddle.broadcast_shape(list[10,8,65,105,], list[], )
paddle.broadcast_shape(list[3,8,104,104,], list[], )
paddle.broadcast_shape(list[10,8,138,89,], list[10,1,138,89,], )
paddle.broadcast_shape(list[10,8,3,33,], list[10,1,3,33,], )
paddle.broadcast_shape(list[1,8,41,113,], list[], )
paddle.broadcast_shape(list[1,1439,], list[1,1439,], )
paddle.broadcast_shape(list[7,8,133,153,], list[], )
paddle.broadcast_shape(list[3,8,156,169,], list[], )
paddle.broadcast_shape(list[1,8,168,168,], list[], )
paddle.broadcast_shape(list[8,8,148,113,], list[], )
paddle.broadcast_shape(list[6,8,133,133,], list[1,1,133,133,], )
paddle.broadcast_shape(list[2,132,12096,], list[2,132,12096,], )
paddle.broadcast_shape(list[13,44520,], list[13,44520,], )
paddle.broadcast_shape(list[1,8,129,229,], list[1,1,129,229,], )
paddle.broadcast_shape(list[1,8,83,385,], list[1,1,83,385,], )
paddle.broadcast_shape(list[6,8,34,97,], list[], )
paddle.broadcast_shape(list[7,8,160,160,], list[7,1,160,160,], )
paddle.broadcast_shape(list[30,8,68,68,], list[1,1,68,68,], )
paddle.broadcast_shape(list[1,8,164,241,], list[], )
paddle.broadcast_shape(list[10,8,93,93,], list[10,1,93,93,], )
paddle.broadcast_shape(list[1,8,158,85,], list[], )
paddle.broadcast_shape(list[9,8,16,53,], list[9,1,16,53,], )
paddle.broadcast_shape(list[30,8,63,33,], list[30,1,63,33,], )
paddle.broadcast_shape(list[6,8,26,45,], list[], )
paddle.broadcast_shape(list[2,1794,], list[2,1794,], )
paddle.broadcast_shape(list[1,8,40,217,], list[], )
paddle.broadcast_shape(list[2,126,6804,], list[2,126,1,], )
paddle.broadcast_shape(list[3,8,48,48,], list[3,1,48,48,], )
paddle.broadcast_shape(list[9,8,83,89,], list[9,1,83,89,], )
paddle.broadcast_shape(list[1,], list[1,1,1,15,], )
paddle.broadcast_shape(list[2,9,6069,], list[2,9,6069,], )
paddle.broadcast_shape(list[10,8,46,97,], list[10,1,46,97,], )
paddle.broadcast_shape(list[10,8,123,49,], list[], )
paddle.broadcast_shape(list[10,1595,], list[10,1595,], )
paddle.broadcast_shape(list[10,8,56,57,], list[], )
paddle.broadcast_shape(list[1,], list[1,1,1,39,], )
paddle.broadcast_shape(list[2,115,6069,], list[2,115,1,], )
paddle.broadcast_shape(list[1,8,118,261,], list[], )
paddle.broadcast_shape(list[1,8,32,145,], list[], )
paddle.broadcast_shape(list[5,8,30,65,], list[5,1,30,65,], )
paddle.broadcast_shape(list[2,8,92,161,], list[], )
paddle.broadcast_shape(list[286,286,], list[286,286,], )
paddle.broadcast_shape(list[4,8,10,10,], list[4,8,10,10,], )
paddle.broadcast_shape(list[2,67,9261,], list[2,67,9261,], )
paddle.broadcast_shape(list[20,59295,], list[20,59295,], )
paddle.broadcast_shape(list[10,8,4,4,], list[1,1,4,4,], )
paddle.broadcast_shape(list[1,8,71,113,], list[], )
paddle.broadcast_shape(list[1,8,182,241,], list[1,1,182,241,], )
paddle.broadcast_shape(list[2,8,105,121,], list[2,1,105,121,], )
paddle.broadcast_shape(list[11008,], list[11008,], )
paddle.broadcast_shape(list[1,1958,], list[1,1958,], )
paddle.broadcast_shape(list[1,8,40,145,], list[], )
paddle.broadcast_shape(list[3,8,28,169,], list[3,1,28,169,], )
paddle.broadcast_shape(list[10,8,1,21,], list[10,1,1,21,], )
paddle.broadcast_shape(list[2,8,139,181,], list[2,1,139,181,], )
paddle.broadcast_shape(list[10,8,60,65,], list[10,1,60,65,], )
paddle.broadcast_shape(list[4,8,132,61,], list[4,1,132,61,], )
paddle.broadcast_shape(list[4,8,14,14,], list[], )
paddle.broadcast_shape(list[4,8,79,61,], list[], )
paddle.broadcast_shape(list[6,8,141,141,], list[1,1,141,141,], )
paddle.broadcast_shape(list[7,8,79,153,], list[], )
paddle.broadcast_shape(list[8,8,105,113,], list[], )
paddle.broadcast_shape(list[32,208692,], list[32,208692,], )
paddle.broadcast_shape(list[4,270096,], list[4,270096,], )
paddle.broadcast_shape(list[1,8,175,385,], list[], )
paddle.broadcast_shape(list[1,1817,], list[1,1817,], )
paddle.broadcast_shape(list[1,8,45,261,], list[], )
paddle.broadcast_shape(list[16,10,2541,], list[16,10,2541,], )
paddle.broadcast_shape(list[5,2,], list[5,1,], )
paddle.broadcast_shape(list[4,8,75,61,], list[4,1,75,61,], )
paddle.broadcast_shape(list[1,8,58,113,], list[1,1,58,113,], )
paddle.broadcast_shape(list[30,8,50,50,], list[1,1,50,50,], )
paddle.broadcast_shape(list[16,45750,], list[16,45750,], )
paddle.broadcast_shape(list[7,8,89,89,], list[], )
paddle.broadcast_shape(list[1338,], list[1338,], )
paddle.broadcast_shape(list[1,8,67,61,], list[1,1,67,61,], )
paddle.broadcast_shape(list[9,8,18,53,], list[9,1,18,53,], )
paddle.broadcast_shape(list[1442,], list[1442,], )
paddle.broadcast_shape(list[15,276210,], list[15,276210,], )
paddle.broadcast_shape(list[1,8,43,109,], list[1,1,43,109,], )
paddle.broadcast_shape(list[8,8,20,113,], list[8,1,20,113,], )
paddle.broadcast_shape(list[2,8,35,129,], list[2,1,35,129,], )
paddle.broadcast_shape(list[1,], list[2,1,1,253,], )
paddle.broadcast_shape(list[1,8,35,385,], list[], )
paddle.broadcast_shape(list[2,8,161,129,], list[2,1,161,129,], )
paddle.broadcast_shape(list[30,8,53,53,], list[], )
paddle.broadcast_shape(list[3,8,27,105,], list[3,1,27,105,], )
paddle.broadcast_shape(list[16,20,6804,], list[16,20,6804,], )
paddle.broadcast_shape(list[2,54000,], list[2,54000,], )
paddle.broadcast_shape(list[3,8,34,169,], list[3,1,34,169,], )
paddle.broadcast_shape(list[6,8,87,57,], list[], )
paddle.broadcast_shape(list[1,25,52500,], list[1,25,52500,], )
paddle.broadcast_shape(list[10,8,42,65,], list[10,1,42,65,], )
paddle.broadcast_shape(list[1,8,34,145,], list[], )
paddle.broadcast_shape(list[1004,], list[1004,], )
paddle.broadcast_shape(list[1,8,146,169,], list[], )
paddle.broadcast_shape(list[1,8,44,261,], list[], )
paddle.broadcast_shape(list[1,806,], list[1,806,], )
paddle.broadcast_shape(list[6,8,105,105,], list[1,1,105,105,], )
paddle.broadcast_shape(list[2,39,4116,], list[2,39,1,], )
paddle.broadcast_shape(list[1,8,153,229,], list[], )
paddle.broadcast_shape(list[6,8,144,97,], list[6,1,144,97,], )
paddle.broadcast_shape(list[2,8,23,41,], list[], )
paddle.broadcast_shape(list[1,8,76,241,], list[1,1,76,241,], )
paddle.broadcast_shape(list[2,38,4116,], list[2,38,1,], )
paddle.broadcast_shape(list[14,67890,], list[14,67890,], )
paddle.broadcast_shape(list[10,8,163,137,], list[10,1,163,137,], )
paddle.broadcast_shape(list[5,8,64,145,], list[5,1,64,145,], )
paddle.broadcast_shape(list[1,18,56784,], list[1,18,1,], )
paddle.broadcast_shape(list[7,51840,], list[7,51840,], )
paddle.broadcast_shape(list[6,291555,], list[6,291555,], )
paddle.broadcast_shape(list[10,8,51,137,], list[], )
paddle.broadcast_shape(list[10,48000,], list[10,48000,], )
paddle.broadcast_shape(list[4,8,139,139,], list[], )
paddle.broadcast_shape(list[5,245520,], list[5,245520,], )
paddle.broadcast_shape(list[14,313038,], list[14,313038,], )
paddle.broadcast_shape(list[2,4,2,], list[2,4,2,], )
paddle.broadcast_shape(list[4,8,4,25,], list[], )
paddle.broadcast_shape(list[1,33,44436,], list[1,33,1,], )
paddle.broadcast_shape(list[4,269586,], list[4,269586,], )
paddle.broadcast_shape(list[1,879,], list[1,879,], )
paddle.broadcast_shape(list[1,], list[2,1,1,119,], )
paddle.broadcast_shape(list[10,8,62,89,], list[10,1,62,89,], )
paddle.broadcast_shape(list[6,8,18,97,], list[], )
paddle.broadcast_shape(list[10,8,25,65,], list[10,1,25,65,], )
paddle.broadcast_shape(list[9,54000,], list[9,54000,], )
paddle.broadcast_shape(list[8,8,188,188,], list[], )
paddle.broadcast_shape(list[1,21,52500,], list[1,21,52500,], )
paddle.broadcast_shape(list[8,8,56,113,], list[8,1,56,113,], )
paddle.broadcast_shape(list[1,11,44436,], list[1,11,1,], )
paddle.broadcast_shape(list[2,43,3024,], list[2,43,1,], )
paddle.broadcast_shape(list[10,8,107,107,], list[], )
paddle.broadcast_shape(list[1,8,18,113,], list[], )
paddle.broadcast_shape(list[1,8,90,90,], list[], )
paddle.broadcast_shape(list[30,8,83,49,], list[30,1,83,49,], )
paddle.broadcast_shape(list[1,8,66,61,], list[1,1,66,61,], )
paddle.broadcast_shape(list[1,8,20,217,], list[], )
paddle.broadcast_shape(list[16,236616,], list[16,236616,], )
paddle.broadcast_shape(list[2,8,45,45,], list[], )
paddle.broadcast_shape(list[3,763,], list[3,763,], )
paddle.broadcast_shape(list[1,1698,], list[1,1698,], )
paddle.broadcast_shape(list[2,8,71,85,], list[2,1,71,85,], )
paddle.broadcast_shape(list[8,8,85,121,], list[8,1,85,121,], )
paddle.broadcast_shape(list[1,40,44436,], list[1,40,44436,], )
paddle.broadcast_shape(list[10,8,110,129,], list[], )
paddle.broadcast_shape(list[2,50,2541,], list[2,50,1,], )
paddle.broadcast_shape(list[10,8,151,89,], list[10,1,151,89,], )
paddle.broadcast_shape(list[1,8,110,229,], list[1,1,110,229,], )
paddle.broadcast_shape(list[5,8,108,145,], list[], )
paddle.broadcast_shape(list[2,8,106,121,], list[2,1,106,121,], )
paddle.broadcast_shape(list[2,8,109,129,], list[2,1,109,129,], )
paddle.broadcast_shape(list[2,131,2541,], list[2,131,2541,], )
paddle.broadcast_shape(list[1,8,49,157,], list[1,1,49,157,], )
paddle.broadcast_shape(list[1,8,34,109,], list[], )
paddle.broadcast_shape(list[30,8,84,25,], list[], )
paddle.broadcast_shape(list[9,8,25,89,], list[], )
paddle.broadcast_shape(list[1,15,37044,], list[1,15,1,], )
paddle.broadcast_shape(list[3,8,66,66,], list[1,1,66,66,], )
paddle.broadcast_shape(list[1,8,90,65,], list[], )
paddle.broadcast_shape(list[30,8,52,17,], list[], )
paddle.broadcast_shape(list[10,8,56,65,], list[10,1,56,65,], )
paddle.broadcast_shape(list[1,8,62,61,], list[], )
paddle.broadcast_shape(list[1,8,98,217,], list[], )
paddle.broadcast_shape(list[7,1528,], list[7,1528,], )
paddle.broadcast_shape(list[2,23,2541,], list[2,23,1,], )
paddle.broadcast_shape(list[8,8,107,107,], list[1,1,107,107,], )
paddle.broadcast_shape(list[8,8,228,113,], list[8,1,228,113,], )
paddle.broadcast_shape(list[1,], list[2,1,1,287,], )
paddle.broadcast_shape(list[1,33,75600,], list[1,33,1,], )
paddle.broadcast_shape(list[10,8,1,9,], list[], )
paddle.broadcast_shape(list[1,8,86,61,], list[1,1,86,61,], )
paddle.broadcast_shape(list[9,8,24,53,], list[9,1,24,53,], )
paddle.broadcast_shape(list[838,], list[838,], )
paddle.broadcast_shape(list[1,349155,], list[1,349155,], )
paddle.broadcast_shape(list[2,8,35,35,], list[1,1,35,35,], )
paddle.broadcast_shape(list[1,8,33,157,], list[], )
paddle.broadcast_shape(list[2,35,11109,], list[2,35,11109,], )
paddle.broadcast_shape(list[1,8,70,145,], list[], )
paddle.broadcast_shape(list[10,8,87,89,], list[], )
paddle.broadcast_shape(list[9,8,116,116,], list[], )
paddle.broadcast_shape(list[30,8,85,33,], list[], )
paddle.broadcast_shape(list[10,8,17,105,], list[], )
paddle.broadcast_shape(list[1,8,75,229,], list[1,1,75,229,], )
paddle.broadcast_shape(list[30,8,154,65,], list[30,1,154,65,], )
paddle.broadcast_shape(list[10,8,61,81,], list[10,1,61,81,], )
paddle.broadcast_shape(list[30,8,200,200,], list[1,1,200,200,], )
paddle.broadcast_shape(list[10,63840,], list[10,63840,], )
paddle.broadcast_shape(list[2,8,75,85,], list[2,1,75,85,], )
paddle.broadcast_shape(list[6,211038,], list[6,211038,], )
paddle.broadcast_shape(list[7,8,17,49,], list[7,1,17,49,], )
paddle.broadcast_shape(list[1,8,16,73,], list[1,1,16,73,], )
paddle.broadcast_shape(list[8,8,228,228,], list[1,1,228,228,], )
paddle.broadcast_shape(list[3,8,28,28,], list[], )
paddle.broadcast_shape(list[1,1189,], list[1,1189,], )
paddle.broadcast_shape(list[10,8,111,105,], list[], )
paddle.broadcast_shape(list[7,8,30,30,], list[], )
paddle.broadcast_shape(list[30,8,91,29,], list[], )
paddle.broadcast_shape(list[2,12,2100,], list[2,12,2100,], )
paddle.broadcast_shape(list[969,], list[969,], )
paddle.broadcast_shape(list[4,398487,], list[4,398487,], )
paddle.broadcast_shape(list[4,8,175,175,], list[], )
paddle.broadcast_shape(list[2,53,8400,], list[2,53,1,], )
paddle.broadcast_shape(list[5,8,74,74,], list[], )
paddle.broadcast_shape(list[9,8,26,26,], list[1,1,26,26,], )
paddle.broadcast_shape(list[4,313038,], list[4,313038,], )
paddle.broadcast_shape(list[2,56,4116,], list[2,56,4116,], )
paddle.broadcast_shape(list[1,8,153,229,], list[1,1,153,229,], )
paddle.broadcast_shape(list[9,8,84,84,], list[9,1,84,84,], )
paddle.broadcast_shape(list[4,45,11109,], list[4,45,11109,], )
paddle.broadcast_shape(list[6,8,22,22,], list[6,1,22,22,], )
paddle.broadcast_shape(list[10,8,98,73,], list[], )
paddle.broadcast_shape(list[2,66,10164,], list[2,66,10164,], )
paddle.broadcast_shape(list[16,13,2541,], list[16,13,2541,], )
paddle.broadcast_shape(list[10,8,76,65,], list[], )
paddle.broadcast_shape(list[16,340176,], list[16,340176,], )
paddle.broadcast_shape(list[2,117,6069,], list[2,117,1,], )
paddle.broadcast_shape(list[1,8,69,157,], list[], )
paddle.broadcast_shape(list[3,8,59,59,], list[1,1,59,59,], )
paddle.broadcast_shape(list[1,8,34,229,], list[], )
paddle.broadcast_shape(list[26,214848,], list[26,214848,], )
paddle.broadcast_shape(list[10,8,19,29,], list[], )
paddle.broadcast_shape(list[10,8,2,89,], list[], )
paddle.broadcast_shape(list[1,], list[2,1,1,116,], )
paddle.broadcast_shape(list[21,50250,], list[21,50250,], )
paddle.broadcast_shape(list[1,8,61,385,], list[], )
paddle.broadcast_shape(list[2,28,4725,], list[2,28,4725,], )
paddle.broadcast_shape(list[8,31,8400,], list[8,31,8400,], )
paddle.broadcast_shape(list[9,8,107,107,], list[], )
paddle.broadcast_shape(list[1,8,198,198,], list[1,1,198,198,], )
paddle.broadcast_shape(list[8,8,152,121,], list[8,1,152,121,], )
paddle.broadcast_shape(list[1,608,], list[1,608,], )
paddle.broadcast_shape(list[1,1040,], list[1,1040,], )
paddle.broadcast_shape(list[1308,], list[1308,], )
paddle.broadcast_shape(list[10,8,93,105,], list[], )
paddle.broadcast_shape(list[8,8,89,89,], list[], )
paddle.broadcast_shape(list[6,8,31,45,], list[], )
paddle.broadcast_shape(list[2001,], list[2001,], )
paddle.broadcast_shape(list[6,8,44,97,], list[6,1,44,97,], )
paddle.broadcast_shape(list[5,8,67,65,], list[], )
paddle.broadcast_shape(list[6,8,87,87,], list[6,1,87,87,], )
paddle.broadcast_shape(list[1,8,49,49,], list[1,1,49,49,], )
paddle.broadcast_shape(list[2,2,3598,], list[2,2,3598,], )
paddle.broadcast_shape(list[29,1029,], list[29,1029,], )
paddle.broadcast_shape(list[10,8,54,81,], list[10,1,54,81,], )
paddle.broadcast_shape(list[1,8,71,69,], list[1,1,71,69,], )
paddle.broadcast_shape(list[5,8,49,33,], list[], )
paddle.broadcast_shape(list[2,36,6069,], list[2,36,6069,], )
paddle.broadcast_shape(list[12,208692,], list[12,208692,], )
paddle.broadcast_shape(list[476,476,], list[476,476,], )
paddle.broadcast_shape(list[13,1681,], list[13,1681,], )
paddle.broadcast_shape(list[3,8,134,134,], list[], )
paddle.broadcast_shape(list[10,8,4,41,], list[10,1,4,41,], )
paddle.broadcast_shape(list[6,8,12,57,], list[6,1,12,57,], )
paddle.broadcast_shape(list[3,8,39,105,], list[], )
paddle.broadcast_shape(list[1,78,56784,], list[1,78,56784,], )
paddle.broadcast_shape(list[6,8,170,170,], list[], )
paddle.broadcast_shape(list[8,11,9261,], list[8,11,9261,], )
paddle.broadcast_shape(list[1,8,46,73,], list[1,1,46,73,], )
paddle.broadcast_shape(list[6,8,21,45,], list[], )
paddle.broadcast_shape(list[1,8,33,169,], list[1,1,33,169,], )
paddle.broadcast_shape(list[7,8,171,171,], list[1,1,171,171,], )
paddle.broadcast_shape(list[3,8,41,169,], list[3,1,41,169,], )
paddle.broadcast_shape(list[3,1795,], list[3,1795,], )
paddle.broadcast_shape(list[8,8,50,121,], list[8,1,50,121,], )
paddle.broadcast_shape(list[7,8,161,161,], list[], )
paddle.broadcast_shape(list[7,8,39,39,], list[7,1,39,39,], )
paddle.broadcast_shape(list[16,25,8400,], list[16,25,8400,], )
paddle.broadcast_shape(list[6,8,165,57,], list[6,1,165,57,], )
paddle.broadcast_shape(list[9,8,20,20,], list[], )
paddle.broadcast_shape(list[16,12,7581,], list[16,12,7581,], )
paddle.broadcast_shape(list[30,8,181,181,], list[], )
paddle.broadcast_shape(list[1,8,191,261,], list[], )
paddle.broadcast_shape(list[1,72,37044,], list[1,72,1,], )
paddle.broadcast_shape(list[1,8,210,210,], list[], )
paddle.broadcast_shape(list[10,8,39,25,], list[], )
paddle.broadcast_shape(list[10,8,50,65,], list[], )
paddle.broadcast_shape(list[2,60,4116,], list[2,60,1,], )
paddle.broadcast_shape(list[2,132,12096,], list[2,132,1,], )
paddle.broadcast_shape(list[2,252195,], list[2,252195,], )
paddle.broadcast_shape(list[1,8,39,69,], list[1,1,39,69,], )
paddle.broadcast_shape(list[1,8,142,229,], list[], )
paddle.broadcast_shape(list[2,8,134,85,], list[], )
paddle.broadcast_shape(list[3,8,54,54,], list[], )
paddle.broadcast_shape(list[1,8,100,85,], list[], )
paddle.broadcast_shape(list[2,8,140,85,], list[2,1,140,85,], )
paddle.broadcast_shape(list[1224,], list[1224,], )
paddle.broadcast_shape(list[10,8,130,81,], list[], )
paddle.broadcast_shape(list[2,207,7581,], list[2,207,7581,], )
paddle.broadcast_shape(list[10,8,5,105,], list[10,1,5,105,], )
paddle.broadcast_shape(list[1,643,], list[1,643,], )
paddle.broadcast_shape(list[5,909,], list[5,909,], )
paddle.broadcast_shape(list[1,8,136,385,], list[], )
paddle.broadcast_shape(list[8,8,160,160,], list[1,1,160,160,], )
paddle.broadcast_shape(list[2,8,178,181,], list[2,1,178,181,], )
paddle.broadcast_shape(list[10,8,132,129,], list[10,1,132,129,], )
paddle.broadcast_shape(list[6,8,131,57,], list[], )
paddle.broadcast_shape(list[1,505,], list[1,505,], )
paddle.broadcast_shape(list[7,8,37,49,], list[7,1,37,49,], )
paddle.broadcast_shape(list[6,1,4,5,], list[2,1,5,], )
paddle.broadcast_shape(list[2,8,52,181,], list[2,1,52,181,], )
paddle.broadcast_shape(list[4,8,19,25,], list[], )
paddle.broadcast_shape(list[1,8,68,169,], list[1,1,68,169,], )
paddle.broadcast_shape(list[4,8,53,37,], list[], )
paddle.broadcast_shape(list[10,8,19,33,], list[], )
paddle.broadcast_shape(list[1,8,243,169,], list[1,1,243,169,], )
paddle.broadcast_shape(list[8,8,98,98,], list[8,1,98,98,], )
paddle.broadcast_shape(list[1,], list[1,1,1,52,], )
paddle.broadcast_shape(list[1,8,64,69,], list[], )
paddle.broadcast_shape(list[3,1087,], list[3,1087,], )
paddle.broadcast_shape(list[2,53,2100,], list[2,53,1,], )
paddle.broadcast_shape(list[1,8,20,109,], list[1,1,20,109,], )
paddle.broadcast_shape(list[1,8,92,69,], list[1,1,92,69,], )
paddle.broadcast_shape(list[4,64320,], list[4,64320,], )
paddle.broadcast_shape(list[2,45,12096,], list[2,45,12096,], )
paddle.broadcast_shape(list[34,2034,], list[34,2034,], )
paddle.broadcast_shape(list[165,165,], list[165,165,], )
paddle.broadcast_shape(list[7,8,126,126,], list[], )
paddle.broadcast_shape(list[3,8,163,163,], list[1,1,163,163,], )
paddle.broadcast_shape(list[1,11,27216,], list[1,11,1,], )
paddle.broadcast_shape(list[7,8,173,173,], list[7,1,173,173,], )
paddle.broadcast_shape(list[1,8,42,61,], list[], )
paddle.broadcast_shape(list[2,46230,], list[2,46230,], )
paddle.broadcast_shape(list[1,8,73,229,], list[], )
paddle.broadcast_shape(list[1,124,48384,], list[1,124,48384,], )
paddle.broadcast_shape(list[64,16,2125,], list[64,16,2125,], )
paddle.broadcast_shape(list[2,8,11,181,], list[], )
paddle.broadcast_shape(list[10,8,29,105,], list[], )
paddle.broadcast_shape(list[1,8,81,113,], list[1,1,81,113,], )
paddle.broadcast_shape(list[1,8,104,73,], list[], )
paddle.broadcast_shape(list[2,24,5376,], list[2,24,5376,], )
paddle.broadcast_shape(list[9,8,30,89,], list[], )
paddle.broadcast_shape(list[5,8,57,57,], list[5,1,57,57,], )
paddle.broadcast_shape(list[4,8,126,126,], list[], )
paddle.broadcast_shape(list[3,8,122,169,], list[], )
paddle.broadcast_shape(list[2,13,3549,], list[2,13,1,], )
paddle.broadcast_shape(list[8,8,87,87,], list[1,1,87,87,], )
paddle.broadcast_shape(list[10,8,43,29,], list[10,1,43,29,], )
paddle.broadcast_shape(list[1,1905,], list[1,1905,], )
paddle.broadcast_shape(list[9,260865,], list[9,260865,], )
paddle.broadcast_shape(list[30,8,125,81,], list[30,1,125,81,], )
paddle.broadcast_shape(list[1,17,27216,], list[1,17,27216,], )
paddle.broadcast_shape(list[2,57,11109,], list[2,57,11109,], )
paddle.broadcast_shape(list[2,177,4725,], list[2,177,1,], )
paddle.broadcast_shape(list[4,8,145,77,], list[], )
paddle.broadcast_shape(list[6,8,167,167,], list[], )
paddle.broadcast_shape(list[8,8,255,113,], list[8,1,255,113,], )
paddle.broadcast_shape(list[4,8,32,32,], list[4,1,32,32,], )
paddle.broadcast_shape(list[10,8,138,137,], list[], )
paddle.broadcast_shape(list[1,17,37044,], list[1,17,37044,], )
paddle.broadcast_shape(list[10,8,153,153,], list[10,1,153,153,], )
paddle.broadcast_shape(list[30,8,31,9,], list[], )
paddle.broadcast_shape(list[1,8,63,241,], list[1,1,63,241,], )
paddle.broadcast_shape(list[5,8,78,145,], list[], )
paddle.broadcast_shape(list[10,8,17,137,], list[], )
paddle.broadcast_shape(list[1,11,52500,], list[1,11,1,], )
paddle.broadcast_shape(list[1518,], list[1518,], )
paddle.broadcast_shape(list[2,8,36,129,], list[], )
paddle.broadcast_shape(list[3,8,50,21,], list[], )
paddle.broadcast_shape(list[2,948,], list[2,948,], )
paddle.broadcast_shape(list[10,8,129,97,], list[10,1,129,97,], )
paddle.broadcast_shape(list[2,15,6150,], list[2,15,6150,], )
paddle.broadcast_shape(list[1,63,30324,], list[1,63,30324,], )
paddle.broadcast_shape(list[30,8,67,67,], list[30,1,67,67,], )
paddle.broadcast_shape(list[1,245520,], list[1,245520,], )
paddle.broadcast_shape(list[10,8,140,97,], list[], )
paddle.broadcast_shape(list[1,36,37044,], list[1,36,37044,], )
paddle.broadcast_shape(list[8,8,195,195,], list[8,1,195,195,], )
paddle.broadcast_shape(list[4,1197,], list[4,1197,], )
paddle.broadcast_shape(list[9,8,108,53,], list[], )
paddle.broadcast_shape(list[1,1106,], list[1,1106,], )
paddle.broadcast_shape(list[8,8,163,163,], list[], )
paddle.broadcast_shape(list[1,1815,], list[1,1815,], )
paddle.broadcast_shape(list[1,8,105,105,], list[], )
paddle.broadcast_shape(list[1,526,], list[1,526,], )
paddle.broadcast_shape(list[2,13,10164,], list[2,13,1,], )
paddle.broadcast_shape(list[10,8,16,25,], list[], )
paddle.broadcast_shape(list[3,8,88,88,], list[1,1,88,88,], )
paddle.broadcast_shape(list[3,329205,], list[3,329205,], )
paddle.broadcast_shape(list[1,8,167,385,], list[1,1,167,385,], )
paddle.broadcast_shape(list[2,8,24,17,], list[2,1,24,17,], )
paddle.broadcast_shape(list[1,56,48384,], list[1,56,48384,], )
paddle.broadcast_shape(list[2,93,10164,], list[2,93,10164,], )
paddle.broadcast_shape(list[1,8,6,6,], list[], )
paddle.broadcast_shape(list[1,8,54,113,], list[1,1,54,113,], )
paddle.broadcast_shape(list[2,14,10164,], list[2,14,1,], )
paddle.broadcast_shape(list[2,8,136,136,], list[], )
paddle.broadcast_shape(list[2,1,3,], list[1,3,1,], )
paddle.broadcast_shape(list[13,242991,], list[13,242991,], )
paddle.broadcast_shape(list[30,8,95,57,], list[], )
paddle.broadcast_shape(list[1103,], list[1103,], )
paddle.broadcast_shape(list[1,825,], list[1,825,], )
paddle.broadcast_shape(list[2,108,7581,], list[2,108,7581,], )
paddle.broadcast_shape(list[20,235320,], list[20,235320,], )
paddle.broadcast_shape(list[10,8,92,92,], list[1,1,92,92,], )
paddle.broadcast_shape(list[2,8,5,57,], list[2,1,5,57,], )
paddle.broadcast_shape(list[9,8,29,89,], list[], )
paddle.broadcast_shape(list[1202,], list[1202,], )
paddle.broadcast_shape(list[8,8,182,113,], list[], )
paddle.broadcast_shape(list[6,8,167,57,], list[6,1,167,57,], )
paddle.broadcast_shape(list[1,8,106,229,], list[1,1,106,229,], )
paddle.broadcast_shape(list[4,8,109,109,], list[4,1,109,109,], )
paddle.broadcast_shape(list[2,60480,], list[2,60480,], )
paddle.broadcast_shape(list[2,13,9382,], list[2,13,9382,], )
paddle.broadcast_shape(list[16,19,10164,], list[16,19,10164,], )
paddle.broadcast_shape(list[2,573,], list[2,573,], )
paddle.broadcast_shape(list[16,16,3549,], list[16,16,3549,], )
paddle.broadcast_shape(list[5,8,85,85,], list[1,1,85,85,], )
paddle.broadcast_shape(list[8,844,], list[8,844,], )
paddle.broadcast_shape(list[8,8,236,113,], list[8,1,236,113,], )
paddle.broadcast_shape(list[10,8,37,29,], list[10,1,37,29,], )
paddle.broadcast_shape(list[3,8,135,169,], list[3,1,135,169,], )
paddle.broadcast_shape(list[3,8,32,105,], list[3,1,32,105,], )
paddle.broadcast_shape(list[1,8,62,145,], list[], )
paddle.broadcast_shape(list[15,53100,], list[15,53100,], )
paddle.broadcast_shape(list[8,8,79,113,], list[], )
paddle.broadcast_shape(list[2,8,25,181,], list[], )
paddle.broadcast_shape(list[4,68310,], list[4,68310,], )
paddle.broadcast_shape(list[7,8,17,153,], list[], )
paddle.broadcast_shape(list[9,8,85,85,], list[], )
paddle.broadcast_shape(list[2,8,9,85,], list[], )
paddle.broadcast_shape(list[1,8,2,85,], list[], )
paddle.broadcast_shape(list[1,8,22,241,], list[1,1,22,241,], )
paddle.broadcast_shape(list[1,8,34,113,], list[1,1,34,113,], )
paddle.broadcast_shape(list[2,10,6885,], list[2,10,6885,], )
paddle.broadcast_shape(list[2,8,39,121,], list[2,1,39,121,], )
paddle.broadcast_shape(list[2,8,7,121,], list[2,1,7,121,], )
paddle.broadcast_shape(list[4,8,169,77,], list[], )
paddle.broadcast_shape(list[1,8,4,109,], list[1,1,4,109,], )
paddle.broadcast_shape(list[8,8,84,84,], list[1,1,84,84,], )
paddle.broadcast_shape(list[206,206,], list[], )
paddle.broadcast_shape(list[1,8,179,241,], list[], )
paddle.broadcast_shape(list[30,8,187,187,], list[], )
paddle.broadcast_shape(list[2,8,21,41,], list[2,1,21,41,], )
paddle.broadcast_shape(list[10,8,70,29,], list[10,1,70,29,], )
paddle.broadcast_shape(list[8,8,81,121,], list[8,1,81,121,], )
paddle.broadcast_shape(list[8,8,192,113,], list[], )
paddle.broadcast_shape(list[30,8,198,198,], list[], )
paddle.broadcast_shape(list[10,8,166,166,], list[1,1,166,166,], )
paddle.broadcast_shape(list[1,8,18,261,], list[1,1,18,261,], )
paddle.broadcast_shape(list[1,8,41,73,], list[], )
paddle.broadcast_shape(list[2,1099,], list[2,1099,], )
paddle.broadcast_shape(list[10,8,35,137,], list[10,1,35,137,], )
paddle.broadcast_shape(list[1,8,177,241,], list[], )
paddle.broadcast_shape(list[1,331452,], list[1,331452,], )
paddle.broadcast_shape(list[8,8,191,191,], list[1,1,191,191,], )
paddle.broadcast_shape(list[1,39,52500,], list[1,39,52500,], )
paddle.broadcast_shape(list[4,8,101,101,], list[4,1,101,101,], )
paddle.broadcast_shape(list[6,327360,], list[6,327360,], )
paddle.broadcast_shape(list[3,1548,], list[3,1548,], )
paddle.broadcast_shape(list[3,8,146,169,], list[], )
paddle.broadcast_shape(list[8,8,15,15,], list[8,1,15,15,], )
paddle.broadcast_shape(list[1,58,44436,], list[1,58,1,], )
paddle.broadcast_shape(list[1,393,], list[1,393,], )
paddle.broadcast_shape(list[9,8,43,43,], list[9,1,43,43,], )
paddle.broadcast_shape(list[26,340176,], list[26,340176,], )
paddle.broadcast_shape(list[16,13,10164,], list[16,13,10164,], )
paddle.broadcast_shape(list[12,1343,], list[12,1343,], )
paddle.broadcast_shape(list[8,26,5376,], list[8,26,5376,], )
paddle.broadcast_shape(list[9,8,80,89,], list[], )
paddle.broadcast_shape(list[10,8,93,93,], list[], )
paddle.broadcast_shape(list[2,8,127,121,], list[], )
paddle.broadcast_shape(list[1,946,], list[1,946,], )
paddle.broadcast_shape(list[6,193368,], list[6,193368,], )
paddle.broadcast_shape(list[1,613,], list[1,613,], )
paddle.broadcast_shape(list[4,378540,], list[4,378540,], )
paddle.broadcast_shape(list[30,8,193,129,], list[30,1,193,129,], )
paddle.broadcast_shape(list[1,20,48384,], list[1,20,1,], )
paddle.broadcast_shape(list[2,53,3024,], list[2,53,3024,], )
paddle.broadcast_shape(list[2,8,1,17,], list[2,1,1,17,], )
paddle.broadcast_shape(list[4,247086,], list[4,247086,], )
paddle.broadcast_shape(list[8,20,3549,], list[8,20,3549,], )
paddle.broadcast_shape(list[6,205923,], list[6,205923,], )
paddle.broadcast_shape(list[6,8,54,54,], list[1,1,54,54,], )
paddle.broadcast_shape(list[1,8,71,65,], list[1,1,71,65,], )
paddle.broadcast_shape(list[10,8,123,73,], list[], )
paddle.broadcast_shape(list[1,8,145,229,], list[1,1,145,229,], )
paddle.broadcast_shape(list[1,306900,], list[1,306900,], )
paddle.broadcast_shape(list[1,8,164,164,], list[1,1,164,164,], )
paddle.broadcast_shape(list[1,8,218,218,], list[1,1,218,218,], )
paddle.broadcast_shape(list[1,20,56784,], list[1,20,1,], )
paddle.broadcast_shape(list[13,377514,], list[13,377514,], )
paddle.broadcast_shape(list[1,51,44436,], list[1,51,44436,], )
paddle.broadcast_shape(list[10,8,99,105,], list[10,1,99,105,], )
paddle.broadcast_shape(list[18,291555,], list[18,291555,], )
paddle.broadcast_shape(list[5,8,88,88,], list[], )
paddle.broadcast_shape(list[1043,], list[1043,], )
paddle.broadcast_shape(list[1,34,27216,], list[1,34,27216,], )
paddle.broadcast_shape(list[10,8,40,33,], list[10,1,40,33,], )
paddle.broadcast_shape(list[3,658,], list[3,658,], )
paddle.broadcast_shape(list[1,45,30324,], list[1,45,30324,], )
paddle.broadcast_shape(list[1504,], list[1504,], )
paddle.broadcast_shape(list[6,8,41,25,], list[], )
paddle.broadcast_shape(list[1,8,26,385,], list[1,1,26,385,], )
paddle.broadcast_shape(list[2,139,12096,], list[2,139,12096,], )
paddle.broadcast_shape(list[10,8,90,37,], list[], )
paddle.broadcast_shape(list[1,8,182,261,], list[], )
paddle.broadcast_shape(list[2,94,5376,], list[2,94,5376,], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float32"),Tensor([1, 6, 1, 1, 3],"float32"),Tensor([1, 1, 1, 6, 3],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"int64"),Tensor([1, 6, 1, 1, 3],"int64"),Tensor([1, 1, 1, 6, 3],"int64"),Tensor([1, 6, 1, 6, 3],"int64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"bool"),Tensor([1, 6, 1, 1, 3],"bool"),Tensor([1, 1, 1, 6, 3],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(list[Tensor([12, 1, 10, 1],"float64"),Tensor([12, 1, 10, 1],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6],"bool"),Tensor([6, 1, 6],"bool"),], )
paddle.broadcast_tensors(list[Tensor([2, 60, 1],"float64"),Tensor([6, 2, 1, 10],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"int32"),Tensor([6, 1, 6, 3],"int32"),], )
paddle.broadcast_tensors(list[Tensor([2, 60, 1],"float64"),Tensor([2, 2, 1, 30],"float64"),Tensor([1, 2, 60, 1],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6],"float64"),Tensor([6, 1, 6],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6],"int32"),Tensor([6, 1, 6],"int32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6],"int64"),Tensor([6, 1, 6],"int64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"float64"),Tensor([1, 6, 1, 1, 3],"float64"),Tensor([1, 1, 1, 6, 3],"float64"),Tensor([1, 6, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6],"float32"),Tensor([6, 1, 6],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"float32"),Tensor([1, 6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"int32"),Tensor([1, 6, 1, 6, 3],"int32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"float32"),Tensor([6, 1, 6, 3],"float32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"int64"),Tensor([6, 1, 6, 3],"int64"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"bool"),Tensor([1, 6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"int64"),Tensor([1, 6, 1, 6, 3],"int64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"float64"),Tensor([6, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6, 6, 1],"bool"),Tensor([6, 1, 6, 3],"bool"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 2, 6, 1],"int32"),Tensor([1, 6, 1, 1, 3],"int32"),Tensor([1, 1, 1, 6, 3],"int32"),Tensor([1, 6, 1, 6, 3],"int32"),], )
paddle.broadcast_tensors(input=list[Tensor([1, 6, 6, 6, 1],"float64"),Tensor([1, 6, 1, 6, 3],"float64"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"float64"),Tensor([3, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 3],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([],"float64"),Tensor([3, 4],"float64"),], )
paddle.broadcast_tensors(list[Tensor([1],"float64"),Tensor([1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 2],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([0],"int32"),Tensor([0],"int32"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6],"bool"),Tensor([6, 1],"bool"),], )
paddle.broadcast_tensors(list[Tensor([2],"float32"),Tensor([1, 2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([],"float32"),Tensor([],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([],"float32"),Tensor([],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2],"float32"),Tensor([2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([],"float64"),Tensor([],"float64"),Tensor([],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 1],"float32"),Tensor([2, 1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"bool"),Tensor([3, 1],"bool"),], )
paddle.broadcast_tensors(list[Tensor([4, 5],"float64"),Tensor([4, 5],"float64"),], )
paddle.broadcast_tensors(list[Tensor([],"float32"),Tensor([3],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"int64"),Tensor([3, 1],"int64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6],"int32"),Tensor([6, 1],"int32"),], )
paddle.broadcast_tensors(list[Tensor([3, 4],"float64"),Tensor([],"float64"),], )
paddle.broadcast_tensors(list[Tensor([3],"float32"),Tensor([3],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2],"float32"),Tensor([2, 2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 1],"float32"),Tensor([1, 1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1],"float32"),Tensor([2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([3],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1],"float32"),Tensor([3],"float32"),], )
paddle.broadcast_tensors(list[Tensor([3, 1],"float64"),Tensor([3, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([3],"float32"),Tensor([3],"float32"),], )
paddle.broadcast_tensors(list[Tensor([],"float64"),Tensor([],"float64"),Tensor([1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2],"float64"),Tensor([2],"float64"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 4, 1],"float32"),Tensor([1, 4, 1, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([],"float32"),Tensor([2, 3],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"float32"),Tensor([3, 1],"float32"),Tensor([3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"float64"),Tensor([1, 4],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2, 2],"float64"),Tensor([2, 2],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6],"float64"),Tensor([6, 1],"float64"),], )
paddle.broadcast_tensors(list[Tensor([2],"float64"),Tensor([2],"float64"),Tensor([2],"float64"),], )
paddle.broadcast_tensors(list[Tensor([4, 2, 1, 4],"float32"),Tensor([3, 1],"float32"),Tensor([1, 3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2],"float64"),Tensor([2],"float64"),Tensor([2, 2],"float64"),], )
paddle.broadcast_tensors(list[Tensor([3, 4],"float32"),Tensor([3, 4],"float32"),], )
paddle.broadcast_tensors(list[Tensor([4, 1, 4, 1],"complex64"),Tensor([1, 4, 1, 4],"complex64"),], )
paddle.broadcast_tensors(list[Tensor([2, 1],"float64"),Tensor([2, 5],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6],"int64"),Tensor([6, 1],"int64"),], )
paddle.broadcast_tensors(tuple(Tensor([2, 1],"float64"),Tensor([2, 3],"float64"),Tensor([2, 3],"float64"),), )
paddle.broadcast_tensors(list[Tensor([4, 1, 4, 1],"complex128"),Tensor([1, 4, 1, 4],"complex128"),], )
paddle.broadcast_tensors(tuple(Tensor([2, 1],"float64"),Tensor([2, 1],"float64"),Tensor([2, 1],"float64"),), )
paddle.broadcast_tensors(list[Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([3],"float32"),Tensor([3],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([3],"float64"),Tensor([3],"float64"),], )
paddle.broadcast_tensors(input=list[Tensor([6, 6],"float32"),Tensor([6, 1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"int32"),Tensor([3, 1],"int32"),], )
paddle.broadcast_tensors(list[Tensor([1, 4],"float32"),Tensor([3, 1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([3],"float32"),Tensor([],"float32"),], )
paddle.broadcast_tensors(list[Tensor([5, 5],"float64"),Tensor([5, 5],"float64"),], )
paddle.broadcast_tensors(list[Tensor([1, 2],"float32"),Tensor([1, 2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2, 1, 2],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(list[Tensor([2, 2],"float32"),Tensor([2, 2],"float32"),], )
paddle.broadcast_tensors(list[Tensor([3, 4],"float64"),Tensor([3, 4],"float64"),], )
paddle.broadcast_tensors(list[Tensor([],"float32"),Tensor([1],"float32"),], )
paddle.broadcast_tensors(tuple(Tensor([2, 1],"float32"),Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),), )
paddle.bucketize(Tensor([2, 4],"float64"), Tensor([4],"float64"), right=True, )
paddle.bucketize(Tensor([2, 4],"float64"), Tensor([4],"float64"), out_int32=True, )
paddle.bucketize(Tensor([2, 4],"float64"), Tensor([4],"float64"), )
paddle.cartesian_prod(list[Tensor([5],"int64"),Tensor([4],"int64"),Tensor([4],"int64"),Tensor([0],"int64"),], )
paddle.cartesian_prod(list[Tensor([2],"complex128"),Tensor([1],"complex128"),Tensor([3],"complex128"),], )
paddle.cartesian_prod(list[Tensor([3],"float64"),Tensor([5],"float64"),Tensor([3],"float64"),], )
paddle.cartesian_prod(list[Tensor([5],"complex64"),Tensor([2],"complex64"),Tensor([5],"complex64"),], )
paddle.cartesian_prod(list[Tensor([4],"float16"),], )
paddle.cartesian_prod(list[Tensor([4],"int32"),], )
paddle.cartesian_prod(list[Tensor([3],"int32"),Tensor([5],"int32"),Tensor([3],"int32"),], )
paddle.cartesian_prod(list[Tensor([4],"float32"),], )
paddle.cartesian_prod(list[Tensor([4],"float32"),Tensor([2],"float32"),Tensor([1],"float32"),], )
paddle.cartesian_prod(list[Tensor([3],"complex128"),Tensor([5],"complex128"),Tensor([5],"complex128"),], )
paddle.cartesian_prod(list[Tensor([2],"int64"),], )
paddle.cartesian_prod(list[Tensor([4],"int32"),Tensor([4],"int32"),Tensor([5],"int32"),], )
paddle.cartesian_prod(list[Tensor([3],"complex128"),], )
paddle.cartesian_prod(list[Tensor([2],"complex128"),], )
paddle.cartesian_prod(list[Tensor([5],"complex64"),Tensor([4],"complex64"),Tensor([3],"complex64"),], )
paddle.cartesian_prod(list[Tensor([2],"int64"),Tensor([2],"int64"),Tensor([1],"int64"),Tensor([0],"int64"),], )
paddle.cartesian_prod(list[Tensor([3],"int32"),], )
paddle.cartesian_prod(list[Tensor([1],"float32"),Tensor([1],"float32"),Tensor([1],"float32"),], )
paddle.cartesian_prod(list[Tensor([2],"float64"),], )
paddle.cartesian_prod(list[Tensor([2],"int64"),Tensor([2],"int64"),Tensor([1],"int64"),], )
paddle.cartesian_prod(list[Tensor([5],"int64"),], )
paddle.cartesian_prod(list[Tensor([5],"complex64"),], )
paddle.cartesian_prod(list[Tensor([3],"float64"),], )
paddle.cartesian_prod(list[Tensor([2],"float16"),], )
paddle.cartesian_prod(list[Tensor([4],"int32"),Tensor([4],"int32"),Tensor([5],"int32"),Tensor([0],"int32"),], )
paddle.cartesian_prod(list[Tensor([1],"float32"),], )
paddle.cartesian_prod(list[Tensor([2],"float64"),Tensor([4],"float64"),Tensor([3],"float64"),], )
paddle.cartesian_prod(list[Tensor([3],"int32"),Tensor([5],"int32"),Tensor([3],"int32"),Tensor([0],"int32"),], )
paddle.cartesian_prod(list[Tensor([5],"int64"),Tensor([4],"int64"),Tensor([4],"int64"),], )
paddle.ceil(Tensor([4, 15, 2],"float32"), )
paddle.ceil(Tensor([4, 19, 2],"float32"), )
paddle.ceil(Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.ceil(Tensor([4, 16, 2],"float32"), )
paddle.ceil(Tensor([4, 18, 2],"float32"), )
paddle.ceil(Tensor([4, 14, 2],"float32"), )
paddle.ceil(Tensor([3, 6, 3, 4, 2, 1],"float64"), )
paddle.ceil(Tensor([4, 13, 2],"float32"), )
paddle.ceil(Tensor([4, 17, 2],"float32"), )
paddle.ceil(Tensor([4, 5, 2],"float32"), )
paddle.ceil(Tensor([1, 3],"float64"), )
paddle.ceil(Tensor([4, 1],"float32"), )
paddle.ceil(Tensor([4, 3, 2],"float32"), )
paddle.ceil(Tensor([4, 12, 2],"float32"), )
paddle.ceil(Tensor([4, 7, 2],"float32"), )
paddle.ceil(Tensor([4, 8, 2],"float32"), )
paddle.ceil(Tensor([],"float32"), )
paddle.ceil(Tensor([1],"float64"), )
paddle.ceil(Tensor([5, 1],"float64"), )
paddle.ceil(Tensor([1, 3, 4],"float64"), )
paddle.ceil(Tensor([7, 1],"float64"), )
paddle.ceil(Tensor([1, 3, 3],"float32"), )
paddle.ceil(Tensor([4, 9, 2],"float32"), )
paddle.ceil(Tensor([5, 1, 4],"float64"), )
paddle.ceil(Tensor([4, 7, 1],"float64"), )
paddle.ceil(Tensor([4, 1, 6],"float64"), )
paddle.ceil(Tensor([4, 6, 2],"float32"), )
paddle.ceil(Tensor([],"float64"), )
paddle.ceil(Tensor([2, 1],"float32"), )
paddle.ceil(x=Tensor([3, 3, 3],"float64"), )
paddle.ceil(x=Tensor([3, 3, 3],"float32"), )
paddle.ceil(Tensor([1, 3, 3],"float64"), )
paddle.ceil(Tensor([4, 11, 2],"float32"), )
paddle.ceil(Tensor([1],"float32"), )
paddle.ceil(Tensor([4, 1],"float64"), )
paddle.ceil(Tensor([4, 4, 2],"float32"), )
paddle.ceil(Tensor([4, 10, 2],"float32"), )
paddle.chunk(Tensor([1, 8, 1, 80],"float32"), 2, axis=-1, )
paddle.chunk(Tensor([4, 6, 6],"bool"), chunks=3, axis=1, )
paddle.chunk(Tensor([4, 6, 6],"int32"), chunks=3, axis=1, )
paddle.chunk(Tensor([4, 6, 6],"int32"), chunks=3, axis=Tensor([1],"int32"), )
paddle.chunk(Tensor([10, 2, 8, 4],"float32"), 2, axis=-1, )
paddle.chunk(x=Tensor([3, 3],"float64"), chunks=3, axis=0, )
paddle.chunk(x=Tensor([3, 3],"float64"), chunks=3, axis=-1, )
paddle.chunk(x=Tensor([3, 3],"float16"), chunks=3, axis=Tensor([1],"int64"), )
paddle.chunk(x=Tensor([3, 3],"int32"), chunks=3, axis=0, )
paddle.chunk(x=Tensor([3, 3],"int32"), chunks=3, axis=-1, )
paddle.chunk(x=Tensor([3, 3],"int32"), chunks=3, axis=Tensor([1],"int64"), )
paddle.chunk(x=Tensor([3, 3],"int64"), chunks=3, axis=-1, )
paddle.chunk(x=Tensor([3, 3],"float32"), chunks=3, axis=Tensor([1],"int64"), )
paddle.chunk(x=Tensor([3, 3],"float16"), chunks=3, axis=0, )
paddle.chunk(x=Tensor([3, 3],"int64"), chunks=3, axis=0, )
paddle.chunk(Tensor([1, 1, 1, 64],"float16"), 2, axis=-1, )
paddle.chunk(x=Tensor([3],"bool"), chunks=3, axis=0, )
paddle.chunk(Tensor([13, 4, 1],"float32"), 4, axis=1, )
paddle.chunk(x=Tensor([3, 3],"float32"), chunks=3, axis=0, )
paddle.chunk(x=Tensor([3, 3],"float32"), chunks=3, axis=-1, )
paddle.chunk(x=Tensor([3, 3],"int64"), chunks=3, axis=Tensor([1],"int64"), )
paddle.chunk(x=Tensor([3, 3],"float64"), chunks=3, axis=Tensor([1],"int64"), )
paddle.chunk(x=Tensor([3, 3],"float16"), chunks=3, axis=-1, )
paddle.clip(Tensor([126],"int64"), min=1, )
paddle.clip(Tensor([85, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([59, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([13, 32],"int32"), max=16, )
paddle.clip(Tensor([41, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([36, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([45, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([68, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([63, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([223],"int64"), min=1, )
paddle.clip(Tensor([49, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([131],"int64"), min=1, )
paddle.clip(Tensor([56, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([512, 1],"float32"), max=4.135166556742356, )
paddle.clip(Tensor([40, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([69, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([98, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([103, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([100, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([25, 25],"float64"), min=-2.0, max=2.0, )
paddle.clip(Tensor([13, 8],"int32"), max=83, )
paddle.clip(Tensor([811],"int64"), min=1, )
paddle.clip(Tensor([74, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([188],"int64"), min=1, )
paddle.clip(Tensor([111, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([78, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([81, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([34, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([54, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([168],"int64"), min=0, )
paddle.clip(Tensor([50, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([67, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([418],"int64"), min=1, )
paddle.clip(Tensor([66, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([120],"int64"), min=0, )
paddle.clip(Tensor([135],"int64"), min=1, )
paddle.clip(Tensor([304],"float32"), min=0.001, max=100.0, )
paddle.clip(Tensor([238],"int64"), min=1, )
paddle.clip(Tensor([84, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([76, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([108, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([20, 20],"float64"), min=-2.0, max=2.0, )
paddle.clip(Tensor([121],"int64"), min=1, )
paddle.clip(Tensor([394],"int64"), min=1, )
paddle.clip(Tensor([150],"int64"), min=0, )
paddle.clip(Tensor([52, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([405],"int64"), min=1, )
paddle.clip(Tensor([136],"int64"), min=1, )
paddle.clip(x=Tensor([10, 10],"float32"), min=-0.6, max=0.6, )
paddle.clip(x=Tensor([4, 8, 16],"float32"), min=0.0, max=0.0, )
paddle.clip(Tensor([28, 28],"float32"), 0.0, 1.0, )
paddle.clip(Tensor([91, 3],"float32"), min=1e-05, )
paddle.clip(x=Tensor([10, 10],"float64"), min=-2.0, max=-1.0, )
paddle.clip(Tensor([13, 13],"int32"), max=16, )
paddle.clip(Tensor([62, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([87, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([72, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([89, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([39, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([30, 30],"float64"), min=-2.0, max=2.0, )
paddle.clip(Tensor([215],"int64"), min=1, )
paddle.clip(x=Tensor([10, 10],"float64"), min=-1.0, max=1.0, )
paddle.clip(Tensor([57, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([38, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([420],"int64"), min=1, )
paddle.clip(Tensor([42, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([60, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([139],"int64"), min=1, )
paddle.clip(Tensor([47, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([55, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([65, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([64, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([143],"int64"), min=1, )
paddle.clip(Tensor([90, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([95, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([46, 3],"float32"), min=1e-05, )
paddle.clip(x=Tensor([10, 10],"float64"), min=2.0, max=2.0, )
paddle.clip(Tensor([2, 8, 8],"float32"), 0.0, 1.0, )
paddle.clip(Tensor([48, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([77, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([180],"int64"), min=1, )
paddle.clip(Tensor([96, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([35, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([142],"int64"), min=1, )
paddle.clip(Tensor([79, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([37, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([1, 1, 192],"float32"), min=-2, max=2, )
paddle.clip(Tensor([83, 3],"float32"), min=1e-05, )
paddle.clip(x=Tensor([4, 10, 10],"float64"), min=-1.0, max=1.0, )
paddle.clip(x=Tensor([16, 16],"float32"), min=-1.0, max=1.0, )
paddle.clip(x=Tensor([10, 10],"float32"), min=-0.1, max=0.8, )
paddle.clip(Tensor([51, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([43, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([75, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([44, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([94, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([13, 9],"int32"), max=83, )
paddle.clip(Tensor([256, 1],"float32"), min=-2.0, max=2.0, )
paddle.clip(Tensor([88, 3],"float32"), min=1e-05, )
paddle.clip(x=Tensor([100],"float32"), min=-0.1, max=0.1, )
paddle.clip(Tensor([56],"int64"), min=1, )
paddle.clip(Tensor([29, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([1],"float32"), min=1.0, )
paddle.clip(Tensor([12],"int64"), min=1, )
paddle.clip(Tensor([83],"int64"), min=1, )
paddle.clip(Tensor([2, 30],"float64"), min=-2.0, max=2.0, )
paddle.clip(Tensor([90],"int64"), min=1, )
paddle.clip(x=Tensor([3, 3],"float32"), min=-5.0, max=5.0, )
paddle.clip(Tensor([11],"int64"), min=1, )
paddle.clip(Tensor([34],"int64"), min=1, )
paddle.clip(Tensor([13, 7],"int32"), max=83, )
paddle.clip(Tensor([],"float32"), -5, 5, )
paddle.clip(Tensor([1, 64],"float32"), min=-2.0, max=2.0, )
paddle.clip(Tensor([41],"int64"), min=1, )
paddle.clip(Tensor([3],"int64"), min=1, )
paddle.clip(Tensor([27],"int64"), min=1, )
paddle.clip(Tensor([13, 7, 1],"int32"), max=83, )
paddle.clip(Tensor([4, 1],"float32"), min=1.0, )
paddle.clip(Tensor([5, 5],"float32"), -1, 1, )
paddle.clip(x=Tensor([3],"float64"), min=Tensor([1],"float64"), max=Tensor([1],"float64"), )
paddle.clip(Tensor([2],"int64"), min=1, )
paddle.clip(Tensor([10],"float32"), min=0, )
paddle.clip(Tensor([59],"int64"), min=1, )
paddle.clip(Tensor([14, 7],"int64"), max=240, )
paddle.clip(Tensor([32, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([73],"int64"), min=1, )
paddle.clip(Tensor([4],"float32"), 0, 1, )
paddle.clip(Tensor([99],"int64"), min=1, )
paddle.clip(Tensor([21, 1, 1],"float32"), -10000000000.0, 4.135166556742356, )
paddle.clip(Tensor([8],"int64"), min=1, )
paddle.clip(Tensor([1, 1, 7, 7],"int64"), 0, 13, )
paddle.clip(Tensor([7],"int64"), min=1, )
paddle.clip(Tensor([15, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([28, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([20, 1],"float64"), min=-2.0, max=2.0, )
paddle.clip(Tensor([67],"int64"), min=1, )
paddle.clip(Tensor([13, 7],"int64"), max=83, )
paddle.clip(Tensor([14],"int64"), min=1, )
paddle.clip(Tensor([69],"int64"), min=1, )
paddle.clip(Tensor([2, 1],"float32"), min=1.0, )
paddle.clip(x=Tensor([2, 2],"float64"), min=Tensor([1],"float64"), max=Tensor([1],"float64"), )
paddle.clip(Tensor([18],"int64"), min=1, )
paddle.clip(Tensor([10, 3],"float32"), min=1e-05, )
paddle.clip(x=Tensor([3, 3, 3],"float32"), min=None, max=5, )
paddle.clip(Tensor([1, 2],"float32"), min=1.1754943508222875e-38, )
paddle.clip(Tensor([77],"int64"), min=1, )
paddle.clip(x=Tensor([3],"float64"), min=2.0, max=2.0, )
paddle.clip(Tensor([1],"int64"), min=1, )
paddle.clip(Tensor([1],"float32"), min=1, )
paddle.clip(Tensor([46],"int64"), min=1, )
paddle.clip(Tensor([],"float32"), min=1.1920928955078125e-07, max=0.9999998807907104, )
paddle.clip(Tensor([24],"int64"), min=1, )
paddle.clip(Tensor([21],"int64"), min=1, )
paddle.clip(Tensor([10, 2],"float32"), min=1e-06, )
paddle.clip(Tensor([36],"int64"), min=1, )
paddle.clip(Tensor([26, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([9, 1],"float32"), max=4.135166556742356, )
paddle.clip(Tensor([92],"int64"), min=1, )
paddle.clip(x=Tensor([3, 3],"float64"), min=0.0, max=5, )
paddle.clip(Tensor([11, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([20],"int64"), min=1, )
paddle.clip(Tensor([66],"int64"), min=1, )
paddle.clip(Tensor([51],"int64"), min=1, )
paddle.clip(Tensor([88],"int64"), min=1, )
paddle.clip(Tensor([53],"int64"), min=1, )
paddle.clip(Tensor([63],"int64"), min=1, )
paddle.clip(Tensor([30],"int64"), min=1, )
paddle.clip(Tensor([44],"int64"), min=1, )
paddle.clip(Tensor([25, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([19],"int64"), min=1, )
paddle.clip(Tensor([],"float32"), min=1.0, )
paddle.clip(Tensor([33],"int64"), min=1, )
paddle.clip(Tensor([4, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([6],"int64"), min=1, )
paddle.clip(x=Tensor([3, 3],"float64"), min=Tensor([1],"float64"), max=Tensor([1],"float64"), )
paddle.clip(x=Tensor([3, 3],"float64"), min=-5.0, max=5.0, )
paddle.clip(Tensor([10, 2, 1],"float32"), min=1e-06, )
paddle.clip(Tensor([47],"int64"), min=1, )
paddle.clip(Tensor([12, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([98],"int64"), min=1, )
paddle.clip(Tensor([48],"int64"), min=1, )
paddle.clip(Tensor([2],"float32"), min=1.1754943508222875e-38, )
paddle.clip(Tensor([18, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([43],"int64"), min=1, )
paddle.clip(Tensor([30, 1],"float64"), min=-2.0, max=2.0, )
paddle.clip(Tensor([23],"int64"), min=1, )
paddle.clip(Tensor([2, 10],"int64"), max=255984, )
paddle.clip(Tensor([2, 20],"float64"), min=-2.0, max=2.0, )
paddle.clip(Tensor([8, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([9],"int64"), min=1, )
paddle.clip(Tensor([37],"int64"), min=1, )
paddle.clip(Tensor([32],"int64"), min=1, )
paddle.clip(Tensor([71],"int64"), min=1, )
paddle.clip(Tensor([2, 2],"float32"), min=1.1754943508222875e-38, )
paddle.clip(Tensor([55],"int64"), min=1, )
paddle.clip(Tensor([5, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([26],"int64"), min=1, )
paddle.clip(Tensor([22, 1, 1],"float32"), -10000000000.0, 4.135166556742356, )
paddle.clip(Tensor([81],"int64"), min=1, )
paddle.clip(Tensor([39],"int64"), min=1, )
paddle.clip(Tensor([4, 4],"float64"), -1, 1, )
paddle.clip(Tensor([78],"int64"), min=1, )
paddle.clip(x=Tensor([3, 3],"float64"), min=1, max=Tensor([1],"float64"), )
paddle.clip(Tensor([35],"int64"), min=1, )
paddle.clip(Tensor([],"float32"), min=1e-10, )
paddle.clip(Tensor([31, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([2, 7],"int32"), max=184, )
paddle.clip(Tensor([22, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([50],"int64"), min=1, )
paddle.clip(Tensor([97],"int64"), min=1, )
paddle.clip(x=Tensor([2],"float64"), min=Tensor([1],"float64"), max=Tensor([1],"float64"), name="test name", )
paddle.clip(Tensor([42],"int64"), min=1, )
paddle.clip(Tensor([21, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([22],"int64"), min=1, )
paddle.clip(Tensor([27, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([31],"int64"), min=1, )
paddle.clip(Tensor([20, 1],"float32"), min=1.1920928955078125e-07, )
paddle.clip(Tensor([1],"float32"), max=22400, )
paddle.clip(Tensor([25],"int64"), min=1, )
paddle.clip(Tensor([9],"int64"), min=0, )
paddle.clip(Tensor([3, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([2, 2, 2],"float32"), min=-1.0, max=1.0, )
paddle.clip(Tensor([24, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([2, 10],"int64"), max=31984, )
paddle.clip(Tensor([95],"int64"), min=1, )
paddle.clip(Tensor([19, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([16, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([1, 2, 2],"float32"), min=-1.0, max=1.0, )
paddle.clip(x=Tensor([1, 2, 3],"float32"), min=None, max=1, )
paddle.clip(Tensor([14, 7],"int64"), max=83, )
paddle.clip(Tensor([],"float32"), min=0, )
paddle.clip(Tensor([],"float32"), 0, 1, )
paddle.clip(Tensor([16],"int64"), min=1, )
paddle.clip(Tensor([6, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([7, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([9, 1, 1],"float32"), -10000000000.0, 4.135166556742356, )
paddle.clip(Tensor([13, 7],"int32"), max=65, )
paddle.clip(Tensor([89],"int64"), min=1, )
paddle.clip(Tensor([5],"int64"), min=1, )
paddle.clip(Tensor([15],"int64"), min=1, )
paddle.clip(Tensor([12, 7],"int64"), max=83, )
paddle.clip(Tensor([8, 8],"float32"), 0.0, 1.0, )
paddle.clip(Tensor([2, 25],"float64"), min=-2.0, max=2.0, )
paddle.clip(Tensor([13],"int64"), min=1, )
paddle.clip(Tensor([13, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([11, 1, 1],"float32"), -10000000000.0, 4.135166556742356, )
paddle.clip(Tensor([54],"int64"), min=1, )
paddle.clip(Tensor([4, 4],"float32"), -1, 1, )
paddle.clip(Tensor([30, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([45],"int64"), min=1, )
paddle.clip(Tensor([1, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([12, 7],"int32"), max=83, )
paddle.clip(Tensor([80],"int64"), min=1, )
paddle.clip(Tensor([13, 7],"int32"), max=50248, )
paddle.clip(Tensor([29],"int64"), min=1, )
paddle.clip(Tensor([90],"int64"), min=0, )
paddle.clip(Tensor([28],"int64"), min=1, )
paddle.clip(Tensor([13, 7],"int64"), min=0, max=127, )
paddle.clip(Tensor([14, 7],"int32"), max=83, )
paddle.clip(Tensor([9, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([2, 10],"int64"), max=107, )
paddle.clip(Tensor([64],"int64"), min=1, )
paddle.clip(Tensor([49],"int64"), min=1, )
paddle.clip(Tensor([14, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([23, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([4],"int64"), min=1, )
paddle.clip(Tensor([13, 7],"int64"), 3, )
paddle.clip(Tensor([17, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([40],"int64"), min=1, )
paddle.clip(Tensor([2, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([33, 3],"float32"), min=1e-05, )
paddle.clip(Tensor([52],"int64"), min=1, )
paddle.clip(Tensor([65],"int64"), min=1, )
paddle.clip(Tensor([10],"int64"), min=1, )
paddle.clip(x=Tensor([1, 2],"float64"), min=Tensor([1],"float64"), max=Tensor([1],"float64"), )
paddle.clip(Tensor([17],"int64"), min=1, )
paddle.clip(Tensor([],"float32"), Tensor([],"float32"), Tensor([],"float32"), )
paddle.clip(Tensor([5, 5],"float64"), -1, 1, )
paddle.clip(Tensor([13, 7],"int32"), max=84, )
paddle.clip(Tensor([38],"int64"), min=1, )
paddle.clip(Tensor([58],"int64"), min=1, )
paddle.clip(Tensor([25, 1],"float64"), min=-2.0, max=2.0, )
paddle.clone(Tensor([1, 500],"int32"), )
paddle.clone(Tensor([3, 3, 4, 4],"float64"), )
paddle.clone(Tensor([1, 625, 1],"float32"), )
paddle.clone(Tensor([1, 500],"int64"), )
paddle.clone(Tensor([10, 64],"float32"), )
paddle.clone(Tensor([1, 3, 11, 16],"float32"), )
paddle.clone(Tensor([24, 8],"float32"), )
paddle.clone(Tensor([1, 100, 4],"float32"), )
paddle.clone(Tensor([1, 12, 1, 64],"float32"), )
paddle.clone(Tensor([12],"float32"), )
paddle.clone(Tensor([3],"float64"), )
paddle.clone(Tensor([1],"int32"), )
paddle.clone(Tensor([2],"float32"), )
paddle.clone(Tensor([1],"float32"), )
paddle.clone(Tensor([],"float32"), )
paddle.clone(Tensor([1, 4],"float32"), )
paddle.clone(Tensor([24],"float32"), )
paddle.clone(Tensor([3, 3, 4],"float64"), )
paddle.clone(Tensor([6],"float64"), )
paddle.clone(Tensor([6],"float32"), )
paddle.clone(Tensor([91],"float32"), )
paddle.clone(Tensor([3, 3],"float64"), )
paddle.clone(Tensor([2, 1],"int64"), )
paddle.clone(Tensor([2],"int32"), )
paddle.column_stack(list[Tensor([3, 4, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.column_stack(list[Tensor([3, 2],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([1],"float64"),], )
paddle.column_stack(list[Tensor([3, 4, 2],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([],"float32"),], )
paddle.column_stack(list[Tensor([1],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.column_stack(list[Tensor([2],"float64"),Tensor([2, 1],"float64"),], )
paddle.column_stack(list[Tensor([1, 1],"float64"),], )
paddle.column_stack(list[Tensor([],"float64"),Tensor([],"float64"),Tensor([],"float64"),], )
paddle.column_stack(list[Tensor([],"float16"),], )
paddle.column_stack(list[Tensor([],"float64"),], )
paddle.column_stack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.column_stack(list[Tensor([],"int64"),], )
paddle.column_stack(list[Tensor([],"int32"),], )
paddle.column_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.column_stack(list[Tensor([5],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),], )
paddle.column_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.combinations(Tensor([10],"float64"), 5, False, )
paddle.combinations(Tensor([10],"int64"), 0, True, )
paddle.combinations(Tensor([10],"int32"), 1, True, )
paddle.combinations(Tensor([1],"float32"), r=2, with_replacement=True, )
paddle.complex(real=Tensor([9, 2, 3],"float64"), imag=Tensor([9, 2, 3],"float64"), )
paddle.complex(real=Tensor([9, 2, 3],"float32"), imag=Tensor([9, 2, 3],"float32"), )
paddle.complex(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), )
paddle.complex(real=Tensor([1],"float32"), imag=Tensor([1],"float32"), )
paddle.complex(real=Tensor([3, 2],"float32"), imag=Tensor([3, 2],"float32"), )
paddle.complex(real=Tensor([9],"float64"), imag=Tensor([9],"float64"), )
paddle.complex(Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.complex(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.complex(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.complex(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), )
paddle.complex(Tensor([],"float32"), Tensor([],"float32"), )
paddle.complex(real=Tensor([9],"float32"), imag=Tensor([9],"float32"), )
paddle.complex(Tensor([2],"float32"), Tensor([2],"float32"), )
paddle.complex(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.complex(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.complex(real=Tensor([3, 2],"float64"), imag=Tensor([3, 2],"float64"), )
paddle.complex(Tensor([5],"float64"), Tensor([5],"float64"), )
paddle.complex(Tensor([2],"float64"), Tensor([2],"float64"), )
paddle.conj(x=Tensor([20, 10],"complex64"), )
paddle.conj(Tensor([2, 20, 2, 3],"float64"), )
paddle.conj(x=Tensor([20, 10],"complex128"), )
paddle.conj(Tensor([2, 20, 2, 3],"complex128"), )
paddle.conj(Tensor([2, 20, 2, 3],"complex64"), )
paddle.conj(Tensor([2, 20, 2, 3],"float32"), )
paddle.conj(Tensor([4, 1],"complex128"), )
paddle.conj(Tensor([],"complex64"), )
paddle.conj(Tensor([4, 1],"complex64"), )
paddle.copysign(Tensor([10, 20],"float64"), Tensor([10, 20],"float64"), )
paddle.copysign(Tensor([20, 6],"float64"), Tensor([20, 6],"float64"), )
paddle.copysign(Tensor([10, 20],"float32"), Tensor([],"float32"), )
paddle.copysign(Tensor([10, 20],"float16"), Tensor([10, 20],"float16"), )
paddle.copysign(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.copysign(Tensor([12, 20, 2],"float32"), Tensor([12, 20, 2],"float32"), )
paddle.copysign(Tensor([10, 20],"float32"), -3.0, )
paddle.copysign(Tensor([10, 20],"float32"), Tensor([10, 20],"float32"), )
paddle.copysign(Tensor([12, 20, 2],"float64"), Tensor([12, 20, 2],"float64"), )
paddle.copysign(Tensor([11, 17],"float32"), Tensor([11, 17],"float32"), )
paddle.copysign(Tensor([3],"float32"), Tensor([3],"float32"), )
paddle.copysign(Tensor([3, 4, 5],"float16"), Tensor([5],"float16"), )
paddle.copysign(Tensor([4, 5],"float16"), Tensor([3, 4, 5],"float16"), )
paddle.copysign(Tensor([0, 0],"float64"), Tensor([0, 0],"float64"), )
paddle.copysign(Tensor([3, 4, 5],"float16"), Tensor([4, 5],"float16"), )
paddle.copysign(Tensor([0, 5, 10],"float64"), Tensor([0, 5, 10],"float64"), )
paddle.cos(Tensor([128, 1],"float32"), )
paddle.cos(Tensor([513],"float32"), )
paddle.cos(Tensor([11, 50],"float32"), )
paddle.cos(Tensor([28, 16],"float32"), )
paddle.cos(Tensor([511],"float64"), )
paddle.cos(Tensor([10, 10],"float32"), )
paddle.cos(Tensor([14, 16],"float32"), )
paddle.cos(Tensor([8, 40],"float32"), )
paddle.cos(Tensor([513],"float64"), )
paddle.cos(Tensor([512, 1],"float32"), )
paddle.cos(Tensor([7, 110],"float32"), )
paddle.cos(Tensor([3, 306],"float32"), )
paddle.cos(Tensor([16, 16],"float32"), )
paddle.cos(Tensor([10, 20, 1],"float32"), )
paddle.cos(Tensor([304],"float32"), )
paddle.cos(x=Tensor([3, 3, 3],"float64"), )
paddle.cos(Tensor([2, 44],"float32"), )
paddle.cos(Tensor([2, 28],"float32"), )
paddle.cos(Tensor([2, 3, 4],"float32"), )
paddle.cos(Tensor([],"float32"), )
paddle.cos(Tensor([2, 10],"float32"), )
paddle.cos(Tensor([5, 2],"float32"), )
paddle.cos(Tensor([4, 2],"float32"), )
paddle.cos(Tensor([1, 2],"float32"), )
paddle.cos(Tensor([2],"float64"), )
paddle.cos(Tensor([7, 2],"float32"), )
paddle.cos(Tensor([2, 32],"float32"), )
paddle.cos(Tensor([2, 4],"float64"), )
paddle.cos(Tensor([1, 25, 1],"float32"), )
paddle.cos(x=Tensor([3, 3, 3],"float32"), )
paddle.cos(Tensor([2, 3],"float32"), )
paddle.cos(Tensor([15, 1],"float32"), )
paddle.cos(Tensor([64, 1],"float32"), )
paddle.cos(Tensor([3, 28],"float32"), )
paddle.cos(Tensor([10, 2],"float32"), )
paddle.cos(Tensor([2, 2],"float32"), )
paddle.cos(Tensor([2, 16],"float32"), )
paddle.cos(Tensor([3, 2],"float32"), )
paddle.cos(Tensor([2, 14],"float32"), )
paddle.cos(Tensor([2],"float32"), )
paddle.cos(Tensor([25, 1],"float32"), )
paddle.cos(Tensor([8, 2],"float32"), )
paddle.cosh(Tensor([10, 20, 1],"float32"), )
paddle.cosh(Tensor([],"float32"), )
paddle.cosh(x=Tensor([3, 3, 3],"float32"), )
paddle.cosh(x=Tensor([3, 3, 3],"float64"), )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=list[0,1,2,3,], keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=list[0,2,], keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=None, keepdim=True, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=2, keepdim=True, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=tuple(0,1,3,), keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=-1, keepdim=False, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=None, keepdim=False, )
paddle.count_nonzero(Tensor([1, 14, 5, 14],"float64"), axis=list[1,3,], keepdim=False, name=None, )
paddle.count_nonzero(Tensor([1, 14, 5, 14],"float64"), axis=list[1,3,], keepdim=True, name=None, )
paddle.count_nonzero(Tensor([2, 3, 4, 5],"float32"), axis=tuple(0,2,), keepdim=False, )
paddle.count_nonzero(Tensor([3, 5],"float32"), axis=None, )
paddle.count_nonzero(Tensor([],"float32"), axis=0, )
paddle.count_nonzero(Tensor([3, 5],"float32"), keepdim=True, )
paddle.count_nonzero(Tensor([],"float32"), axis=-1, )
paddle.count_nonzero(Tensor([],"float32"), axis=None, )
paddle.count_nonzero(Tensor([5],"float32"), axis=0, )
paddle.count_nonzero(Tensor([],"float32"), axis=list[], )
paddle.crop(x=Tensor([3, 3],"float64"), shape=list[2,2,], offsets=tuple(0,1,), )
paddle.crop(x=Tensor([2, 3, 3, 3],"float64"), shape=list[2,1,-1,2,], offsets=list[0,0,1,1,], )
paddle.crop(x=Tensor([3, 3],"int64"), shape=list[2,2,], )
paddle.crop(x=Tensor([3, 3],"float32"), shape=list[2,2,], )
paddle.crop(x=Tensor([3, 3],"float64"), shape=list[2,2,], )
paddle.crop(x=Tensor([3, 3],"int32"), shape=list[2,2,], )
paddle.crop(x=Tensor([3, 3],"float64"), shape=list[2,2,], offsets=tuple(1,1,), )
paddle.crop(x=Tensor([3, 3],"float64"), shape=list[2,2,], offsets=list[1,0,], )
paddle.crop(x=Tensor([3, 3],"float64"), shape=list[2,2,], offsets=tuple(0,0,), )
paddle.cross(x=Tensor([3, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.cross(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 3],"float64"), axis=0, )
paddle.cross(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), axis=1, )
paddle.cross(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), axis=1, )
paddle.cross(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), axis=0, )
paddle.cross(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 3],"float64"), axis=1, )
paddle.cross(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.cross(x=Tensor([3, 3],"int32"), y=Tensor([3, 3],"int32"), )
paddle.cross(x=Tensor([3, 3],"int64"), y=Tensor([3, 3],"int64"), )
paddle.cross(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 3],"float64"), axis=2, )
paddle.cross(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), axis=-1, )
paddle.cumprod(Tensor([2, 3, 3, 4, 5],"float32"), dim=0, )
paddle.cumprod(Tensor([10, 20, 1],"float32"), -1, dtype="float32", )
paddle.cumprod(Tensor([2, 3, 3, 4, 5],"float32"), dim=3, )
paddle.cumprod(Tensor([10, 10],"float32"), dim=1, )
paddle.cumprod(Tensor([2, 3, 3, 4, 5],"float32"), dim=1, )
paddle.cumprod(Tensor([10, 10],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 3, 4, 5],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 3, 3, 4, 5],"float32"), dim=4, )
paddle.cumprod(Tensor([2, 3, 10, 10],"float64"), 1, )
paddle.cumprod(Tensor([2, 3, 3, 4],"float32"), dim=0, )
paddle.cumprod(Tensor([5, 3],"complex128"), dim=-1, )
paddle.cumprod(Tensor([50],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 4],"float32"), dim=2, )
paddle.cumprod(x=Tensor([3, 4],"float64"), dim=0, )
paddle.cumprod(x=Tensor([3, 4],"int64"), dim=0, )
paddle.cumprod(Tensor([5, 6],"float32"), dim=-1, )
paddle.cumprod(Tensor([5, 2],"complex128"), dim=-1, )
paddle.cumprod(x=Tensor([2, 3, 2],"float64"), dim=-2, )
paddle.cumprod(Tensor([5, 7],"float32"), dim=-1, )
paddle.cumprod(Tensor([5, 2],"float32"), dim=-1, )
paddle.cumprod(Tensor([],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 3, 4],"float32"), dim=1, )
paddle.cumprod(Tensor([1, 2, 2],"float32"), dim=-1, )
paddle.cumprod(Tensor([2, 3, 3, 4],"float32"), dim=2, )
paddle.cumprod(Tensor([2, 3, 3, 4],"float32"), dim=1, )
paddle.cumprod(Tensor([5, 1],"complex128"), dim=-1, )
paddle.cumprod(Tensor([5, 4],"float32"), dim=-1, )
paddle.cumprod(x=Tensor([2, 3, 2],"float64"), dim=0, )
paddle.cumprod(x=Tensor([3, 4],"float64"), dim=1, )
paddle.cumprod(Tensor([2, 3, 4],"float32"), dim=0, )
paddle.cumprod(x=Tensor([12],"float64"), dim=0, )
paddle.cumprod(Tensor([5, 1],"float32"), dim=-1, )
paddle.cumprod(Tensor([],"float32"), 0, )
paddle.cumprod(Tensor([5, 5],"float32"), dim=-1, )
paddle.cumprod(Tensor([5, 3],"float32"), dim=-1, )
paddle.cumprod(x=Tensor([3, 4],"float32"), dim=0, )
paddle.cumprod(Tensor([2, 2, 2],"float32"), dim=-1, )
paddle.cumprod(Tensor([2, 3, 3, 4],"float32"), dim=3, )
paddle.cumprod(x=Tensor([3, 4],"float64"), dim=-1, )
paddle.deg2rad(Tensor([1],"int64"), )
paddle.deg2rad(Tensor([],"float32"), )
paddle.deg2rad(Tensor([6],"float32"), )
paddle.diag(Tensor([17, 17],"float32"), )
paddle.diag(Tensor([23, 23],"float32"), )
paddle.diag(Tensor([10, 10],"float32"), )
paddle.diag(Tensor([100],"int64"), padding_value=8.0, )
paddle.diag(Tensor([18, 18],"float32"), )
paddle.diag(Tensor([100],"float64"), padding_value=8, )
paddle.diag(Tensor([21, 21],"float32"), )
paddle.diag(Tensor([512],"float16"), )
paddle.diag(Tensor([640],"float16"), )
paddle.diag(Tensor([256],"float16"), )
paddle.diag(Tensor([27, 27],"float32"), )
paddle.diag(Tensor([768],"float32"), )
paddle.diag(Tensor([10, 10],"float32"), offset=1, )
paddle.diag(Tensor([768],"float16"), )
paddle.diag(Tensor([100],"int64"), padding_value=-8, )
paddle.diag(Tensor([192],"float16"), )
paddle.diag(Tensor([31, 31],"float32"), )
paddle.diag(Tensor([10, 10],"float32"), offset=-1, )
paddle.diag(Tensor([29, 29],"float32"), )
paddle.diag(x=Tensor([3, 2],"float64"), )
paddle.diag(Tensor([3],"float64"), )
paddle.diag(x=Tensor([3],"int64"), )
paddle.diag(x=Tensor([2, 3],"float64"), offset=2, )
paddle.diag(Tensor([1],"float64"), )
paddle.diag(Tensor([7],"float32"), )
paddle.diag(Tensor([8],"float16"), )
paddle.diag(Tensor([5],"float64"), )
paddle.diag(x=Tensor([3, 2],"float64"), offset=0, )
paddle.diag(Tensor([4],"float32"), )
paddle.diag(x=Tensor([2, 3],"float64"), offset=0, )
paddle.diag(Tensor([64],"float16"), )
paddle.diag(Tensor([31],"float32"), offset=1, )
paddle.diag(x=Tensor([3, 1],"float64"), )
paddle.diag(x=Tensor([3, 3],"float64"), offset=-1, )
paddle.diag(x=Tensor([3, 3],"float64"), offset=1, )
paddle.diag(x=Tensor([3, 3],"float64"), )
paddle.diag(x=Tensor([3],"float64"), offset=0, )
paddle.diag(Tensor([32],"float32"), )
paddle.diag(x=Tensor([2],"float64"), name="test name", )
paddle.diag(Tensor([4, 4],"float32"), )
paddle.diag(Tensor([30],"float32"), offset=2, )
paddle.diag(Tensor([4, 4],"float64"), )
paddle.diag(x=Tensor([1],"float64"), )
paddle.diag(x=Tensor([3],"int32"), )
paddle.diag(Tensor([32],"float16"), )
paddle.diag(x=Tensor([2],"float64"), )
paddle.diag(x=Tensor([3, 2],"float64"), offset=-1, )
paddle.diag(x=Tensor([3, 2],"float64"), offset=1, )
paddle.diag(x=Tensor([3, 3],"float64"), offset=0, )
paddle.diag(Tensor([16],"float32"), )
paddle.diag(Tensor([5, 5],"float32"), )
paddle.diag(Tensor([2],"float64"), )
paddle.diag(x=Tensor([2],"float64"), offset=1, padding_value=1.1, )
paddle.diag(Tensor([8],"float32"), )
paddle.diag(Tensor([5, 5],"float64"), )
paddle.diag(x=Tensor([3],"float64"), offset=10, )
paddle.diag(x=Tensor([36],"float32"), )
paddle.diag(x=Tensor([3],"float32"), )
paddle.diag(x=Tensor([2, 3],"float64"), offset=-1, )
paddle.diag(x=Tensor([3],"float64"), )
paddle.diag_embed(Tensor([3, 2],"float64"), )
paddle.diag_embed(Tensor([1, 12],"float64"), )
paddle.diag_embed(Tensor([1, 8],"float64"), )
paddle.diag_embed(Tensor([2, 3, 6],"float64"), )
paddle.diag_embed(Tensor([2, 3, 12],"float64"), )
paddle.diag_embed(Tensor([12],"float64"), )
paddle.diag_embed(Tensor([3, 8],"float64"), )
paddle.diag_embed(Tensor([1, 2],"float64"), )
paddle.diag_embed(Tensor([6],"float64"), )
paddle.diag_embed(Tensor([2],"float32"), )
paddle.diag_embed(Tensor([4],"float64"), )
paddle.diag_embed(Tensor([2],"float64"), )
paddle.diag_embed(Tensor([2, 2],"float32"), )
paddle.diag_embed(Tensor([2, 3, 4],"float64"), )
paddle.diag_embed(Tensor([3, 12],"float64"), )
paddle.diag_embed(Tensor([3, 4],"float64"), )
paddle.diag_embed(Tensor([1, 4],"float64"), )
paddle.diag_embed(Tensor([1, 2],"float32"), )
paddle.diag_embed(Tensor([8],"float64"), )
paddle.diag_embed(Tensor([3, 6],"float64"), )
paddle.diag_embed(Tensor([1, 6],"float64"), )
paddle.diag_embed(Tensor([2, 3, 8],"float64"), )
paddle.diag_embed(Tensor([2, 3, 2],"float64"), )
paddle.diagflat(Tensor([10, 10],"float64"), )
paddle.diagflat(x=Tensor([3, 2, 2, 1, 2, 4, 2, 2],"float64"), offset=2, )
paddle.diagflat(Tensor([10, 10],"float64"), offset=1, )
paddle.diagflat(Tensor([20],"float64"), )
paddle.diagflat(x=Tensor([4],"float64"), offset=1, )
paddle.diagflat(x=Tensor([4],"float64"), offset=0, )
paddle.diagflat(Tensor([20],"float64"), offset=1, )
paddle.diagflat(x=Tensor([4],"int64"), offset=0, )
paddle.diagflat(x=Tensor([4],"float32"), offset=0, )
paddle.diagflat(x=Tensor([4],"int32"), offset=0, )
paddle.diagflat(Tensor([],"float32"), 1, )
paddle.diagflat(Tensor([],"float32"), 0, )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 2],"float64"), )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 2],"float64"), axis1=2, axis2=3, )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 2],"float64"), axis1=-1, axis2=2, )
paddle.diagonal(Tensor([10, 3, 4],"float32"), offset=1, axis1=0, axis2=1, )
paddle.diagonal(Tensor([10, 3, 4],"float32"), offset=0, axis1=2, axis2=1, )
paddle.diagonal(Tensor([10, 3, 4],"float32"), offset=0, axis1=1, axis2=2, )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 2],"float64"), axis1=4, axis2=2, )
paddle.diagonal(Tensor([10, 3, 4],"float32"), )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 2],"float64"), axis1=0, axis2=3, )
paddle.diagonal(x=Tensor([6, 6, 6, 2, 2],"float64"), axis1=3, axis2=4, )
paddle.diagonal(x=Tensor([6, 6, 6],"float64"), )
paddle.diagonal(Tensor([2, 3, 4],"float32"), )
paddle.diagonal(x=Tensor([6, 6],"float32"), )
paddle.diagonal(Tensor([2, 3, 4],"float32"), offset=1, axis1=0, axis2=1, )
paddle.diagonal(x=Tensor([6, 6],"int64"), )
paddle.diagonal(Tensor([1, 2, 2],"float32"), offset=0, axis1=-1, axis2=-2, )
paddle.diagonal(x=Tensor([6, 6],"float64"), offset=-1, )
paddle.diagonal(x=Tensor([6, 6],"float64"), offset=1, )
paddle.diagonal(Tensor([2, 3, 4],"float32"), offset=0, axis1=2, axis2=1, )
paddle.diagonal(x=Tensor([6, 6],"int32"), )
paddle.diagonal(Tensor([2, 3, 4],"float32"), offset=0, axis1=1, axis2=2, )
paddle.diagonal(x=Tensor([6, 6],"float64"), )
paddle.diagonal_scatter(Tensor([10, 10],"int16"), Tensor([10],"int16"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"int8"), Tensor([10],"int8"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"int64"), Tensor([10],"int64"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"uint8"), Tensor([10],"uint8"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"int32"), Tensor([10],"int32"), offset=0, axis1=0, axis2=1, )
paddle.diagonal_scatter(Tensor([10, 10],"bool"), Tensor([10],"bool"), offset=0, axis1=0, axis2=1, )
paddle.diff(x=Tensor([100],"float64"), )
paddle.diff(x=Tensor([4, 4, 4, 4],"float64"), axis=2, )
paddle.diff(Tensor([10, 10],"float32"), n=1, axis=-1, prepend=None, append=None, )
paddle.diff(x=Tensor([4, 4, 4, 4],"float64"), )
paddle.diff(x=Tensor([4, 4, 4, 4],"float64"), axis=-2, )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=1, prepend=None, append=None, )
paddle.diff(x=Tensor([4, 4, 4],"float64"), )
paddle.diff(Tensor([2, 3],"float32"), axis=1, )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([3, 4],"float32"), append=None, )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=0, prepend=None, append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([4],"float32"), n=2, axis=0, prepend=None, append=None, )
paddle.diff(Tensor([3],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=-1, prepend=Tensor([2, 4],"float32"), append=None, )
paddle.diff(x=Tensor([4, 4],"float64"), )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=-1, prepend=Tensor([2, 4],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(x=Tensor([4],"int32"), )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=Tensor([2, 3],"float32"), append=None, )
paddle.diff(Tensor([6],"bool"), n=1, axis=-1, prepend=None, append=None, )
paddle.diff(Tensor([2, 3],"float64"), axis=1, )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=0, prepend=Tensor([2, 4],"float32"), append=None, )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=Tensor([2, 4],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([4],"float32"), n=1, axis=-1, prepend=None, append=None, )
paddle.diff(x=Tensor([4],"int64"), )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=None, append=Tensor([2, 3],"float32"), )
paddle.diff(x=Tensor([4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=-1, prepend=None, append=Tensor([2, 4],"float32"), )
paddle.diff(x=Tensor([10],"float64"), prepend=Tensor([4],"float64"), append=Tensor([4],"float64"), )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=-1, prepend=Tensor([2, 2],"float32"), append=Tensor([2, 3],"float32"), )
paddle.diff(x=Tensor([10, 4],"float64"), axis=0, prepend=Tensor([4, 4],"float64"), append=Tensor([4, 4],"float64"), )
paddle.diff(x=Tensor([4],"float64"), )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=None, append=None, )
paddle.diff(x=Tensor([10],"float64"), prepend=Tensor([4],"float64"), )
paddle.diff(Tensor([2, 4],"float32"), n=2, axis=0, prepend=Tensor([2, 4],"float32"), append=Tensor([2, 4],"float32"), )
paddle.diff(Tensor([2, 4],"float32"), n=1, axis=0, prepend=None, append=Tensor([1, 4],"float32"), )
paddle.digamma(x=Tensor([6, 6, 6],"float64"), )
paddle.digamma(Tensor([10, 12],"float32"), )
paddle.digamma(Tensor([10, 20, 1],"float32"), )
paddle.digamma(x=Tensor([3, 3],"float32"), )
paddle.digamma(Tensor([6],"float32"), )
paddle.digamma(Tensor([4, 1],"float32"), )
paddle.digamma(Tensor([],"float32"), )
paddle.digamma(Tensor([1, 2],"float32"), )
paddle.digamma(Tensor([2, 2],"float32"), )
paddle.digamma(Tensor([2, 3],"float64"), )
paddle.digamma(Tensor([2, 3],"float32"), )
paddle.digamma(Tensor([2, 5, 2],"float64"), )
paddle.digamma(Tensor([],"float64"), )
paddle.digamma(Tensor([1, 2, 2],"float32"), )
paddle.digamma(Tensor([4],"float32"), )
paddle.digamma(Tensor([2, 1],"float32"), )
paddle.digamma(Tensor([2, 2, 2],"float32"), )
paddle.digamma(Tensor([2, 5],"float64"), )
paddle.digamma(Tensor([2],"float32"), )
paddle.digamma(x=Tensor([3, 3],"float64"), )
paddle.digamma(Tensor([3],"float32"), )
paddle.digamma(Tensor([89],"float64"), )
paddle.dist(x=Tensor([2, 1, 1, 4, 4],"float64"), y=Tensor([2, 8, 7, 1, 4],"float64"), )
paddle.dist(x=Tensor([2, 4, 1, 3],"float64"), y=Tensor([4, 3, 1],"float64"), p=7, )
paddle.dist(x=Tensor([2, 2],"float64"), y=Tensor([2, 2],"float64"), p=math.inf, )
paddle.dist(x=Tensor([10],"float64"), y=Tensor([4, 10],"float64"), )
paddle.dist(x=Tensor([2, 1, 4, 4],"float64"), y=Tensor([7, 1, 4],"float64"), )
paddle.dist(Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), 0, )
paddle.dist(Tensor([2, 2, 3, 2],"float32"), Tensor([1, 1, 3, 1],"float32"), 2, )
paddle.dist(x=Tensor([2, 2],"float64"), y=Tensor([2, 2],"float64"), p=0, )
paddle.dist(x=Tensor([4, 4],"float64"), y=Tensor([4, 4],"float64"), )
paddle.dist(x=Tensor([2, 2],"float64"), y=Tensor([2, 2],"float64"), p=-math.inf, )
paddle.dist(x=Tensor([10],"float64"), y=Tensor([4, 10],"float64"), p=4, )
paddle.dist(x=Tensor([4, 4],"float32"), y=Tensor([4, 4],"float32"), )
paddle.dist(x=Tensor([4, 4],"float64"), y=Tensor([4, 4],"float64"), p=1, )
paddle.dist(x=Tensor([10],"float64"), y=Tensor([10],"float64"), )
paddle.divide(Tensor([10, 12],"float32"), Tensor([10, 12],"float32"), )
paddle.divide(Tensor([9, 6],"float32"), Tensor([9, 6],"float32"), )
paddle.divide(Tensor([10, 12],"float64"), Tensor([10, 12],"float64"), )
paddle.divide(Tensor([2, 3, 4, 5],"complex128"), Tensor([2, 3, 4, 5],"complex128"), )
paddle.divide(Tensor([2, 3, 4, 5],"float64"), Tensor([5],"complex128"), )
paddle.divide(Tensor([10, 10],"float64"), Tensor([],"float64"), )
paddle.divide(Tensor([2, 3, 4, 5],"float32"), Tensor([5],"complex64"), )
paddle.divide(Tensor([20, 20],"float64"), Tensor([],"float64"), )
paddle.divide(Tensor([2, 3, 4, 5],"complex64"), Tensor([2, 3, 4, 5],"complex64"), )
paddle.divide(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.divide(Tensor([2, 3, 4, 5],"complex64"), Tensor([4, 5],"float32"), )
paddle.divide(Tensor([2, 3, 4, 5],"complex128"), Tensor([4, 5],"float64"), )
paddle.divide(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int16"), )
paddle.divide(Tensor([3, 3],"float32"), Tensor([],"float32"), )
paddle.divide(Tensor([1, 1],"float32"), Tensor([],"float32"), )
paddle.divide(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float64"), )
paddle.divide(Tensor([4, 4],"float32"), Tensor([],"float32"), )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float16"), )
paddle.divide(Tensor([4, 5, 2],"float64"), Tensor([4, 5, 2],"float64"), )
paddle.divide(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(x=Tensor([],"float32"), y=Tensor([1],"float32"), )
paddle.divide(x=Tensor([],"float32"), y=Tensor([],"float32"), )
paddle.divide(Tensor([6],"float32"), Tensor([6],"float32"), )
paddle.divide(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(Tensor([4, 5, 2],"float32"), Tensor([4, 5, 2],"float32"), )
paddle.divide(x=Tensor([3, 1],"float64"), y=Tensor([3, 2],"float64"), name="", )
paddle.divide(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"bfloat16"), )
paddle.divide(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(Tensor([2, 3, 1, 5],"float32"), Tensor([2, 3, 1, 5],"float32"), )
paddle.divide(Tensor([1, 1, 1, 1],"float32"), Tensor([1, 1, 1, 1],"float32"), )
paddle.divide(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int64"), )
paddle.divide(Tensor([3],"float32"), Tensor([3],"float32"), )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(x=Tensor([3],"float64"), y=Tensor([3],"float64"), )
paddle.divide(Tensor([2, 3],"complex64"), Tensor([2, 3],"float32"), name="Normal_probs", )
paddle.divide(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.divide(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.divide(x=Tensor([2],"float64"), y=Tensor([2],"float64"), )
paddle.divide(x=Tensor([3],"float32"), y=Tensor([3],"float32"), )
paddle.divide(Tensor([2, 3, 3, 4],"float32"), Tensor([2, 3, 1, 4],"float32"), )
paddle.divide(x=Tensor([],"float32"), y=Tensor([1],"float32"), )
paddle.divide(Tensor([1, 1],"float64"), Tensor([],"float64"), )
paddle.divide(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"bfloat16"), )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"uint8"), )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float32"), )
paddle.divide(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(Tensor([1, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.divide(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.divide(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"bfloat16"), )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int16"), )
paddle.divide(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.divide(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(x=Tensor([3, 3, 3],"float64"), y=Tensor([3],"float64"), )
paddle.divide(Tensor([4, 4],"float64"), Tensor([1, 4],"float64"), )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int32"), )
paddle.divide(Tensor([1],"float32"), Tensor([],"float32"), name="Normal_probs", )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"uint8"), )
paddle.divide(Tensor([2, 3],"complex128"), Tensor([2, 3],"float64"), name="Normal_probs", )
paddle.divide(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), name="Normal_probs", )
paddle.divide(Tensor([3, 5],"float32"), Tensor([3, 5],"float32"), )
paddle.divide(Tensor([6],"float64"), Tensor([6],"float64"), )
paddle.divide(Tensor([2, 3, 3, 4],"float32"), Tensor([2, 3, 1, 1],"float32"), )
paddle.divide(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(Tensor([2],"float32"), Tensor([2],"float32"), )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int64"), )
paddle.divide(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.divide(Tensor([4, 3, 2],"uint8"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float32"), )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float16"), )
paddle.divide(Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"bfloat16"), )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"bool"), )
paddle.divide(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.divide(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int32"), )
paddle.divide(Tensor([4, 3, 2],"uint8"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int8"), )
paddle.divide(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float32"), )
paddle.divide(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"bfloat16"), )
paddle.divide(Tensor([],"float32"), Tensor([],"float32"), )
paddle.divide(Tensor([],"float32"), Tensor([],"float32"), name="Normal_probs", )
paddle.divide(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"complex64"), )
paddle.divide(Tensor([1, 3],"float32"), Tensor([1, 3],"float32"), )
paddle.divide(Tensor([5, 5],"float64"), Tensor([],"float64"), )
paddle.divide(Tensor([4, 4],"float64"), Tensor([],"float64"), )
paddle.divide(x=Tensor([3],"float64"), y=Tensor([3, 1],"float64"), )
paddle.divide(Tensor([5, 5],"float32"), Tensor([],"float32"), )
paddle.divide(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float16"), )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int8"), )
paddle.divide(Tensor([1],"complex64"), Tensor([],"float32"), name="Normal_probs", )
paddle.divide(x=Tensor([3, 1],"float64"), y=Tensor([3, 1],"float64"), name=None, )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.divide(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.divide(Tensor([],"float64"), Tensor([],"float64"), )
paddle.divide(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), name="Normal_probs", )
paddle.divide(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"bool"), )
paddle.divide(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(x=Tensor([],"float32"), y=Tensor([1],"float32"), )
paddle.divide(Tensor([2, 4],"float64"), Tensor([2, 1],"float64"), )
paddle.divide(Tensor([2, 3, 3, 4],"float32"), Tensor([3, 1, 4],"float32"), )
paddle.divide(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float64"), )
paddle.divide(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex128"), )
paddle.divide(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float64"), )
paddle.dot(x=Tensor([6],"float64"), y=Tensor([6],"float64"), )
paddle.dot(Tensor([3],"float32"), Tensor([3],"float32"), )
paddle.dot(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.dot(x=Tensor([6],"float32"), y=Tensor([6],"float32"), )
paddle.dot(x=Tensor([2, 3],"float64"), y=Tensor([2, 3],"float64"), )
paddle.dot(x=Tensor([6],"int64"), y=Tensor([6],"int64"), )
paddle.dot(Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.dot(x=Tensor([6],"int32"), y=Tensor([6],"int32"), )
paddle.dot(Tensor([0],"float32"), Tensor([0],"float32"), )
paddle.dot(Tensor([2],"float32"), Tensor([2],"float32"), )
paddle.dsplit(Tensor([4, 3, 6],"int64"), 2, )
paddle.dsplit(Tensor([4, 3, 6],"int64"), list[-1,1,3,], )
paddle.dsplit(Tensor([4, 2, 6],"float32"), 3, )
paddle.dsplit(Tensor([4, 2, 6],"int32"), 3, )
paddle.dsplit(Tensor([4, 2, 6],"uint8"), 3, )
paddle.dsplit(Tensor([4, 2, 6],"int64"), 3, )
paddle.dsplit(Tensor([4, 3, 6],"int64"), list[2,4,], )
paddle.dsplit(Tensor([4, 2, 6],"bool"), 3, )
paddle.dsplit(Tensor([4, 3, 6],"int64"), tuple(2,1,3,), )
paddle.dsplit(Tensor([4, 2, 6],"float16"), 3, )
paddle.dsplit(Tensor([4, 3, 6],"int64"), 3, )
paddle.dsplit(Tensor([4, 3, 6],"int64"), list[-1,], )
paddle.dsplit(Tensor([4, 2, 6],"float64"), 3, )
paddle.dstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2, 5],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([2],"float64"),Tensor([1, 2, 1],"float64"),], )
paddle.dstack(list[Tensor([],"int32"),], )
paddle.dstack(list[Tensor([],"float64"),Tensor([],"float64"),Tensor([],"float64"),], )
paddle.dstack(list[Tensor([3, 2],"float64"),], )
paddle.dstack(list[Tensor([1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),], )
paddle.dstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2],"float64"),], )
paddle.dstack(list[Tensor([1],"float64"),], )
paddle.dstack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.dstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.dstack(list[Tensor([],"int64"),], )
paddle.dstack(list[Tensor([2],"float64"),Tensor([1, 2],"float64"),], )
paddle.dstack(list[Tensor([],"float16"),], )
paddle.dstack(list[Tensor([5],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([1, 1, 1, 1],"float64"),], )
paddle.dstack(list[Tensor([],"float32"),], )
paddle.dstack(list[Tensor([],"float64"),], )
paddle.equal(Tensor([400, 1],"float64"), Tensor([400, 1],"float64"), )
paddle.equal(Tensor([91, 1],"float64"), Tensor([91, 1],"float64"), )
paddle.equal(Tensor([144],"float64"), Tensor([144],"float64"), )
paddle.equal(Tensor([2, 8, 8],"float32"), Tensor([2, 8, 8],"float32"), )
paddle.equal(Tensor([18, 18],"float32"), Tensor([18, 18],"float32"), )
paddle.equal(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.equal(Tensor([1, 28, 28],"int32"), Tensor([6, 1, 1],"int32"), )
paddle.equal(Tensor([2, 1, 8, 8],"int32"), Tensor([6, 1, 1],"int32"), )
paddle.equal(Tensor([114, 1],"float64"), Tensor([114, 1],"float64"), )
paddle.equal(Tensor([10, 20],"int32"), 0, )
paddle.equal(Tensor([13, 7],"int32"), Tensor([13, 7],"int32"), )
paddle.equal(Tensor([400],"float64"), Tensor([400],"float64"), )
paddle.equal(Tensor([8, 8],"float32"), Tensor([8, 8],"float32"), )
paddle.equal(Tensor([78],"float64"), Tensor([78],"float64"), )
paddle.equal(Tensor([2, 1],"int64"), Tensor([1],"int64"), )
paddle.equal(Tensor([4, 4],"int64"), Tensor([1],"int64"), )
paddle.equal(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.equal(Tensor([3],"int64"), Tensor([3],"int64"), )
paddle.equal(Tensor([2, 3],"float64"), 0, )
paddle.equal(x=Tensor([3, 3, 1],"float64"), y=Tensor([3, 3, 3, 1],"float64"), )
paddle.equal(Tensor([],"int64"), Tensor([1],"int64"), )
paddle.equal(Tensor([8, 4],"int64"), Tensor([1],"int64"), )
paddle.equal(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.equal(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.equal(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )
paddle.equal(Tensor([5],"float64"), Tensor([5],"float64"), )
paddle.equal(Tensor([13, 7],"int64"), 0, )
paddle.equal(Tensor([2, 3],"float32"), 0, )
paddle.equal(x=Tensor([3, 3, 3],"int64"), y=Tensor([3, 3, 3],"int64"), )
paddle.equal(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.equal(Tensor([2],"int64"), 2, )
paddle.equal(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.equal(Tensor([],"float32"), 0, )
paddle.equal(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.equal(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.equal(Tensor([2, 3],"int64"), Tensor([3],"int64"), )
paddle.equal(Tensor([2, 7],"int64"), 1, )
paddle.equal(Tensor([4],"float16"), Tensor([4],"float16"), )
paddle.equal(x=Tensor([3, 3],"float64"), y=Tensor([3],"float64"), )
paddle.equal(Tensor([1],"int64"), 10, )
paddle.equal(x=Tensor([3],"int64"), y=Tensor([3],"int64"), )
paddle.equal(x=Tensor([3, 3, 3],"int32"), y=Tensor([3, 3, 3],"int32"), )
paddle.equal(Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), )
paddle.equal(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 1, 3, 3],"float64"), )
paddle.equal(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.equal(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.equal(Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.equal(x=Tensor([3, 3, 3, 1],"float64"), y=Tensor([3, 3, 1],"float64"), )
paddle.equal(Tensor([],"int64"), 0, )
paddle.equal(Tensor([2, 4],"float32"), Tensor([2, 4],"float32"), )
paddle.equal(Tensor([3],"float32"), Tensor([3],"float32"), )
paddle.equal(Tensor([1],"int32"), Tensor([1],"int32"), )
paddle.equal(Tensor([4, 8],"int64"), Tensor([1],"int64"), )
paddle.equal(Tensor([],"float32"), 2.0, )
paddle.equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 3, 3],"float64"), )
paddle.equal(Tensor([6],"int32"), 0, )
paddle.equal(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 3],"float64"), )
paddle.equal(x=Tensor([3, 3],"float64"), y=Tensor([1, 3],"float64"), )
paddle.equal(Tensor([4],"int64"), 1, )
paddle.equal(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.equal(Tensor([4],"int64"), Tensor([4],"int64"), )
paddle.equal(Tensor([4],"int64"), 1.0, )
paddle.equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.equal(Tensor([64],"int64"), Tensor([],"int64"), )
paddle.equal(Tensor([1, 8, 8],"int32"), Tensor([6, 1, 1],"int32"), )
paddle.equal(Tensor([2, 2],"int64"), Tensor([2],"int64"), )
paddle.equal(Tensor([4],"int64"), True, )
paddle.equal(Tensor([1],"int64"), 0, )
paddle.equal(Tensor([],"float32"), Tensor([],"float32"), )
paddle.equal(Tensor([],"float64"), 0, )
paddle.equal(x=Tensor([3, 3, 3],"float32"), y=Tensor([3, 3, 3],"float32"), )
paddle.equal(x=Tensor([1, 1, 3, 3],"float64"), y=Tensor([1, 3],"float64"), )
paddle.equal_all(Tensor([10, 10],"int32"), Tensor([10, 10],"int32"), )
paddle.equal_all(Tensor([1, 2, 10, 16],"bool"), Tensor([1, 2, 10, 16],"bool"), )
paddle.equal_all(Tensor([128],"float32"), Tensor([128],"float32"), )
paddle.equal_all(Tensor([5, 10],"float32"), Tensor([5, 10],"float32"), )
paddle.equal_all(Tensor([64],"float32"), Tensor([64],"float32"), )
paddle.equal_all(Tensor([50],"float32"), Tensor([50],"float32"), )
paddle.equal_all(Tensor([16, 16],"float32"), Tensor([16, 16],"float32"), )
paddle.equal_all(Tensor([13, 7],"int64"), Tensor([13, 7],"int64"), )
paddle.equal_all(Tensor([2, 1],"int64"), Tensor([2, 1],"int64"), )
paddle.equal_all(Tensor([24],"float32"), Tensor([24],"float32"), )
paddle.equal_all(Tensor([32],"float32"), Tensor([32],"float32"), )
paddle.equal_all(Tensor([2, 1, 4],"int64"), Tensor([2, 1, 4],"int64"), )
paddle.equal_all(Tensor([],"float32"), Tensor([],"float32"), )
paddle.equal_all(x=Tensor([3, 3, 3],"int64"), y=Tensor([3, 3, 3],"int64"), )
paddle.equal_all(Tensor([16],"float32"), Tensor([16],"float32"), )
paddle.equal_all(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.equal_all(x=Tensor([3, 3, 3],"int32"), y=Tensor([3, 3, 3],"int32"), )
paddle.equal_all(Tensor([1, 2],"float32"), Tensor([1, 2],"float32"), )
paddle.equal_all(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.equal_all(Tensor([4, 4],"float32"), Tensor([4, 4],"float32"), )
paddle.equal_all(Tensor([2, 2, 4],"int64"), Tensor([2, 2, 4],"int64"), )
paddle.equal_all(x=Tensor([2, 3],"float64"), y=Tensor([1, 3],"float64"), )
paddle.equal_all(Tensor([2, 1, 2],"int64"), Tensor([2, 1, 2],"int64"), )
paddle.equal_all(x=Tensor([3, 3, 3],"float32"), y=Tensor([3, 3, 3],"float32"), )
paddle.equal_all(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3, 3],"float64"), )
paddle.equal_all(Tensor([1, 2, 3, 4],"float32"), Tensor([1, 2, 3, 4],"float32"), )
paddle.equal_all(x=Tensor([3, 3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.equal_all(Tensor([2, 2],"int64"), Tensor([2, 2],"int64"), )
paddle.equal_all(Tensor([1, 10],"float32"), Tensor([1, 10],"float32"), )
paddle.equal_all(x=Tensor([1, 2, 3],"float64"), y=Tensor([2, 3],"float64"), )
paddle.equal_all(Tensor([8],"float32"), Tensor([8],"float32"), )
paddle.equal_all(Tensor([2, 2, 3],"int64"), Tensor([2, 2, 3],"int64"), )
paddle.equal_all(x=Tensor([1, 1, 1, 2, 3],"float64"), y=Tensor([1, 1, 1, 2, 3],"float64"), )
paddle.erf(Tensor([4, 2, 3, 5],"float64"), )
paddle.erf(Tensor([11, 17],"float64"), )
paddle.erf(Tensor([4, 2, 3, 5, 4],"float64"), )
paddle.erf(Tensor([4, 2],"float64"), )
paddle.erf(x=Tensor([2, 2],"float32"), )
paddle.erf(Tensor([4],"float64"), )
paddle.erf(x=Tensor([4],"float32"), )
paddle.erf(x=Tensor([2, 2],"float64"), )
paddle.erf(x=Tensor([4],"float64"), )
paddle.erf(Tensor([],"float32"), )
paddle.erf(Tensor([4, 2, 3],"float64"), )
paddle.erfinv(x=Tensor([4, 2, 3, 5],"float64"), )
paddle.erfinv(x=Tensor([4, 2, 3, 5, 4],"float64"), )
paddle.erfinv(x=Tensor([4, 2],"float64"), )
paddle.erfinv(Tensor([5],"float32"), )
paddle.erfinv(x=Tensor([4, 2, 3],"float64"), )
paddle.erfinv(Tensor([],"float32"), )
paddle.erfinv(x=Tensor([4],"float32"), )
paddle.erfinv(x=Tensor([4],"float64"), )
paddle.exp(Tensor([2, 3, 10, 10, 1],"float32"), )
paddle.exp(Tensor([400],"float64"), )
paddle.exp(Tensor([192],"float32"), )
paddle.exp(x=Tensor([380],"float32"), )
paddle.exp(Tensor([256],"float32"), )
paddle.exp(Tensor([13, 13],"float32"), )
paddle.exp(Tensor([400, 1],"float64"), )
paddle.exp(Tensor([640],"float32"), )
paddle.exp(Tensor([13, 3, 3],"float32"), )
paddle.exp(x=Tensor([324],"float32"), )
paddle.exp(Tensor([384],"float32"), )
paddle.exp(Tensor([512, 1],"float32"), )
paddle.exp(Tensor([29, 29],"float32"), )
paddle.exp(Tensor([512],"float32"), )
paddle.exp(Tensor([304],"float32"), )
paddle.exp(Tensor([512],"float64"), )
paddle.exp(Tensor([144],"float64"), )
paddle.exp(Tensor([10, 20],"float64"), )
paddle.exp(Tensor([2, 3, 11, 11, 1],"float32"), )
paddle.exp(Tensor([2, 3, 12, 12, 1],"float32"), )
paddle.exp(Tensor([10, 12],"float64"), )
paddle.exp(Tensor([114, 1],"float64"), )
paddle.exp(Tensor([100, 1],"float32"), )
paddle.exp(x=Tensor([36],"float32"), )
paddle.exp(x=Tensor([3, 3, 3],"float64"), )
paddle.exp(Tensor([2, 3],"float64"), )
paddle.exp(Tensor([2, 3, 4],"float32"), )
paddle.exp(Tensor([4, 3, 2],"float64"), )
paddle.exp(Tensor([10, 3],"float64"), )
paddle.exp(Tensor([4],"float64"), )
paddle.exp(Tensor([3, 3],"float32"), )
paddle.exp(Tensor([6],"float32"), )
paddle.exp(Tensor([1, 2, 3, 4],"float32"), )
paddle.exp(Tensor([2, 4],"float64"), )
paddle.exp(Tensor([10, 3],"float32"), )
paddle.exp(Tensor([2, 2],"float64"), )
paddle.exp(Tensor([50, 1],"float32"), )
paddle.exp(x=Tensor([45],"float32"), )
paddle.exp(Tensor([1, 1],"float32"), )
paddle.exp(Tensor([3],"float32"), )
paddle.exp(Tensor([64],"float32"), )
paddle.exp(Tensor([10, 2],"float32"), )
paddle.exp(Tensor([78],"float64"), )
paddle.exp(Tensor([11, 1, 1],"float32"), )
paddle.exp(Tensor([2, 3],"complex128"), )
paddle.exp(Tensor([3],"float64"), )
paddle.exp(Tensor([10, 2, 2],"float32"), )
paddle.exp(x=Tensor([3, 3, 3],"float32"), )
paddle.exp(Tensor([5],"float32"), )
paddle.exp(Tensor([1],"float64"), )
paddle.exp(Tensor([12],"float32"), )
paddle.exp(Tensor([9, 1, 1],"float32"), )
paddle.exp(Tensor([22, 1, 1],"float32"), )
paddle.exp(Tensor([10, 2],"float64"), )
paddle.exp(Tensor([3, 3],"float64"), )
paddle.exp(Tensor([],"float64"), )
paddle.exp(Tensor([2],"float32"), )
paddle.exp(Tensor([4, 4],"float32"), )
paddle.exp(Tensor([7, 7],"float32"), )
paddle.exp(Tensor([5, 5],"float64"), )
paddle.exp(Tensor([4, 6],"float64"), )
paddle.exp(Tensor([2, 2],"float32"), )
paddle.exp(Tensor([4, 3, 2],"float32"), )
paddle.exp(Tensor([1],"float32"), )
paddle.exp(Tensor([13, 3],"float32"), )
paddle.exp(Tensor([6],"float64"), )
paddle.exp(Tensor([2, 3],"complex64"), )
paddle.exp(Tensor([2, 5],"float64"), )
paddle.exp(Tensor([2, 3],"float32"), )
paddle.exp(Tensor([1, 2, 3],"float32"), )
paddle.exp(Tensor([10],"float32"), )
paddle.exp(Tensor([3, 5],"float32"), )
paddle.exp(Tensor([1],"complex64"), )
paddle.exp(Tensor([10, 2, 1, 2],"float32"), )
paddle.exp(Tensor([2, 1],"float64"), )
paddle.exp(Tensor([5, 5],"float32"), )
paddle.exp(Tensor([3, 2, 5],"float32"), )
paddle.exp(Tensor([5],"float64"), )
paddle.exp(Tensor([2, 1, 2],"float32"), )
paddle.exp(Tensor([91, 1],"float64"), )
paddle.exp(Tensor([2],"float64"), )
paddle.exp(Tensor([],"float32"), )
paddle.exp(Tensor([32, 1],"float32"), )
paddle.exp(Tensor([9, 1],"float32"), )
paddle.exp(Tensor([3, 5],"float64"), )
paddle.exp(Tensor([21, 1, 1],"float32"), )
paddle.exp(Tensor([1, 2, 3, 4],"float64"), )
paddle.exp(Tensor([66],"float32"), )
paddle.expand(Tensor([300, 1],"int32"), list[-1,1,], )
paddle.expand(Tensor([1, 1, 25, 35],"float32"), shape=list[4,1,-1,-1,], )
paddle.expand(Tensor([13, 4, 2, 1],"float32"), list[13,4,2,4,], name=None, )
paddle.expand(Tensor([2, 1, 7, 14],"float32"), shape=list[2,13,7,14,], )
paddle.expand(Tensor([1, 1, 38, 25],"float32"), shape=list[4,1,-1,-1,], )
paddle.expand(Tensor([13, 4, 7, 1],"float32"), list[13,4,7,7,], name=None, )
paddle.expand(Tensor([1, 1, 38, 25],"float32"), shape=list[1,1,-1,-1,], )
paddle.expand(Tensor([1, 1, 26, 34],"float32"), shape=list[4,1,-1,-1,], )
paddle.expand(Tensor([1, 1, 25, 34],"float32"), shape=list[4,1,-1,-1,], )
paddle.expand(Tensor([13, 4, 4, 1],"float32"), list[13,4,4,4,], name=None, )
paddle.expand(Tensor([1, 1, 25, 38],"float32"), shape=list[1,1,-1,-1,], )
paddle.expand(Tensor([1, 1, 26, 38],"float32"), shape=list[4,1,-1,-1,], )
paddle.expand(Tensor([1, 1, 27, 37],"float32"), shape=list[4,1,-1,-1,], )
paddle.expand(Tensor([13, 1, 7, 7],"bool"), list[13,4,7,7,], name=None, )
paddle.expand(Tensor([13, 1, 5, 1, 5],"float32"), list[13,4,5,1,-1,], )
paddle.expand(Tensor([117, 1],"int32"), list[-1,1,], )
paddle.expand(Tensor([13, 1, 2, 4],"bool"), list[13,4,2,4,], name=None, )
paddle.expand(Tensor([414, 1],"int32"), list[-1,1,], )
paddle.expand(Tensor([13, 1, 4, 7],"bool"), list[13,4,4,7,], name=None, )
paddle.expand(Tensor([52, 1, 7, 1],"float32"), list[52,4,7,-1,], )
paddle.expand(Tensor([1, 1, 34, 27],"float32"), shape=list[4,1,-1,-1,], )
paddle.expand(Tensor([1, 1, 25, 39],"float32"), shape=list[1,1,-1,-1,], )
paddle.expand(Tensor([13, 1, 4, 4],"bool"), list[13,4,4,4,], name=None, )
paddle.expand(Tensor([128, 1],"int64"), tuple(128,128,), )
paddle.expand(Tensor([10, 1, 10, 1],"float32"), tuple(10,10,10,10,), )
paddle.expand(Tensor([1, 1, 25, 39],"float32"), shape=list[4,1,-1,-1,], )
paddle.expand(Tensor([10, 10],"float32"), tuple(10,10,), )
paddle.expand(Tensor([1, 1, 25, 36],"float32"), shape=list[4,1,-1,-1,], )
paddle.expand(Tensor([432, 1],"int32"), list[-1,1,], )
paddle.expand(Tensor([1, 1, 34, 25],"float32"), shape=list[4,1,-1,-1,], )
paddle.expand(Tensor([1, 1, 25, 34],"float32"), shape=list[1,1,-1,-1,], )
paddle.expand(Tensor([1, 1, 25, 37],"float32"), shape=list[4,1,-1,-1,], )
paddle.expand(Tensor([108, 1],"int32"), list[-1,1,], )
paddle.expand(Tensor([13, 1, 16],"float32"), shape=tuple(13,7,16,), )
paddle.expand(Tensor([512],"int64"), shape=list[1,-1,], )
paddle.expand(Tensor([13, 4, 1, 1, 1, 8],"float32"), list[13,4,3,1,1,-1,], )
paddle.expand(Tensor([1, 1, 25, 38],"float32"), shape=list[4,1,-1,-1,], )
paddle.expand(Tensor([450, 1],"int32"), list[-1,1,], )
paddle.expand(Tensor([13, 4, 4, 1],"float32"), list[13,4,4,7,], name=None, )
paddle.expand(Tensor([13, 4, 2, 1],"float32"), list[13,4,2,2,], name=None, )
paddle.expand(Tensor([35, 1],"int32"), list[-1,1,], )
paddle.expand(Tensor([1, 3, 1, 1, 1, 1],"float32"), list[1,3,4,4,1,1,], )
paddle.expand(x=Tensor([3],"int32"), shape=tuple(3,3,), )
paddle.expand(Tensor([1, 3],"int64"), list[2,3,], )
paddle.expand(Tensor([1, 1, 32],"int32"), list[13,2,32,], )
paddle.expand(x=Tensor([3, 1],"int64"), shape=tuple(3,2,), )
paddle.expand(Tensor([3, 2],"float32"), shape=list[512,3,2,], )
paddle.expand(Tensor([1, 1, 7, 7],"int64"), list[13,4,7,7,], )
paddle.expand(Tensor([1, 32],"int64"), list[15,32,], )
paddle.expand(Tensor([1, 1],"int64"), list[6,1,], )
paddle.expand(Tensor([],"float32"), shape=list[3,3,], )
paddle.expand(Tensor([1, 1, 7, 7],"int64"), list[52,4,7,7,], )
paddle.expand(Tensor([13, 1, 7, 1],"float32"), list[13,4,7,-1,], )
paddle.expand(Tensor([4, 1],"int64"), tuple(4,32,), name=None, )
paddle.expand(x=Tensor([1],"int64"), shape=list[2,], )
paddle.expand(Tensor([1, 10, 1, 1],"float32"), list[-1,-1,32,32,], )
paddle.expand(x=Tensor([1],"int32"), shape=list[1,], )
paddle.expand(Tensor([],"float32"), shape=list[1,1,], )
paddle.expand(Tensor([13, 1, 2, 2],"bool"), list[13,4,2,2,], name=None, )
paddle.expand(Tensor([15, 1],"int64"), tuple(15,32,), name=None, )
paddle.expand(Tensor([13, 1, 1],"int32"), list[13,2,32,], )
paddle.expand(Tensor([1, 32],"int64"), list[14,32,], )
paddle.expand(Tensor([1, 10],"float32"), tuple(10,10,), )
paddle.expand(Tensor([8, 1],"int64"), tuple(8,32,), name=None, )
paddle.expand(Tensor([1, 11],"int64"), list[1,11,], )
paddle.expand(Tensor([1, 8],"int64"), list[14,8,], )
paddle.expand(x=Tensor([3],"int64"), shape=list[2,3,], )
paddle.expand(x=Tensor([1],"int64"), shape=list[1,], )
paddle.expand(Tensor([20, 1],"int32"), list[-1,1,], )
paddle.expand(x=Tensor([2],"int64"), shape=list[1,-1,], )
paddle.expand(Tensor([1, 1],"int64"), list[1,1,], )
paddle.expand(Tensor([1, 32],"int64"), list[8,32,], )
paddle.expand(Tensor([2, 1, 8],"float32"), list[-1,8,-1,], )
paddle.expand(Tensor([1, 1],"int64"), list[14,1,], )
paddle.expand(Tensor([2, 1],"float32"), list[2,3072,], )
paddle.expand(Tensor([96],"float32"), shape=list[128,96,], )
paddle.expand(Tensor([1, 3],"int64"), list[6,3,], )
paddle.expand(x=Tensor([2, 2],"int64"), shape=Tensor([3],"int32"), )
paddle.expand(x=Tensor([1],"int64"), shape=list[1,1,1,1,1,1,], )
paddle.expand(Tensor([1, 1, 7],"int64"), shape=list[14,2,-1,], )
paddle.expand(Tensor([1, 1],"int64"), list[2,1,], )
paddle.expand(Tensor([1, 3],"int64"), list[4,3,], )
paddle.expand(Tensor([64],"float32"), shape=list[1,8192,64,], )
paddle.expand(Tensor([1, 10],"int64"), list[14,10,], )
paddle.expand(Tensor([1, 10, 1],"float32"), tuple(10,10,10,10,), )
paddle.expand(Tensor([1, 1],"int64"), list[4,1,], )
paddle.expand(Tensor([14, 1],"int64"), tuple(14,32,), name=None, )
paddle.expand(x=Tensor([1, 1, 1],"int64"), shape=Tensor([3],"int32"), )
paddle.expand(Tensor([1, 10, 1, 1],"float32"), list[-1,-1,256,256,], )
paddle.expand(Tensor([],"float32"), shape=list[1,], )
paddle.expand(Tensor([1, 20],"int64"), list[1,20,], )
paddle.expand(Tensor([30, 1],"int32"), list[-1,1,], )
paddle.expand(Tensor([1, 3],"int64"), list[14,3,], )
paddle.expand(Tensor([1, 32],"int64"), list[4,32,], )
paddle.expand(Tensor([1, 7],"int64"), list[14,7,], )
paddle.expand(Tensor([4],"int64"), list[13,7,4,], )
paddle.expand(x=Tensor([1],"int64"), shape=Tensor([2],"int32"), )
paddle.expand(Tensor([],"float32"), shape=list[], )
paddle.expand(Tensor([80, 1],"int32"), list[-1,1,], )
paddle.expand(x=Tensor([1],"float64"), shape=Tensor([2],"int32"), )
paddle.expand(x=Tensor([3],"float64"), shape=list[3,3,], )
paddle.expand(Tensor([1, 7, 7],"float32"), shape=list[13,7,7,], )
paddle.expand_as(x=Tensor([3],"int64"), y=Tensor([2, 3],"int64"), )
paddle.expand_as(Tensor([3],"float32"), Tensor([6, 3],"int64"), )
paddle.expand_as(Tensor([3],"float32"), Tensor([1, 3],"int64"), )
paddle.expand_as(Tensor([],"float32"), Tensor([3, 3],"float32"), )
paddle.expand_as(x=Tensor([3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.expand_as(Tensor([5],"float32"), Tensor([4, 5],"int64"), )
paddle.expand_as(Tensor([],"float32"), Tensor([1],"float32"), )
paddle.expand_as(x=Tensor([1],"int32"), y=Tensor([1],"int32"), )
paddle.expand_as(Tensor([5],"float32"), Tensor([2, 5],"int64"), )
paddle.expand_as(Tensor([1],"float32"), Tensor([1, 1],"int64"), )
paddle.expand_as(Tensor([6, 1],"float32"), Tensor([6, 4],"float32"), )
paddle.expand_as(Tensor([4],"float32"), Tensor([6, 4],"int64"), )
paddle.expand_as(Tensor([2],"float32"), Tensor([1, 2],"int64"), )
paddle.expand_as(Tensor([3],"float32"), Tensor([4, 3],"int64"), )
paddle.expand_as(x=Tensor([3],"int32"), y=Tensor([3, 3],"int32"), )
paddle.expand_as(Tensor([4],"float32"), Tensor([4, 4],"int64"), )
paddle.expand_as(Tensor([3, 1],"float32"), Tensor([3, 3],"float32"), )
paddle.expand_as(x=Tensor([3, 1],"int64"), y=Tensor([3, 2],"int64"), )
paddle.expand_as(Tensor([4],"float32"), Tensor([2, 4],"int64"), )
paddle.expand_as(x=Tensor([1],"int64"), y=Tensor([1, 1, 1, 1, 1, 1],"int64"), )
paddle.expand_as(x=Tensor([2, 2],"int32"), y=Tensor([1, 2, 2],"int32"), )
paddle.expand_as(x=Tensor([2],"int32"), y=Tensor([2, 1, 2],"int32"), )
paddle.expand_as(Tensor([5],"float32"), Tensor([6, 5],"int64"), )
paddle.expand_as(Tensor([3],"float32"), Tensor([2, 3],"int64"), )
paddle.expand_as(Tensor([],"float32"), Tensor([],"float32"), )
paddle.expm1(x=Tensor([6, 6, 6],"float64"), )
paddle.expm1(x=Tensor([6, 6],"float64"), )
paddle.expm1(Tensor([3, 3],"float64"), )
paddle.expm1(Tensor([4],"float64"), )
paddle.expm1(Tensor([],"float32"), )
paddle.expm1(Tensor([2],"float64"), )
paddle.expm1(Tensor([2, 2],"float64"), )
paddle.expm1(Tensor([2],"float32"), )
paddle.expm1(x=Tensor([3, 3, 3],"float16"), )
paddle.expm1(Tensor([64],"float32"), )
paddle.expm1(x=Tensor([6, 6],"float32"), )
paddle.eye(10, dtype="int64", )
paddle.eye(2, 2, )
paddle.eye(10, num_columns=7, dtype="float64", )
paddle.eye(num_rows=3, )
paddle.eye(5, )
paddle.eye(2, )
paddle.eye(4, )
paddle.eye(Tensor([],"int64"), Tensor([],"int64"), )
paddle.eye(num_rows=5, num_columns=3, dtype="float32", )
paddle.eye(num_rows=3, num_columns=5, )
paddle.eye(num_rows=36, )
paddle.eye(10, )
paddle.eye(num_rows=5, dtype=type(numpy.float16), )
paddle.eye(2, dtype=Dtype(float32), )
paddle.eye(3, )
paddle.eye(1, dtype="float32", )
paddle.eye(2, dtype=Dtype(float64), )
paddle.eye(2, dtype="float32", )
paddle.eye(1, dtype="float64", )
paddle.eye(num_rows=Tensor([1],"float64"), num_columns=Tensor([1],"float64"), dtype="float32", )
paddle.eye(num_rows=5, num_columns=3, dtype="float64", )
paddle.eye(num_rows=5, dtype="int64", )
paddle.eye(num_rows=4096, num_columns=4096, dtype=Dtype(float32), )
paddle.eye(num_rows=3, dtype="float16", )
paddle.fft.fft(x=Tensor([2, 3],"complex128"), norm="ortho", )
paddle.fft.fft(x=Tensor([7],"complex128"), norm="forward", )
paddle.fft.fft(x=Tensor([7],"complex128"), )
paddle.fft.fft(x=Tensor([7],"complex128"), norm="ortho", )
paddle.fft.fft(x=Tensor([7],"float32"), )
paddle.fft.fft(x=Tensor([7],"float64"), )
paddle.fft.fft(x=Tensor([7],"complex128"), n=1, )
paddle.fft.fft(x=Tensor([7],"complex128"), axis=0, )
paddle.fft.fft2(x=Tensor([2, 2, 4],"complex128"), )
paddle.fft.fft2(x=Tensor([3, 3, 2, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.fft2(x=Tensor([4, 4],"float32"), )
paddle.fft.fft2(x=Tensor([2, 4],"float64"), )
paddle.fft.fft2(x=Tensor([2, 4, 2],"complex128"), axes=tuple(1,2,), norm="forward", )
paddle.fft.fft2(x=Tensor([3, 2, 4, 2],"complex128"), )
paddle.fft.fft2(x=Tensor([3, 4],"complex128"), )
paddle.fft.fft2(x=Tensor([2, 4, 2],"complex128"), axes=tuple(1,2,), norm="ortho", )
paddle.fft.fft2(x=Tensor([4, 4],"float64"), )
paddle.fft.fft2(x=Tensor([2, 4, 2],"complex128"), axes=tuple(1,2,), )
paddle.fft.fftfreq(n=39, d=0.5, )
paddle.fft.fftfreq(n=14, d=0.03703703731298447, )
paddle.fft.fftfreq(n=4, d=0.5, )
paddle.fft.fftfreq(n=10, d=0.1, )
paddle.fft.fftn(x=Tensor([4, 4, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )
paddle.fft.fftn(Tensor([2, 2, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.fftn(x=Tensor([4, 4, 6],"float64"), s=list[1,], )
paddle.fft.fftn(x=Tensor([4, 4],"float64"), )
paddle.fft.fftn(x=Tensor([3, 4],"complex128"), norm="forward", )
paddle.fft.fftn(Tensor([3, 3, 2, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.fftn(Tensor([2, 4],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.fftn(Tensor([2, 4, 2],"complex128"), None, tuple(1,2,), "ortho", None, )
paddle.fft.fftn(Tensor([2, 4, 2],"complex128"), None, tuple(1,2,), "forward", None, )
paddle.fft.fftn(Tensor([4, 4],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.fftn(Tensor([2, 4, 2],"complex128"), None, tuple(1,2,), "backward", None, )
paddle.fft.fftn(x=Tensor([4, 4],"float32"), )
paddle.fft.fftn(x=Tensor([2, 4, 2],"float64"), )
paddle.fft.fftn(Tensor([3, 2, 4, 2],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.fftn(Tensor([3, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.fftn(x=Tensor([3, 4],"complex128"), norm="ortho", )
paddle.fft.fftn(x=Tensor([4, 4, 6],"float64"), s=list[2,4,], )
paddle.fft.fftn(Tensor([4, 4],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.fftshift(x=Tensor([4, 5, 4, 4],"complex128"), )
paddle.fft.fftshift(x=Tensor([4, 5, 4, 4],"float64"), )
paddle.fft.fftshift(x=Tensor([4, 5, 4, 4],"complex128"), axes=tuple(1,3,), )
paddle.fft.fftshift(x=Tensor([4, 5, 4, 4],"complex128"), axes=3, )
paddle.fft.fftshift(x=Tensor([2, 4, 2],"float64"), )
paddle.fft.fftshift(x=Tensor([4, 5, 4],"float64"), )
paddle.fft.fftshift(x=Tensor([10],"float64"), )
paddle.fft.fftshift(x=Tensor([10],"float32"), )
paddle.fft.hfft(x=Tensor([2, 4, 3],"complex128"), )
paddle.fft.hfft(x=Tensor([3, 2, 2, 3],"complex128"), n=2, )
paddle.fft.hfft(x=Tensor([2, 4],"complex128"), norm="ortho", )
paddle.fft.hfft(x=Tensor([2, 4],"complex128"), norm="forward", )
paddle.fft.hfft(x=Tensor([3, 2, 2, 3],"complex128"), n=2, axis=1, )
paddle.fft.hfft(x=Tensor([3, 2, 2, 3],"complex128"), )
paddle.fft.hfft(x=Tensor([10],"complex64"), )
paddle.fft.hfft(x=Tensor([2, 4],"complex128"), )
paddle.fft.hfft(x=Tensor([10],"complex128"), )
paddle.fft.hfft2(x=Tensor([3, 4],"complex64"), )
paddle.fft.hfft2(x=Tensor([1, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.hfft2(x=Tensor([1, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.hfft2(x=Tensor([1, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.hfft2(x=Tensor([3, 4],"complex128"), )
paddle.fft.hfft2(x=Tensor([3, 4, 5],"complex128"), )
paddle.fft.hfft2(x=Tensor([3, 1, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.hfft2(x=Tensor([3, 3, 3, 3],"complex128"), )
paddle.fft.hfftn(Tensor([3, 4],"complex64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(Tensor([3, 1, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(x=Tensor([3, 4, 5],"complex128"), )
paddle.fft.hfftn(x=Tensor([1, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.hfftn(x=Tensor([3],"complex128"), )
paddle.fft.hfftn(x=Tensor([2, 3, 1, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.hfftn(Tensor([3, 4, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(x=Tensor([1, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.hfftn(Tensor([3, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(x=Tensor([3],"complex64"), )
paddle.fft.hfftn(Tensor([1, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, )
paddle.fft.hfftn(Tensor([1, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, )
paddle.fft.hfftn(Tensor([1, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, )
paddle.fft.hfftn(x=Tensor([3, 4],"complex128"), )
paddle.fft.hfftn(Tensor([3, 3, 3, 3],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.hfftn(x=Tensor([2, 3, 4, 2],"complex128"), )
paddle.fft.hfftn(x=Tensor([1, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.ifft(x=Tensor([7],"complex128"), axis=0, )
paddle.fft.ifft(x=Tensor([7],"complex128"), n=1, )
paddle.fft.ifft(x=Tensor([7],"complex128"), norm="ortho", )
paddle.fft.ifft(x=Tensor([7],"float32"), )
paddle.fft.ifft(x=Tensor([7],"float64"), )
paddle.fft.ifft(x=Tensor([7],"complex128"), )
paddle.fft.ifft(x=Tensor([7],"complex128"), norm="forward", )
paddle.fft.ifft(x=Tensor([2, 3],"complex128"), norm="ortho", )
paddle.fft.ifft2(x=Tensor([2, 4],"float64"), )
paddle.fft.ifft2(x=Tensor([2, 4, 2],"complex128"), axes=tuple(1,2,), )
paddle.fft.ifft2(x=Tensor([4, 4],"float32"), )
paddle.fft.ifft2(x=Tensor([3, 3, 2, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.ifft2(x=Tensor([4, 4],"float64"), )
paddle.fft.ifft2(x=Tensor([2, 2, 4],"complex128"), )
paddle.fft.ifft2(x=Tensor([3, 4],"complex128"), )
paddle.fft.ifft2(x=Tensor([2, 4, 2],"complex128"), axes=tuple(1,2,), norm="forward", )
paddle.fft.ifft2(x=Tensor([3, 2, 4, 2],"complex128"), )
paddle.fft.ifft2(x=Tensor([2, 4, 2],"complex128"), axes=tuple(1,2,), norm="ortho", )
paddle.fft.ifftn(x=Tensor([4, 4, 6, 2],"float64"), s=list[2,4,], axes=tuple(0,1,), )
paddle.fft.ifftn(Tensor([2, 4],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(x=Tensor([3, 4],"complex128"), norm="forward", )
paddle.fft.ifftn(x=Tensor([2, 4, 2],"float64"), )
paddle.fft.ifftn(Tensor([2, 4, 2],"complex128"), None, tuple(1,2,), "backward", None, )
paddle.fft.ifftn(x=Tensor([4, 4],"float64"), )
paddle.fft.ifftn(Tensor([4, 4],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(x=Tensor([4, 4],"float32"), )
paddle.fft.ifftn(x=Tensor([3, 4],"complex128"), norm="ortho", )
paddle.fft.ifftn(Tensor([2, 4, 2],"complex128"), None, tuple(1,2,), "forward", None, )
paddle.fft.ifftn(x=Tensor([4, 4, 6],"float64"), s=list[2,4,], )
paddle.fft.ifftn(Tensor([4, 4],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([2, 4, 2],"complex128"), None, tuple(1,2,), "ortho", None, )
paddle.fft.ifftn(x=Tensor([4, 4, 6],"float64"), s=list[1,], )
paddle.fft.ifftn(Tensor([3, 2, 4, 2],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([3, 3, 2, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([3, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ifftn(Tensor([2, 2, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 4],"float64"), )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 4],"complex128"), axes=3, )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 4],"complex128"), axes=tuple(0,3,), )
paddle.fft.ifftshift(x=Tensor([4, 5, 4, 4],"complex128"), )
paddle.fft.ifftshift(x=Tensor([5],"float64"), )
paddle.fft.ifftshift(x=Tensor([5],"float32"), )
paddle.fft.ifftshift(x=Tensor([2, 4, 2],"float64"), )
paddle.fft.ifftshift(x=Tensor([4, 5, 4],"float64"), )
paddle.fft.ihfft(x=Tensor([2, 4],"float64"), norm="ortho", )
paddle.fft.ihfft(x=Tensor([4],"float64"), )
paddle.fft.ihfft(x=Tensor([2, 4, 3, 3],"float64"), n=2, axis=1, )
paddle.fft.ihfft(x=Tensor([4, 3],"float64"), )
paddle.fft.ihfft(x=Tensor([4, 3, 3],"float64"), )
paddle.fft.ihfft(x=Tensor([4],"float32"), )
paddle.fft.ihfft(x=Tensor([2, 4, 3, 3],"float64"), )
paddle.fft.ihfft(x=Tensor([2, 4, 3, 3],"float64"), n=2, )
paddle.fft.ihfft(x=Tensor([2, 4],"float64"), norm="forward", )
paddle.fft.ihfft2(x=Tensor([4, 3, 3, 3],"float64"), )
paddle.fft.ihfft2(x=Tensor([4, 3, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.ihfft2(x=Tensor([3, 4, 5],"float64"), )
paddle.fft.ihfft2(x=Tensor([3, 4],"float32"), )
paddle.fft.ihfft2(x=Tensor([4, 3, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.ihfft2(x=Tensor([3, 4],"float64"), )
paddle.fft.ihfft2(x=Tensor([4, 3, 3],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.ihfft2(x=Tensor([4, 3, 3],"float64"), s=tuple(1,2,), )
paddle.fft.ihfftn(Tensor([4, 3, 3, 3],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(x=Tensor([4, 3, 5, 2],"float64"), )
paddle.fft.ihfftn(x=Tensor([4, 3, 2],"float64"), s=tuple(1,2,), )
paddle.fft.ihfftn(Tensor([4, 3, 3],"float64"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(x=Tensor([4, 3, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.ihfftn(Tensor([4, 3, 3],"float64"), tuple(1,2,), tuple(0,2,), "ortho", None, )
paddle.fft.ihfftn(x=Tensor([4, 3, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.ihfftn(Tensor([3, 4],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(x=Tensor([4],"float64"), )
paddle.fft.ihfftn(x=Tensor([4, 3, 5],"float64"), )
paddle.fft.ihfftn(x=Tensor([4, 3, 2],"float64"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.ihfftn(x=Tensor([4],"float32"), )
paddle.fft.ihfftn(Tensor([3, 4],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([3, 4, 5],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.ihfftn(Tensor([4, 3, 3],"float64"), tuple(1,2,), tuple(0,2,), "backward", None, )
paddle.fft.ihfftn(x=Tensor([4, 3],"float64"), )
paddle.fft.ihfftn(Tensor([4, 3, 3],"float64"), tuple(1,2,), tuple(0,2,), "forward", None, )
paddle.fft.irfft(x=Tensor([4, 4, 2],"complex128"), n=2, )
paddle.fft.irfft(x=Tensor([3, 4, 4, 2],"complex128"), )
paddle.fft.irfft(x=Tensor([3, 4, 4],"complex128"), )
paddle.fft.irfft(x=Tensor([3, 2, 4],"complex128"), n=2, axis=1, )
paddle.fft.irfft(x=Tensor([3, 4],"complex128"), )
paddle.fft.irfft(x=Tensor([3, 4, 4],"complex128"), norm="ortho", )
paddle.fft.irfft(x=Tensor([3, 4, 4],"complex128"), norm="forward", )
paddle.fft.irfft(x=Tensor([3],"complex64"), )
paddle.fft.irfft(x=Tensor([3],"complex128"), )
paddle.fft.irfft2(x=Tensor([3, 2, 4, 5],"complex128"), )
paddle.fft.irfft2(x=Tensor([1, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.irfft2(x=Tensor([1, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.irfft2(x=Tensor([3, 1, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.irfft2(x=Tensor([3, 4, 5],"complex128"), )
paddle.fft.irfft2(x=Tensor([3, 4],"complex64"), )
paddle.fft.irfft2(x=Tensor([1, 4, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.irfft2(x=Tensor([3, 4],"complex128"), )
paddle.fft.irfftn(Tensor([3, 2, 4, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(x=Tensor([2, 3, 4, 2],"complex128"), )
paddle.fft.irfftn(x=Tensor([2, 3, 1, 2],"complex128"), s=tuple(1,2,), )
paddle.fft.irfftn(Tensor([1, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "forward", None, )
paddle.fft.irfftn(Tensor([3, 1, 2],"complex128"), tuple(1,2,), tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(Tensor([3, 4],"complex64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(x=Tensor([1, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="ortho", )
paddle.fft.irfftn(Tensor([3, 4],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(x=Tensor([3],"complex64"), )
paddle.fft.irfftn(Tensor([3, 4, 5],"complex128"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.irfftn(x=Tensor([1, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), )
paddle.fft.irfftn(Tensor([1, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "backward", None, )
paddle.fft.irfftn(x=Tensor([3, 4],"complex128"), )
paddle.fft.irfftn(x=Tensor([1, 3, 2, 2],"complex128"), s=tuple(1,2,), axes=tuple(0,2,), norm="forward", )
paddle.fft.irfftn(x=Tensor([3, 4, 5],"complex128"), )
paddle.fft.irfftn(x=Tensor([3],"complex128"), )
paddle.fft.irfftn(Tensor([1, 4, 2],"complex128"), tuple(1,2,), tuple(0,2,), "ortho", None, )
paddle.fft.rfft(x=Tensor([2, 2, 2],"float64"), n=1, norm="ortho", )
paddle.fft.rfft(x=Tensor([2, 2, 2],"float64"), n=1, norm="backward", )
paddle.fft.rfft(x=Tensor([2, 2, 2],"int64"), )
paddle.fft.rfft(x=Tensor([2, 2, 2],"float32"), )
paddle.fft.rfft(x=Tensor([2, 2, 2],"float64"), )
paddle.fft.rfft(x=Tensor([2, 2, 2],"float64"), n=1, )
paddle.fft.rfft(x=Tensor([2, 2, 2],"int32"), )
paddle.fft.rfft(x=Tensor([2, 2, 2],"float64"), n=1, norm="forward", )
paddle.fft.rfft(x=Tensor([2, 2, 2],"float64"), n=1, norm="ortho", axis=2, )
paddle.fft.rfft2(x=Tensor([2, 2, 2],"int64"), )
paddle.fft.rfft2(x=Tensor([2, 2, 2],"float64"), )
paddle.fft.rfft2(x=Tensor([2, 2, 2],"float32"), )
paddle.fft.rfft2(x=Tensor([2, 2, 2],"float64"), s=list[1,2,], norm="ortho", axes=None, )
paddle.fft.rfft2(x=Tensor([2, 2, 2],"float64"), s=list[1,2,], norm="ortho", )
paddle.fft.rfft2(x=Tensor([2, 2, 2],"float64"), s=list[1,2,], )
paddle.fft.rfft2(x=Tensor([2, 2, 2],"int32"), )
paddle.fft.rfft2(x=Tensor([2, 2, 2],"float64"), s=list[1,2,], norm="forward", )
paddle.fft.rfft2(x=Tensor([2, 2, 2],"float64"), s=list[1,2,], norm="backward", )
paddle.fft.rfftfreq(n=5, d=0.3, )
paddle.fft.rfftfreq(n=8, d=0.3, )
paddle.fft.rfftfreq(n=8, d=1, )
paddle.fft.rfftn(x=Tensor([2, 2, 2],"float32"), )
paddle.fft.rfftn(x=Tensor([2, 2, 2],"float64"), s=list[1,], norm="forward", )
paddle.fft.rfftn(x=Tensor([2, 2, 2],"int64"), )
paddle.fft.rfftn(Tensor([2, 2, 2],"float32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(x=Tensor([2, 2, 2],"float64"), s=list[1,], axes=list[0,], norm="ortho", )
paddle.fft.rfftn(x=Tensor([2, 2, 2],"int32"), )
paddle.fft.rfftn(Tensor([2, 2, 2],"float64"), list[1,2,], tuple(-2,-1,), "forward", None, )
paddle.fft.rfftn(Tensor([2, 2, 2],"float64"), list[1,2,], None, "ortho", None, )
paddle.fft.rfftn(Tensor([2, 2, 2],"float64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(x=Tensor([2, 2, 2],"float64"), s=list[1,], norm="backward", )
paddle.fft.rfftn(Tensor([2, 2, 2],"int64"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(x=Tensor([2, 2, 2],"float64"), )
paddle.fft.rfftn(Tensor([2, 2, 2],"int32"), None, tuple(-2,-1,), "backward", None, )
paddle.fft.rfftn(x=Tensor([2, 2, 2],"float64"), s=list[1,], norm="ortho", )
paddle.fft.rfftn(Tensor([2, 2, 2],"float64"), list[1,2,], tuple(-2,-1,), "ortho", None, )
paddle.fft.rfftn(x=Tensor([2, 2, 2],"float64"), s=list[1,], )
paddle.fft.rfftn(Tensor([2, 2, 2],"float64"), list[1,2,], tuple(-2,-1,), "backward", None, )
paddle.flip(x=Tensor([3, 3, 3, 3, 3, 3],"float64"), axis=list[-1,0,3,4,2,], )
paddle.flip(x=Tensor([3, 3, 3],"float64"), axis=list[0,], )
paddle.flip(Tensor([],"float32"), axis=list[], )
paddle.flip(Tensor([2, 3],"float32"), list[0,], )
paddle.flip(Tensor([4, 4],"float32"), list[0,1,], )
paddle.flip(Tensor([3],"int32"), axis=list[0,], )
paddle.flip(Tensor([2, 2],"float64"), tuple(-2,-1,), )
paddle.flip(Tensor([2, 3],"float32"), 1, )
paddle.flip(x=Tensor([3, 3, 3],"float64"), axis=list[-1,0,1,], )
paddle.flip(Tensor([3, 2, 2],"float32"), list[0,1,], )
paddle.flip(Tensor([2, 2],"float32"), tuple(-2,-1,), )
paddle.flip(x=Tensor([3, 3, 3],"float64"), axis=list[0,1,2,], )
paddle.flip(x=Tensor([3, 3, 3],"bool"), axis=list[0,], )
paddle.floor(Tensor([4, 16, 2],"float32"), )
paddle.floor(Tensor([10, 12],"float32"), )
paddle.floor(Tensor([10, 12],"float64"), )
paddle.floor(Tensor([200],"float32"), )
paddle.floor(Tensor([512, 1, 1],"float32"), )
paddle.floor(Tensor([28, 28],"float32"), )
paddle.floor(Tensor([124, 1, 1, 1],"float32"), )
paddle.floor(Tensor([4, 13, 2],"float32"), )
paddle.floor(Tensor([144, 1, 1],"float32"), )
paddle.floor(Tensor([128, 1, 1, 1],"float32"), )
paddle.floor(Tensor([128, 1, 1],"float32"), )
paddle.floor(Tensor([4, 14, 2],"float32"), )
paddle.floor(Tensor([4, 17, 2],"float32"), )
paddle.floor(Tensor([4, 18, 2],"float32"), )
paddle.floor(Tensor([2, 8, 8],"float32"), )
paddle.floor(Tensor([3, 6, 3, 4, 2, 1],"float64"), )
paddle.floor(Tensor([112, 1, 1],"float32"), )
paddle.floor(Tensor([4, 15, 2],"float32"), )
paddle.floor(Tensor([4, 19, 2],"float32"), )
paddle.floor(Tensor([3, 6, 3, 1, 2, 5],"float64"), )
paddle.floor(Tensor([4, 9, 2],"float32"), )
paddle.floor(Tensor([1, 1, 1, 1, 1],"float32"), )
paddle.floor(Tensor([64, 1, 1, 1],"float32"), )
paddle.floor(Tensor([1, 3, 3],"float64"), )
paddle.floor(Tensor([4, 1, 6],"float64"), )
paddle.floor(Tensor([14, 1, 1],"float32"), )
paddle.floor(x=Tensor([3, 3, 3],"float32"), )
paddle.floor(Tensor([16, 1, 1, 1],"float32"), )
paddle.floor(Tensor([8, 8],"float32"), )
paddle.floor(Tensor([5, 1],"float64"), )
paddle.floor(Tensor([2, 1, 1],"float32"), )
paddle.floor(Tensor([1, 3],"float64"), )
paddle.floor(Tensor([2, 5, 2],"float32"), )
paddle.floor(Tensor([5],"float32"), )
paddle.floor(Tensor([4, 8, 2],"float32"), )
paddle.floor(Tensor([4, 1],"float32"), )
paddle.floor(Tensor([12],"float32"), )
paddle.floor(Tensor([3],"float32"), )
paddle.floor(Tensor([2, 2],"float32"), )
paddle.floor(Tensor([8, 1, 1],"float32"), )
paddle.floor(Tensor([9, 6],"float32"), )
paddle.floor(Tensor([1, 3, 3],"float32"), )
paddle.floor(Tensor([2, 3],"float32"), )
paddle.floor(Tensor([64, 1, 1],"float32"), )
paddle.floor(Tensor([],"float32"), )
paddle.floor(Tensor([5, 1, 4],"float64"), )
paddle.floor(Tensor([16, 1, 1],"float32"), )
paddle.floor(x=Tensor([3, 3, 3],"float64"), )
paddle.floor(Tensor([60, 1, 1],"float32"), )
paddle.floor(Tensor([60, 1, 1, 1],"float32"), )
paddle.floor(Tensor([4, 10, 2],"float32"), )
paddle.floor(Tensor([4, 6, 2],"float32"), )
paddle.floor(Tensor([4, 5, 2],"float64"), )
paddle.floor(Tensor([4, 2, 2, 3],"float32"), )
paddle.floor(Tensor([13],"float32"), )
paddle.floor(Tensor([1],"float64"), )
paddle.floor(Tensor([1, 3, 4],"float64"), )
paddle.floor(Tensor([32, 1, 1, 1],"float32"), )
paddle.floor(Tensor([4],"float32"), )
paddle.floor(Tensor([4, 2],"float32"), )
paddle.floor(Tensor([2, 1],"float32"), )
paddle.floor(Tensor([10],"float32"), )
paddle.floor(Tensor([12, 1, 1],"float32"), )
paddle.floor(Tensor([1],"float32"), )
paddle.floor(Tensor([4, 7, 2],"float32"), )
paddle.floor(Tensor([11],"float32"), )
paddle.floor(Tensor([4, 11, 2],"float32"), )
paddle.floor(Tensor([4, 3, 2],"float32"), )
paddle.floor(Tensor([4, 1, 1, 1],"float32"), )
paddle.floor(Tensor([9],"float32"), )
paddle.floor(Tensor([2],"float32"), )
paddle.floor(Tensor([8],"float32"), )
paddle.floor(Tensor([4, 12, 2],"float32"), )
paddle.floor(Tensor([1, 1, 1],"float32"), )
paddle.floor(Tensor([4, 5, 2],"float32"), )
paddle.floor(Tensor([4, 1, 1],"float32"), )
paddle.floor(Tensor([7],"float32"), )
paddle.floor(Tensor([4, 2, 2],"float32"), )
paddle.floor(Tensor([8, 1, 1, 1],"float32"), )
paddle.floor(Tensor([4, 1],"float64"), )
paddle.floor(Tensor([14],"float32"), )
paddle.floor(Tensor([4, 7, 1],"float64"), )
paddle.floor(Tensor([2, 5, 2, 3],"float32"), )
paddle.floor(Tensor([4, 4, 2],"float32"), )
paddle.floor(Tensor([6],"float32"), )
paddle.floor(Tensor([7, 1],"float64"), )
paddle.floor_divide(Tensor([128],"int64"), Tensor([],"int64"), )
paddle.floor_divide(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.floor_divide(Tensor([4],"int8"), Tensor([4],"int8"), )
paddle.floor_divide(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"bfloat16"), )
paddle.floor_divide(x=Tensor([3, 3, 3],"int32"), y=Tensor([3],"int32"), )
paddle.floor_divide(Tensor([1],"float32"), Tensor([3],"float32"), )
paddle.floor_divide(Tensor([4],"float64"), Tensor([4],"float64"), )
paddle.floor_divide(Tensor([],"int64"), Tensor([],"int64"), )
paddle.floor_divide(Tensor([4],"int32"), Tensor([4],"int32"), )
paddle.floor_divide(Tensor([4],"int64"), Tensor([4],"int64"), )
paddle.floor_divide(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.floor_divide(x=Tensor([3, 1],"int32"), y=Tensor([3, 1],"int32"), name="", )
paddle.floor_divide(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"bfloat16"), )
paddle.floor_divide(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.floor_divide(Tensor([4],"uint8"), Tensor([4],"uint8"), )
paddle.floor_divide(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float32"), )
paddle.floor_divide(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float64"), )
paddle.floor_divide(Tensor([8, 4],"int64"), Tensor([1],"int64"), )
paddle.floor_divide(Tensor([4],"bfloat16"), Tensor([4],"bfloat16"), )
paddle.floor_divide(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"bfloat16"), )
paddle.floor_divide(Tensor([],"int64"), Tensor([3],"int64"), )
paddle.floor_divide(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.floor_divide(Tensor([4],"int16"), Tensor([4],"int16"), )
paddle.floor_divide(Tensor([4, 8],"int64"), Tensor([1],"int64"), )
paddle.floor_divide(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.floor_divide(x=Tensor([3],"int64"), y=Tensor([3],"int64"), )
paddle.floor_divide(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float16"), )
paddle.floor_divide(Tensor([3],"int64"), Tensor([],"int64"), )
paddle.floor_divide(x=Tensor([3, 1],"int32"), y=Tensor([3, 1],"int32"), name=None, )
paddle.floor_divide(Tensor([4, 4],"int64"), Tensor([1],"int64"), )
paddle.floor_divide(Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.floor_divide(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.floor_divide(x=Tensor([2],"int32"), y=Tensor([2],"int32"), )
paddle.floor_divide(Tensor([1],"float16"), Tensor([3],"float16"), )
paddle.floor_divide(Tensor([1],"bfloat16"), Tensor([3],"bfloat16"), )
paddle.floor_divide(Tensor([1],"float64"), Tensor([3],"float64"), )
paddle.floor_divide(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.floor_divide(x=Tensor([3],"int32"), y=Tensor([3],"int32"), )
paddle.floor_divide(Tensor([4],"float16"), Tensor([4],"float16"), )
paddle.floor_mod(Tensor([],"float32"), Tensor([],"float32"), )
paddle.floor_mod(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.floor_mod(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.fmax(Tensor([10, 15],"float32"), Tensor([15],"float32"), )
paddle.fmax(Tensor([10, 15],"float32"), Tensor([10, 15],"float32"), )
paddle.fmax(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.fmax(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.fmax(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.fmax(Tensor([],"float32"), Tensor([],"float32"), )
paddle.fmax(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.fmax(Tensor([3],"int64"), Tensor([3],"int64"), )
paddle.fmax(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.fmax(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.fmax(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.fmax(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.fmin(Tensor([10, 15],"float32"), Tensor([10, 15],"float32"), )
paddle.fmin(Tensor([10, 15],"float32"), Tensor([15],"float32"), )
paddle.fmin(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.fmin(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.fmin(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.fmin(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.fmin(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.fmin(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.fmin(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.fmin(Tensor([],"float32"), Tensor([],"float32"), )
paddle.fmin(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.fmin(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.fmin(Tensor([3],"int64"), Tensor([3],"int64"), )
paddle.frac(Tensor([10, 20, 1],"float32"), )
paddle.frac(Tensor([],"float32"), )
paddle.frac(Tensor([2, 3],"int32"), )
paddle.frac(Tensor([2, 3],"float64"), )
paddle.frac(Tensor([2, 3],"float32"), )
paddle.frac(Tensor([2, 3],"int64"), )
paddle.full(list[1,1,], False, dtype="bool", )
paddle.full(list[1,227124,], -1, dtype="int32", )
paddle.full(list[1,1252,], -1, dtype="int32", )
paddle.full(list[1,1619,], -1, dtype="int32", )
paddle.full(list[1,50,], -100, dtype="int64", )
paddle.full(list[13056,], 1, dtype="int32", )
paddle.full(list[1,], -65504.0, "float64", )
paddle.full(list[23552,], 7, dtype="int32", )
paddle.full(list[1,440433,], -1, dtype="int32", )
paddle.full(shape=list[2,], fill_value=1, )
paddle.full(list[2704,1,], 32, dtype="float32", )
paddle.full(list[51840,], -1, dtype="int32", )
paddle.full(list[1,1992,], -1, dtype="int32", )
paddle.full(shape=list[], fill_value=0.782608695652174, dtype=VarType(float32), )
paddle.full(shape=list[], fill_value=0.8416666686534882, dtype=Dtype(float32), )
paddle.full(list[26752,], 0, dtype="int32", )
paddle.full(list[1,319200,], -1, dtype="int32", )
paddle.full(list[2500,1,], 32, dtype="float32", )
paddle.full(list[11136,], 7, dtype="int32", )
paddle.full(list[9088,], 0, dtype="int32", )
paddle.full(list[13440,], 5, dtype="int32", )
paddle.full(list[1,925,], -1, dtype="int32", )
paddle.full(list[1,690,], -1, dtype="int32", )
paddle.full(list[1,16384,1,], 8, dtype="float32", )
paddle.full(shape=list[4,4,16,], fill_value=0.0, dtype=Dtype(float64), )
paddle.full(list[1,1988,], -1, dtype="int32", )
paddle.full(shape=list[2,2,], fill_value=2, dtype="float32", )
paddle.full(list[1,185691,], -1, dtype="int32", )
paddle.full(list[16,513,513,19,], fill_value=3, dtype="float64", )
paddle.full(shape=list[], fill_value=0.7652173913043478, dtype=VarType(float32), )
paddle.full(list[1,898,], -1, dtype="int32", )
paddle.full(list[1,944,], -1, dtype="int32", )
paddle.full(list[1,1,], 0.0, dtype="float16", )
paddle.full(list[17536,], 2, dtype="int32", )
paddle.full(list[1,1162,], -1, dtype="int32", )
paddle.full(list[1,378540,], -1, dtype="int32", )
paddle.full(list[1,365211,], -1, dtype="int32", )
paddle.full(shape=list[2,6,], fill_value=1.0, dtype="int32", )
paddle.full(list[1,1873,], -1, dtype="int32", )
paddle.full(list[5120,], 3, dtype="int32", )
paddle.full(list[1,1157,], -1, dtype="int32", )
paddle.full(list[25088,], 7, dtype="int32", )
paddle.full(list[1,584,], -1, dtype="int32", )
paddle.full(list[2304,], 3, dtype="int32", )
paddle.full(list[], fill_value=48999, )
paddle.full(list[22784,], 7, dtype="int32", )
paddle.full(list[1,1424,], -1, dtype="int32", )
paddle.full(list[5120,], 1, dtype="int32", )
paddle.full(list[13,1,7,14,], -3.4028234663852886e+38, Dtype(float32), )
paddle.full(tuple(), 1.2, )
paddle.full(list[11904,], 2, dtype="int32", )
paddle.full(list[1,784,], -1, dtype="int32", )
paddle.full(list[1,62700,], -1, dtype="int32", )
paddle.full(list[12800,], 7, dtype="int32", )
paddle.full(list[1,60480,], -1, dtype="int32", )
paddle.full(list[6528,], 7, dtype="int32", )
paddle.full(tuple(12544,), 8, )
paddle.full(shape=list[], fill_value=0.9891891891891892, dtype=VarType(float32), )
paddle.full(list[14080,], 4, dtype="int32", )
paddle.full(list[1,1642,], -1, dtype="int32", )
paddle.full(list[18496,1,], 8, dtype="float32", )
paddle.full(shape=list[50,50,], fill_value=-math.inf, dtype="float32", )
paddle.full(list[3328,], 7, dtype="int32", )
paddle.full(list[1,83070,], -1, dtype="int32", )
paddle.full(list[2,2,], 2.5310242469692907, dtype=Dtype(float32), )
paddle.full(list[15360,], 0, dtype="int32", )
paddle.full(list[16384,], 7, dtype="int32", )
paddle.full(list[14464,], 5, dtype="int32", )
paddle.full(list[24960,], 4, dtype="int32", )
paddle.full(list[6016,], 6, dtype="int32", )
paddle.full(list[32512,], 3, dtype="int32", )
paddle.full(tuple(5,5,), fill_value=1, )
paddle.full(list[], fill_value=29674, )
paddle.full(list[230202,], -1, dtype="int32", )
paddle.full(list[1,1893,], -1, dtype="int32", )
paddle.full(list[10240,], 6, dtype="int32", )
paddle.full(shape=list[], fill_value=0.782608695652174, dtype=Dtype(float32), )
paddle.full(list[2,8,23,23,], -3.4028234663852886e+38, dtype=Dtype(float32), )
paddle.full(list[1,], 2, Dtype(float32), )
paddle.full(list[14976,], 5, dtype="int32", )
paddle.full(shape=list[], fill_value=0.9647058807313442, dtype=Dtype(float16), )
paddle.full(list[1,1747,], -1, dtype="int32", )
paddle.full(list[576,1,], 16, dtype="float32", )
paddle.full(list[12672,], 5, dtype="int32", )
paddle.full(list[1280,], 0, dtype="int32", )
paddle.full(list[16,1000,], 0.0001, )
paddle.full(tuple(17,17,), -3.4028234663852886e+38, )
paddle.full(list[24320,], 3, dtype="int32", )
paddle.full(list[1,63360,], -1, dtype="int32", )
paddle.full(list[6272,], 7, dtype="int32", )
paddle.full(list[1,1213,], -1, dtype="int32", )
paddle.full(shape=list[1,], fill_value=1e-12, dtype=VarType(float32), )
paddle.full(list[23808,], 5, dtype="int32", )
paddle.full(list[1,1930,], -1, dtype="int32", )
paddle.full(list[1,62730,], -1, dtype="int32", )
paddle.full(list[2816,], 4, dtype="int32", )
paddle.full(tuple(2304,), 8, )
paddle.full(shape=list[], fill_value=0.9600000008940697, dtype=Dtype(float16), )
paddle.full(shape=list[1,68,100,], fill_value=0, dtype=Dtype(float32), )
paddle.full(list[1,1182,], -1, dtype="int32", )
paddle.full(list[], fill_value=24612, )
paddle.full(list[1,1381,], -1, dtype="int32", )
paddle.full(list[1,2020,], -1, dtype="int32", )
paddle.full(shape=list[], fill_value=0.9243243243243243, dtype=VarType(float32), )
paddle.full(list[9984,], 1, dtype="int32", )
paddle.full(list[1,300,], 11, dtype="int64", )
paddle.full(list[3328,], 0, dtype="int32", )
paddle.full(shape=list[], fill_value=0.9972727273125201, dtype=VarType(float32), )
paddle.full(list[68985,], -1, dtype="int32", )
paddle.full(list[2,10,], 3, dtype=Dtype(int64), )
paddle.full(list[14592,], 3, dtype="int32", )
paddle.full(list[168795,], -1, dtype="int32", )
paddle.full(list[1152,], 0, dtype="int32", )
paddle.full(shape=list[], fill_value=0.8888888880610466, dtype=VarType(float32), )
paddle.full(list[], fill_value=20589, )
paddle.full(list[80400,], -1, dtype="int32", )
paddle.full(list[], fill_value=20968, )
paddle.full(list[309255,], -1, dtype="int32", )
paddle.full(list[9856,], 1, dtype="int32", )
paddle.full(shape=list[1,4,], fill_value=6, dtype="float32", )
paddle.full(list[18048,], 7, dtype="int32", )
paddle.full(list[4096,1,], 8, dtype="float32", )
paddle.full(list[28544,], 0, dtype="int32", )
paddle.full(shape=list[91,91,], fill_value=-math.inf, dtype="float32", )
paddle.full(shape=list[], fill_value=0.9939999999478459, dtype=VarType(float32), )
paddle.full(list[1,1947,], -1, dtype="int32", )
paddle.full(list[11648,], 1, dtype="int32", )
paddle.full(list[191835,], -1, dtype="int32", )
paddle.full(list[4,1,1,11,], -65504.0, dtype=Dtype(float16), )
paddle.full(list[1,69930,], -1, dtype="int32", )
paddle.full(list[32128,], 3, dtype="int32", )
paddle.full(list[7040,], 5, dtype="int32", )
paddle.full(list[63000,], -1, dtype="int32", )
paddle.full(list[269586,], -1, dtype="int32", )
paddle.full(list[8960,], 2, dtype="int32", )
paddle.full(list[], fill_value=44714, )
paddle.full(shape=list[1,], fill_value=1, )
paddle.full(shape=list[], fill_value=0.975, dtype=VarType(float32), )
paddle.full(list[1,1704,], -1, dtype="int32", )
paddle.full(list[31744,], 2, dtype="int32", )
paddle.full(list[15232,], 0, dtype="int32", )
paddle.full(tuple(1728,), 16, )
paddle.full(shape=list[448,1024,], fill_value=-math.inf, dtype="float32", )
paddle.full(list[1,1310,], -1, dtype="int32", )
paddle.full(list[], 2, dtype="int32", )
paddle.full(list[30848,], 7, dtype="int32", )
paddle.full(list[27392,], 6, dtype="int32", )
paddle.full(list[], fill_value=8259, )
paddle.full(list[2816,], 2, dtype="int32", )
paddle.full(list[], 1, dtype="int32", )
paddle.full(list[1,1498,], -1, dtype="int32", )
paddle.full(list[208692,], -1, dtype="int32", )
paddle.full(list[4224,], 5, dtype="int32", )
paddle.full(shape=list[], fill_value=0.7782608568668365, dtype=Dtype(float32), )
paddle.full(list[8448,], 5, dtype="int32", )
paddle.full(list[29696,], 4, dtype="int32", )
paddle.full(list[184140,], -1, dtype="int32", )
paddle.full(list[], fill_value=918, )
paddle.full(tuple(64,20,), 0.0, )
paddle.full(list[5,1,], 0.0, dtype="float32", )
paddle.full(list[26240,], 2, dtype="int32", )
paddle.full(list[1,683,], -1, dtype="int32", )
paddle.full(list[2048,1,], 180, )
paddle.full(list[], fill_value=46502, )
paddle.full(tuple(1,), 4096.0, Dtype(float32), )
paddle.full(list[4,49,49,], -100.0, Dtype(float16), )
paddle.full(list[1,1574,], -1, dtype="int32", )
paddle.full(list[1,1847,], -1, dtype="int32", )
paddle.full(list[1,1926,], -1, dtype="int32", )
paddle.full(list[1,1042,], -1, dtype="int32", )
paddle.full(list[279279,], -1, dtype="int32", )
paddle.full(list[8192,], 5, dtype="int32", )
paddle.full(list[25472,], 0, dtype="int32", )
paddle.full(shape=list[], fill_value=3, dtype="int32", )
paddle.full(list[0,], 0, "int64", )
paddle.full(list[256,], 2, dtype="int32", )
paddle.full(list[32512,], 4, dtype="int32", )
paddle.full(tuple(900,), -1, dtype="int64", )
paddle.full(list[2432,], 7, dtype="int32", )
paddle.full(list[1,1311,], -1, dtype="int32", )
paddle.full(shape=list[5,3,], fill_value=0, dtype=Dtype(float64), )
paddle.full(list[1,1155,], -1, dtype="int32", )
paddle.full(list[17024,], 6, dtype="int32", )
paddle.full(list[1,1460,], -1, dtype="int32", )
paddle.full(list[1,76590,], -1, dtype="int32", )
paddle.full(list[24320,], 5, dtype="int32", )
paddle.full(list[1,1,20,22,], -3.4028234663852886e+38, dtype=Dtype(float32), )
paddle.full(list[180048,], -1, dtype="int32", )
paddle.full(list[3,3,], 0, Dtype(float32), )
paddle.full(list[3968,], 5, dtype="int32", )
paddle.full(list[1,689,], -1, dtype="int32", )
paddle.full(list[6016,], 7, dtype="int32", )
paddle.full(list[16896,], 7, dtype="int32", )
paddle.full(list[1,1885,], -1, dtype="int32", )
paddle.full(list[4,49,49,], -100.0, Dtype(float32), )
paddle.full(list[1,66360,], -1, dtype="int32", )
paddle.full(list[1,243474,], -1, dtype="int32", )
paddle.full(list[1,1784,], -1, dtype="int32", )
paddle.full(list[18432,], 5, dtype="int32", )
paddle.full(shape=list[], fill_value=0.8933333307504654, dtype=Dtype(float32), )
paddle.full(list[19712,], 4, dtype="int32", )
paddle.full(list[7040,], 6, dtype="int32", )
paddle.full(list[1,2040,], -1, dtype="int32", )
paddle.full(list[], fill_value=36810, )
paddle.full(list[11264,], 2, dtype="int32", )
paddle.full(list[16256,], 3, dtype="int32", )
paddle.full(list[1,797,], -1, dtype="int32", )
paddle.full(list[3456,], 5, dtype="int32", )
paddle.full(shape=list[], fill_value=0.9990909090847708, dtype=VarType(float32), )
paddle.full(list[], fill_value=20228, )
paddle.full(list[1,627,], -1, dtype="int32", )
paddle.full(list[14464,], 6, dtype="int32", )
paddle.full(shape=list[162,162,], fill_value=-math.inf, dtype="float32", )
paddle.full(shape=list[448,384,], fill_value=-math.inf, dtype="float32", )
paddle.full(list[5,1,], 1, dtype=VarType(int64), )
paddle.full(list[121,1,], 64, dtype="float32", )
paddle.full(list[26752,], 4, dtype="int32", )
paddle.full(list[9728,], 2, dtype="int32", )
paddle.full(list[32,3,1024,768,], 10.0, dtype="float32", )
paddle.full(list[1,55890,], -1, dtype="int32", )
paddle.full(shape=list[], fill_value=0.8777777701616287, dtype=VarType(float32), )
paddle.full(list[1,1877,], -1, dtype="int32", )
paddle.full(list[20352,], 1, dtype="int32", )
paddle.full(list[2,1,1,104,], -3.4028234663852886e+38, dtype=Dtype(float32), )
paddle.full(shape=list[], fill_value=0.7130434782608696, dtype=VarType(float32), )
paddle.full(list[], fill_value=32550, )
paddle.full(shape=list[], fill_value=0.9529411755502224, dtype=Dtype(float16), )
paddle.full(list[23936,], 7, dtype="int32", )
paddle.full(shape=list[], fill_value=0.9936363636516035, dtype=VarType(float32), )
paddle.full(shape=list[93,93,], fill_value=-math.inf, dtype="float32", )
paddle.full(list[11392,], 4, dtype="int32", )
paddle.full(list[20992,], 4, dtype="int32", )
paddle.full(list[31616,], 5, dtype="int32", )
paddle.full(tuple(196,), 64, )
paddle.full(list[1,757,], -1, dtype="int32", )
paddle.full(list[2432,], 0, dtype="int32", )
paddle.full(shape=list[121,121,], fill_value=-math.inf, dtype="float32", )
paddle.full(list[251676,], -1, dtype="int32", )
paddle.full(shape=list[], fill_value=0.9399999976158142, dtype=Dtype(float32), )
paddle.full(list[1156,1,], 32, dtype="float32", )
paddle.full(list[1,974,], -1, dtype="int32", )
paddle.full(shape=list[], fill_value=0.6304347826086957, dtype=Dtype(float16), )
paddle.full(list[21760,], 3, dtype="int32", )
paddle.full(list[3840,], 2, dtype="int32", )
paddle.full(shape=list[], dtype="int64", fill_value=4, )
paddle.full(list[1,1015,], -1, dtype="int32", )
paddle.full(list[1,1529,], -1, dtype="int32", )
paddle.full(shape=list[1,128,1,], fill_value=1, dtype="int64", )
paddle.full(list[1,199485,], -1, dtype="int32", )
paddle.full(list[1,1591,], -1, dtype="int32", )
paddle.full(list[1,778,], -1, dtype="int32", )
paddle.full(list[1,719,], -1, dtype="int32", )
paddle.full(shape=list[1,], fill_value=1e-06, dtype=Dtype(float32), )
paddle.full(list[14592,], 0, dtype="int32", )
paddle.full(list[8448,], 3, dtype="int32", )
paddle.full(list[4,1,1,14,], -65504.0, dtype=Dtype(float16), )
paddle.full(list[18688,], 6, dtype="int32", )
paddle.full(list[2304,], 7, dtype="int32", )
paddle.full(tuple(), -0.6, dtype=Dtype(float64), )
paddle.full(shape=list[], fill_value=0.9347826086956522, dtype=VarType(float32), )
paddle.full(list[1,314595,], -1, dtype="int32", )
paddle.full(list[1,1531,], -1, dtype="int32", )
paddle.full(list[4736,], 1, dtype="int32", )
paddle.full(list[], 0, "float32", )
paddle.full(list[1,1441,], -1, dtype="int32", )
paddle.full(list[83415,], -1, dtype="int32", )
paddle.full(list[2,1,1,97,], -3.4028234663852886e+38, dtype=Dtype(float32), )
paddle.full(list[9216,], 4, dtype="int32", )
paddle.full(list[384,], 3, dtype="int32", )
paddle.full(shape=list[114,114,], fill_value=-math.inf, dtype="float32", )
paddle.full(list[91980,], -1, dtype="int32", )
paddle.full(list[1,], -3.3895313892515355e+38, "float64", )
paddle.full(list[1,2000,], -1, dtype="int32", )
paddle.full(list[59220,], -1, dtype="int32", )
paddle.full(list[8704,], 4, dtype="int32", )
paddle.full(shape=list[1,], fill_value=10, dtype="float32", )
paddle.full(list[20608,], 0, dtype="int32", )
paddle.full(list[4624,1,], 8, dtype="float32", )
paddle.full(list[1,508,], -1, dtype="int32", )
paddle.full(list[24320,], 4, dtype="int32", )
paddle.full(list[2432,], 3, dtype="int32", )
paddle.full(shape=list[], dtype=Dtype(bool), fill_value=False, )
paddle.full(list[2816,], 7, dtype="int32", )
paddle.full(list[1,91980,], -1, dtype="int32", )
paddle.full(shape=list[6,4,16,], fill_value=0.0, dtype=Dtype(float32), )
paddle.full(list[286977,], -1, dtype="int32", )
paddle.full(list[1,], 0, "int64", )
paddle.full(list[1,], 2, )
paddle.full(shape=list[], fill_value=0.8363636363636363, dtype=Dtype(float16), )
paddle.full(shape=list[2,4,8,], fill_value=0, dtype=Dtype(float64), )
paddle.full(shape=list[], fill_value=0.6739130434782609, dtype=Dtype(float32), )
paddle.full(shape=tuple(3,2,), fill_value=False, dtype=type(bool), )
paddle.full(list[14336,], 2, dtype="int32", )
paddle.full(list[10496,], 2, dtype="int32", )
paddle.full(list[31744,], 3, dtype="int32", )
paddle.full(list[4864,], 0, dtype="int32", )
paddle.full(list[5376,], 2, dtype="int32", )
paddle.full(list[2,1,1,68,], -3.4028234663852886e+38, dtype=Dtype(float32), )
paddle.full(list[44520,], -1, dtype="int32", )
paddle.full(shape=list[], fill_value=0.928125, dtype=VarType(float32), )
paddle.full(list[1,68340,], -1, dtype="int32", )
paddle.full(list[13184,], 7, dtype="int32", )
paddle.full(list[11136,], 4, dtype="int32", )
paddle.full(list[], fill_value=57753, )
paddle.full(list[2,1,1,93,], -3.4028234663852886e+38, dtype=Dtype(float32), )
paddle.full(shape=list[], fill_value=1.0, dtype=Dtype(float64), )
paddle.full(list[54600,], -1, dtype="int32", )
paddle.full(list[], -100.0, VarType(float32), )
paddle.full(list[242991,], -1, dtype="int32", )
paddle.full(list[25600,], 6, dtype="int32", )
paddle.full(list[640,], 3, dtype="int32", )
paddle.full(list[], fill_value=50873, )
paddle.full(list[1,752,], -1, dtype="int32", )
paddle.full(list[29056,], 5, dtype="int32", )
paddle.full(list[1,309255,], -1, dtype="int32", )
paddle.full(shape=list[1,], dtype="int64", fill_value=4, )
paddle.full(list[], fill_value=25507, )
paddle.full(list[13568,], 3, dtype="int32", )
paddle.full(list[1,53250,], -1, dtype="int32", )
paddle.full(list[2304,1,], 8, dtype="float32", )
paddle.full(list[6400,1,], 16, dtype="float32", )
paddle.full(list[7808,], 3, dtype="int32", )
paddle.full(list[4,1,1,12,], -65504.0, dtype=Dtype(float16), )
paddle.full(list[1,1189,], -1, dtype="int32", )
paddle.full(list[], fill_value=14522, )
paddle.full(list[1,920,], -1, dtype="int32", )
paddle.full(list[5120,], 0, dtype="int32", )
paddle.full(list[15360,], 4, dtype="int32", )
paddle.full(list[1,1261,], -1, dtype="int32", )
paddle.full(shape=list[], fill_value=0.782608695652174, dtype=Dtype(float16), )
paddle.full(tuple(6400,), 8, )
paddle.full(list[2,1,1,51,], -3.4028234663852886e+38, dtype=Dtype(float32), )
paddle.full(list[], fill_value=56815, )
paddle.full(shape=list[], fill_value=0.8166666626930237, dtype=Dtype(float32), )
paddle.full(list[6,1,1,4,], -3.4028234663852886e+38, dtype=Dtype(float32), )
paddle.full(list[25216,], 6, dtype="int32", )
paddle.full(shape=list[], fill_value=0.6086956521739131, dtype=Dtype(float32), )
paddle.full(list[4,2,0,4,], 0, Dtype(float32), )
paddle.full(list[1,296700,], -1, dtype="int32", )
paddle.full(list[1,1,1,24,], -3.4028234663852886e+38, dtype=Dtype(float32), )
paddle.full(list[], fill_value=4240, )
paddle.full(shape=list[28,28,], fill_value=-math.inf, dtype="float32", )
paddle.full(list[365211,], -1, dtype="int32", )
paddle.full(list[1,1980,], -1, dtype="int32", )
paddle.full(list[2560,], 3, dtype="int32", )
paddle.full(list[], fill_value=35017, )
paddle.full(list[6400,], 7, dtype="int32", )
paddle.full(list[384,], 0, dtype="int32", )
paddle.full(list[1936,1,], 8, dtype="float32", )
paddle.full(list[18944,], 0, dtype="int32", )
paddle.full(shape=list[], dtype="float32", fill_value=0.1, )
paddle.full(shape=list[], fill_value=0.8826086893677711, dtype=Dtype(float32), )
paddle.full(shape=list[112,112,], fill_value=-math.inf, dtype="float32", )
paddle.full(list[1,717,], -1, dtype="int32", )
paddle.full(list[219453,], -1, dtype="int32", )
paddle.full(list[8832,], 0, dtype="int32", )
paddle.full(shape=list[1,2,], dtype="float32", fill_value=1.1, )
paddle.full(list[1,53100,], -1, dtype="int32", )
paddle.full(list[24576,], 6, dtype="int32", )
paddle.full(list[], fill_value=19094, )
paddle.full(list[24960,], 7, dtype="int32", )
paddle.full(shape=list[1,500,1,], fill_value=0, dtype="int64", )
paddle.full(list[24576,], 2, dtype="int32", )
paddle.full(list[4480,], 5, dtype="int32", )
paddle.full(list[216,64,3,3,], 0.0, Dtype(float32), )
paddle.full(list[13696,], 4, dtype="int32", )
paddle.full(list[55755,], -1, dtype="int32", )
paddle.full(list[1,593,], -1, dtype="int32", )
paddle.full(list[1536,], 2, dtype="int32", )
paddle.full(list[1792,], 2, dtype="int32", )
paddle.full(list[330429,], -1, dtype="int32", )
paddle.full(list[1,1728,], -1, dtype="int32", )
paddle.full(shape=list[1,500,1,], fill_value=15, dtype="int64", )
paddle.full(list[1,1767,], -1, dtype="int32", )
paddle.full(shape=list[], fill_value=0.9565217391304348, dtype=Dtype(float32), )
paddle.full(list[], fill_value=26816, )
paddle.full(shape=list[65,65,], fill_value=-math.inf, dtype="float32", )
paddle.full(list[4,1,1,15,], -65504.0, dtype=Dtype(float16), )
paddle.full(list[1,1907,], -1, dtype="int32", )
paddle.full(shape=list[4,64,64,], fill_value=0, dtype=Dtype(float32), )
paddle.full(shape=Tensor([5],"int64"), fill_value=-2, )
paddle.full(list[1,957,], -1, dtype="int32", )
paddle.full(list[1,608,], -1, dtype="int32", )
paddle.full(list[1,1357,], -1, dtype="int32", )
paddle.full(list[12416,], 2, dtype="int32", )
paddle.full(list[16,176,], 80, dtype="int64", )
paddle.full(list[13056,], 4, dtype="int32", )
paddle.full(list[54000,], -1, dtype="int32", )
paddle.full(shape=list[1,500,1,], fill_value=10, dtype="int64", )
paddle.full(list[1,339150,], -1, dtype="int32", )
paddle.full(shape=list[1,1,], fill_value=-1, dtype="int64", )
paddle.full(list[24064,], 7, dtype="int32", )
paddle.full(shape=tuple(3,2,), fill_value=1, dtype=type(numpy.int32), )
paddle.full(list[1,1716,], -1, dtype="int32", )
paddle.full(list[2944,], 2, dtype="int32", )
paddle.full(list[1664,], 7, dtype="int32", )
paddle.full(list[1,1230,], -1, dtype="int32", )
paddle.full(shape=tuple(3,2,), fill_value=1.1, dtype=type(numpy.float32), )
paddle.full(tuple(), 9.999999747378752e-06, Dtype(float32), )
paddle.full(list[17152,], 3, dtype="int32", )
paddle.full(tuple(20,20,), -math.inf, dtype="float32", )
paddle.full(tuple(11,11,), -3.4028234663852886e+38, )
paddle.full(list[], 4, "float32", )
paddle.full(list[1,], 0, dtype="float64", )
paddle.full(list[128,], 3, dtype="int32", )
paddle.full(list[239382,], -1, dtype="int32", )
paddle.full(list[1,1637,], -1, dtype="int32", )
paddle.full(list[1,], 6, dtype="int32", )
paddle.full(list[8064,], 7, dtype="int32", )
paddle.full(list[16512,], 6, dtype="int32", )
paddle.full(list[26368,], 4, dtype="int32", )
paddle.full(list[2,2,], 0, dtype="int32", )
paddle.full(list[4608,], 2, dtype="int32", )
paddle.full(list[32768,], 4, dtype="int32", )
paddle.full(list[36000,], -1, dtype="int32", )
paddle.full(list[20608,], 4, dtype="int32", )
paddle.full(list[1,68625,], -1, dtype="int32", )
paddle.full(list[1024,], 4, dtype="int32", )
paddle.full(shape=list[53,53,], fill_value=-math.inf, dtype="float32", )
paddle.full(list[68340,], -1, dtype="int32", )
paddle.full(list[], fill_value=62162, )
paddle.full(shape=list[2,4,8,], fill_value=0, dtype=VarType(float64), )
paddle.full(list[1,73125,], -1, dtype="int32", )
paddle.full(list[73365,], -1, dtype="int32", )
paddle.full(list[8960,], 4, dtype="int32", )
paddle.full(list[59295,], -1, dtype="int32", )
paddle.full(list[1,1541,], -1, dtype="int32", )
paddle.full(list[11136,], 6, dtype="int32", )
paddle.full(list[21376,], 6, dtype="int32", )
paddle.full(list[23168,], 4, dtype="int32", )
paddle.full(list[4,1,1,6,], -3.4028234663852886e+38, dtype=Dtype(float32), )
paddle.full(list[1,1010,], -1, dtype="int32", )
paddle.full(list[1,733,], -1, dtype="int32", )
paddle.full(list[256,1,], 16, dtype="float32", )
paddle.full(list[5,3,0,5,], 0, Dtype(float32), )
paddle.full(list[17408,], 5, dtype="int32", )
paddle.full(shape=list[106,106,], fill_value=-math.inf, dtype="float32", )
paddle.full(list[19712,], 6, dtype="int32", )
paddle.full(list[13824,], 0, dtype="int32", )
paddle.full(list[7168,], 1, dtype="int32", )
paddle.full(list[1,369105,], -1, dtype="int32", )
paddle.full(list[25472,], 2, dtype="int32", )
paddle.full(list[16640,], 3, dtype="int32", )
paddle.full(list[37800,], -1, dtype="int32", )
paddle.full(list[1,1714,], -1, dtype="int32", )
paddle.full(list[1,647,], -1, dtype="int32", )
paddle.full(list[270096,], -1, dtype="int32", )
paddle.full(list[1,1993,], -1, dtype="int32", )
paddle.full(list[7424,], 6, dtype="int32", )
paddle.full(list[20352,], 3, dtype="int32", )
paddle.full(list[2,1,1,88,], -3.4028234663852886e+38, dtype=Dtype(float32), )
paddle.full(list[1,1180,], -1, dtype="int32", )
paddle.full(shape=list[], fill_value=0.9351351351351351, dtype=VarType(float32), )
paddle.full(list[2,8,3,23,], -3.4028234663852886e+38, dtype=Dtype(float32), )
paddle.full(shape=list[27,27,], fill_value=-math.inf, dtype="float32", )
paddle.full(list[1,896,], -1, dtype="int32", )
paddle.full(list[16,49,49,], 0.0, Dtype(float16), )
paddle.full(list[81,1,], 64, dtype="float32", )
paddle.full(shape=list[2,2,2,], fill_value=0, dtype=Dtype(float32), )
paddle.full(list[1,62400,], -1, dtype="int32", )
paddle.full(list[13824,], 6, dtype="int32", )
paddle.full(list[64,16,16,], 0.0, Dtype(float32), )
paddle.full(shape=list[], fill_value=0.9910000003874302, dtype=VarType(float32), )
paddle.full(list[30336,], 5, dtype="int32", )
paddle.full(list[1,502,], -1, dtype="int32", )
paddle.full(list[], fill_value=44733, )
paddle.full(list[1,230202,], -1, dtype="int32", )
paddle.full(list[31744,], 4, dtype="int32", )
paddle.full(list[5760,], 6, dtype="int32", )
paddle.full(list[9984,], 6, dtype="int32", )
paddle.full(list[1,4,0,4,], 0, Dtype(float32), )
paddle.full(list[233244,], -1, dtype="int32", )
paddle.full(list[23296,], 0, dtype="int32", )
paddle.full(shape=list[2,3,], fill_value=1.0, )
paddle.full(list[], fill_value=28685, )
paddle.full(list[12672,], 7, dtype="int32", )
paddle.full(shape=list[92,92,], fill_value=-math.inf, dtype="float32", )
paddle.full(list[1,805,], -1, dtype="int32", )
paddle.full(list[15232,], 3, dtype="int32", )
paddle.full(list[1,235320,], -1, dtype="int32", )
paddle.full(list[1,788,], -1, dtype="int32", )
paddle.full(list[32384,], 2, dtype="int32", )
paddle.full(list[67500,], -1, dtype="int32", )
paddle.full(list[1,300,], 4, dtype="int64", )
paddle.full(list[1,1804,], -1, dtype="int32", )
paddle.full(shape=list[], fill_value=0.9454545454545454, dtype=Dtype(float32), )
paddle.full(list[], fill_value=57464, )
paddle.full(list[16640,], 4, dtype="int32", )
paddle.full(list[], fill_value=48456, )
paddle.full(list[2432,], 6, dtype="int32", )
paddle.full(list[], fill_value=73616, )
paddle.full(list[1,322272,], -1, dtype="int32", )
paddle.full(list[29056,], 4, dtype="int32", )
paddle.full(list[301302,], -1, dtype="int32", )
paddle.full(list[1,76800,], -1, dtype="int32", )
paddle.full(list[1,932,], -1, dtype="int32", )
paddle.full(list[1,369303,], -1, dtype="int32", )
paddle.full(list[1,605,], -1, dtype="int32", )
paddle.full(list[1,1,1,31,], -3.4028234663852886e+38, dtype=Dtype(float32), )
paddle.full(list[1,94500,], -1, dtype="int32", )
paddle.full_like(Tensor([2, 1, 1, 75],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([512],"float32"), 0.0, dtype=Dtype(float32), )
paddle.full_like(Tensor([2, 1, 1, 91],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([10, 10],"int64"), 7, )
paddle.full_like(Tensor([6, 100],"float32"), 0.0, )
paddle.full_like(Tensor([114, 1],"float64"), -math.inf, )
paddle.full_like(Tensor([100],"int64"), 0, )
paddle.full_like(Tensor([5, 192, 1, 1],"float32"), 0.0, dtype=VarType(float32), )
paddle.full_like(Tensor([2, 99],"float32"), 0.0, )
paddle.full_like(Tensor([2, 1, 1, 95],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([768],"float32"), 0.0, dtype=Dtype(float32), )
paddle.full_like(Tensor([256],"float32"), 0.0, dtype=VarType(float32), )
paddle.full_like(Tensor([2, 1, 1, 88],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([144],"float64"), math.inf, )
paddle.full_like(Tensor([100],"int64"), 6, )
paddle.full_like(Tensor([5, 64, 1, 1],"float32"), 0.0, dtype=VarType(float32), )
paddle.full_like(Tensor([100],"int64"), 4, )
paddle.full_like(Tensor([3, 40],"float32"), -1.0, )
paddle.full_like(Tensor([2, 1, 1, 81],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([2, 1, 1, 56],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([2, 1, 1, 68],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([768],"float32"), 0.0, dtype=VarType(float32), )
paddle.full_like(Tensor([2, 1, 1, 78],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([2, 1, 1, 51],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([2, 1, 1, 67],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([2, 256],"float32"), 0.0, )
paddle.full_like(Tensor([2, 1, 1, 86],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([2, 1, 1, 50],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([6, 99],"float32"), 0.0, )
paddle.full_like(Tensor([2, 1, 1, 103],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([4, 96, 1, 1],"float32"), 0.0, dtype=VarType(float32), )
paddle.full_like(Tensor([2, 1, 1, 98],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([2, 1, 1, 73],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([128],"float32"), 1.0, )
paddle.full_like(Tensor([2, 1, 1, 52],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([2, 1, 1, 72],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([512],"float32"), 1.0, dtype=Dtype(float32), )
paddle.full_like(Tensor([100],"int64"), 3, )
paddle.full_like(Tensor([2, 1, 1, 83],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([2, 1, 1, 90],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([400, 1],"float64"), math.inf, )
paddle.full_like(Tensor([512],"float32"), 0, dtype=Dtype(float32), )
paddle.full_like(Tensor([2, 123],"float32"), 0.0, )
paddle.full_like(Tensor([512],"float32"), 0.0, dtype=VarType(float32), )
paddle.full_like(Tensor([2, 1, 1, 104],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([6, 123],"float32"), 0.0, )
paddle.full_like(Tensor([4, 64, 1, 1],"float32"), 0.0, dtype=VarType(float32), )
paddle.full_like(Tensor([2, 1, 1, 89],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([2, 1, 10, 10],"bool"), -3.4028234663852886e+38, dtype=Dtype(float32), )
paddle.full_like(Tensor([2, 1, 1, 57],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([2, 1, 1, 92],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([2, 1, 1, 93],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([2, 1, 1, 79],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([128],"float32"), 0.0, dtype=Dtype(float32), )
paddle.full_like(Tensor([256],"float32"), 0, dtype=Dtype(float32), )
paddle.full_like(Tensor([114, 1],"float64"), 1.7976931348623157e+308, )
paddle.full_like(Tensor([114, 1],"float64"), math.inf, )
paddle.full_like(Tensor([2, 1, 1, 63],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([400],"float64"), 1.7976931348623157e+308, )
paddle.full_like(Tensor([2, 1, 1, 59],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([384],"float32"), 0.0, dtype=VarType(float32), )
paddle.full_like(Tensor([2, 1, 1, 76],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([400, 1],"float64"), 1.7976931348623157e+308, )
paddle.full_like(Tensor([256],"float32"), 1.0, dtype=Dtype(float32), )
paddle.full_like(Tensor([5, 128, 1, 1],"float32"), 0.0, dtype=VarType(float32), )
paddle.full_like(Tensor([2, 1, 1, 54],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([2, 1, 1, 55],"bool"), -65504.0, dtype=Dtype(float16), )
paddle.full_like(Tensor([100],"int64"), 5, )
paddle.full_like(Tensor([3, 6, 3, 4, 2, 1],"float64"), fill_value=4, )
paddle.gammainc(Tensor([3, 40],"float32"), y=Tensor([3, 40],"float32"), )
paddle.gammainc(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.gammainc(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.gammaincc(Tensor([3, 40],"float32"), y=Tensor([3, 40],"float32"), )
paddle.gammaincc(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.gammaincc(Tensor([3, 40],"float32"), Tensor([3, 40],"float32"), )
paddle.gammaincc(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.gcd(x=Tensor([6, 1, 4, 5],"int32"), y=Tensor([2, 1, 5],"int32"), )
paddle.gcd(Tensor([10, 20],"int32"), Tensor([10, 20],"int32"), )
paddle.gcd(x=Tensor([6, 2, 4, 5],"int32"), y=Tensor([6, 2, 4, 5],"int32"), )
paddle.gcd(x=Tensor([4, 5],"int32"), y=Tensor([4, 5],"int32"), )
paddle.gcd(x=Tensor([1],"int64"), y=Tensor([1],"int64"), )
paddle.gcd(Tensor([6],"int32"), Tensor([1],"int32"), )
paddle.gcd(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.gcd(x=Tensor([2, 4, 5],"int32"), y=Tensor([2, 4, 5],"int32"), )
paddle.gcd(Tensor([],"int64"), Tensor([],"int64"), )
paddle.gcd(x=Tensor([1],"int32"), y=Tensor([1],"int32"), )
paddle.geometric.segment_max(Tensor([40, 20],"float64"), Tensor([40],"int64"), )
paddle.geometric.segment_max(Tensor([40, 20],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_max(Tensor([40, 20],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_max(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.geometric.segment_max(Tensor([3, 3],"float16"), Tensor([3],"int32"), )
paddle.geometric.segment_mean(Tensor([40, 20],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_mean(Tensor([30, 20],"float32"), Tensor([30],"int64"), )
paddle.geometric.segment_mean(Tensor([40, 20],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_mean(Tensor([40, 20],"float64"), Tensor([40],"int64"), )
paddle.geometric.segment_mean(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.geometric.segment_mean(Tensor([3, 3],"float16"), Tensor([3],"int32"), )
paddle.geometric.segment_min(Tensor([40, 20],"float64"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([40, 20],"float32"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([40, 20],"float16"), Tensor([40],"int64"), )
paddle.geometric.segment_min(Tensor([3, 3],"float16"), Tensor([3],"int32"), )
paddle.geometric.segment_min(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.geometric.segment_sum(Tensor([30, 15],"float32"), Tensor([30],"int64"), )
paddle.geometric.segment_sum(Tensor([40, 20],"float32"), Tensor([40],"int32"), )
paddle.geometric.segment_sum(Tensor([30, 15],"float64"), Tensor([30],"int64"), )
paddle.geometric.segment_sum(Tensor([30, 15],"float16"), Tensor([30],"int64"), )
paddle.geometric.segment_sum(Tensor([3, 3],"float16"), Tensor([3],"int32"), )
paddle.geometric.segment_sum(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "max", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mean", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "min", None, None, )
paddle.geometric.send_u_recv(Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "sum", None, None, )
paddle.geometric.send_u_recv(Tensor([3, 3],"int32"), Tensor([5],"int32"), Tensor([5],"int32"), "mean", )
paddle.geometric.send_u_recv(Tensor([3, 3],"int32"), Tensor([5],"int32"), Tensor([5],"int32"), "min", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "max", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sum", )
paddle.geometric.send_u_recv(Tensor([3, 3],"int32"), Tensor([5],"int32"), Tensor([5],"int32"), "max", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([3],"int32"), Tensor([3],"int32"), "sum", Tensor([],"int32"), )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([3],"int32"), Tensor([3],"int32"), "sum", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "min", )
paddle.geometric.send_u_recv(Tensor([3, 3],"int32"), Tensor([5],"int32"), Tensor([5],"int32"), "sum", )
paddle.geometric.send_u_recv(Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mean", )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "mean", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 8, 5],"float64"), Tensor([15, 8, 1],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "sum", None, None, )
paddle.geometric.send_ue_recv(Tensor([10, 20],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", "max", None, None, )
paddle.geometric.send_ue_recv(Tensor([100, 1],"float64"), Tensor([15, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", "min", None, None, )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "max", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "sub", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "mean", )
paddle.geometric.send_ue_recv(Tensor([3, 3, 1],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "div", "min", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "mul", "sum", )
paddle.geometric.send_ue_recv(Tensor([3, 3],"float32"), Tensor([4, 1],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), "add", "mean", )
paddle.geometric.send_uv(Tensor([10, 20],"float64"), Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "mul", )
paddle.geometric.send_uv(Tensor([10, 20],"float64"), Tensor([10, 20],"float64"), Tensor([15],"int64"), Tensor([15],"int64"), "add", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="sub", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="div", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="add", )
paddle.geometric.send_uv(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), Tensor([4],"int32"), Tensor([4],"int32"), message_op="mul", )
paddle.greater_equal(Tensor([3, 40],"float32"), Tensor([3, 40],"float32"), )
paddle.greater_equal(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.greater_equal(Tensor([16, 32, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([13, 8, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([2, 256, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.greater_equal(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.greater_equal(x=Tensor([1, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.greater_equal(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.greater_equal(x=Tensor([3, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.greater_equal(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.greater_equal(Tensor([4],"float16"), Tensor([4],"float16"), )
paddle.greater_equal(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.greater_equal(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.greater_equal(x=Tensor([3],"int64"), y=Tensor([3],"int64"), )
paddle.greater_equal(Tensor([],"float32"), Tensor([],"float32"), )
paddle.greater_equal(Tensor([2, 1],"int64"), Tensor([1, 1],"int64"), )
paddle.greater_equal(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.greater_equal(Tensor([2, 1, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.greater_equal(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.greater_equal(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.greater_equal(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.greater_equal(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.greater_equal(Tensor([],"float64"), Tensor([],"float64"), )
paddle.greater_equal(Tensor([2, 1, 1, 1, 1],"float32"), Tensor([1],"float32"), )
paddle.greater_equal(x=Tensor([1],"float64"), y=Tensor([4],"float64"), )
paddle.greater_equal(Tensor([6],"float32"), Tensor([6],"float32"), )
paddle.greater_equal(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.greater_equal(Tensor([1, 1],"int64"), Tensor([1, 1],"int64"), )
paddle.greater_equal(Tensor([4],"int64"), Tensor([4],"int64"), )
paddle.greater_than(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.greater_than(Tensor([4],"int64"), Tensor([4],"int64"), )
paddle.greater_than(x=Tensor([3, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.greater_than(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.greater_than(Tensor([],"float32"), Tensor([],"float32"), )
paddle.greater_than(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.greater_than(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.greater_than(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.greater_than(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.greater_than(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.greater_than(x=Tensor([1],"float64"), y=Tensor([4],"float64"), )
paddle.greater_than(Tensor([4],"float16"), Tensor([4],"float16"), )
paddle.greater_than(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.greater_than(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.greater_than(x=Tensor([1, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.greater_than(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.greater_than(x=Tensor([3],"int64"), y=Tensor([3],"int64"), )
paddle.greater_than(Tensor([6],"float32"), Tensor([6],"float32"), )
paddle.greater_than(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.heaviside(Tensor([13, 17],"int64"), Tensor([13, 17],"int64"), )
paddle.heaviside(Tensor([13, 17],"float32"), Tensor([1],"float32"), )
paddle.heaviside(Tensor([13, 17],"float64"), Tensor([13, 17],"float64"), )
paddle.heaviside(Tensor([13, 17],"float32"), Tensor([13, 17],"float32"), )
paddle.heaviside(Tensor([13, 17],"int32"), Tensor([13, 17],"int32"), )
paddle.heaviside(Tensor([],"float32"), Tensor([],"float32"), )
paddle.heaviside(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.histogram(input=Tensor([4, 4],"int64"), )
paddle.histogram_bin_edges(Tensor([5, 20],"float32"), bins=10, min=1, max=1, )
paddle.histogram_bin_edges(Tensor([5, 20],"float32"), bins=10, min=0.2, max=0.9, )
paddle.histogram_bin_edges(Tensor([5, 20],"float32"), bins=10, min=0, max=1, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=list[3,4,], weights=None, ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=5, weights=Tensor([4, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 2],"float32"), bins=list[2,2,], weights=None, ranges=list[0.0,1.0,0.0,1.0,], density=True, )
paddle.histogramdd(Tensor([4, 2, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=list[3,4,], weights=Tensor([4, 2],"float64"), ranges=list[1.0,10.0,1.0,100.0,], density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=list[3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=list[3,4,], weights=None, ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2, 4],"float64"), bins=list[1,2,3,4,], weights=Tensor([4, 2],"float64"), ranges=None, density=True, )
paddle.histogramdd(Tensor([4, 2],"float64"), bins=list[3,3,], weights=Tensor([4],"float64"), ranges=None, density=False, )
paddle.histogramdd(Tensor([4, 2, 2],"float64"), bins=list[3,4,], weights=None, ranges=list[1.0,10.0,1.0,100.0,], density=False, )
paddle.histogramdd(Tensor([4, 2],"float64"), bins=list[2,2,], weights=None, ranges=list[0.0,1.0,0.0,1.0,], density=True, )
paddle.hsplit(Tensor([4, 6],"int64"), 2, )
paddle.hsplit(Tensor([6],"int64"), 2, )
paddle.hsplit(Tensor([4, 6, 3],"int64"), tuple(2,1,3,), )
paddle.hsplit(Tensor([6],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([4, 6, 3],"int64"), 3, )
paddle.hsplit(Tensor([4, 6, 3],"int64"), 2, )
paddle.hsplit(Tensor([4, 6],"int64"), list[-1,], )
paddle.hsplit(Tensor([4, 6, 3],"int64"), list[-1,], )
paddle.hsplit(Tensor([6],"int64"), list[2,4,], )
paddle.hsplit(Tensor([6],"uint8"), 3, )
paddle.hsplit(Tensor([6],"float16"), 3, )
paddle.hsplit(Tensor([6],"float64"), 3, )
paddle.hsplit(Tensor([4, 6, 3],"int64"), list[2,4,], )
paddle.hsplit(Tensor([4, 6],"int64"), 3, )
paddle.hsplit(Tensor([6],"int64"), tuple(2,1,3,), )
paddle.hsplit(Tensor([4, 6],"int64"), tuple(2,1,3,), )
paddle.hsplit(Tensor([6],"int64"), list[-1,], )
paddle.hsplit(Tensor([6],"int64"), 3, )
paddle.hsplit(Tensor([4, 6],"int64"), list[2,4,], )
paddle.hsplit(Tensor([4, 6],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([4, 6, 3],"int64"), list[-1,1,3,], )
paddle.hsplit(Tensor([6],"int32"), 3, )
paddle.hsplit(Tensor([6],"float32"), 3, )
paddle.hsplit(Tensor([6],"bool"), 3, )
paddle.hstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2, 5],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([],"int64"),], )
paddle.hstack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.hstack(list[Tensor([],"float32"),], )
paddle.hstack(list[Tensor([3, 2],"float64"),], )
paddle.hstack(list[Tensor([1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([],"int32"),], )
paddle.hstack(list[Tensor([1],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),], )
paddle.hstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.hstack(list[Tensor([3, 4, 2],"float64"),], )
paddle.hstack(list[Tensor([5],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),], )
paddle.hstack(list[Tensor([1, 1],"float64"),], )
paddle.hstack(list[Tensor([],"float64"),], )
paddle.hstack(list[Tensor([],"float64"),Tensor([2],"float64"),], )
paddle.hstack(list[Tensor([],"float16"),], )
paddle.hstack(list[Tensor([],"float64"),Tensor([],"float64"),Tensor([],"float64"),], )
paddle.hstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.hypot(Tensor([10, 20],"float32"), Tensor([10, 20],"float32"), )
paddle.hypot(Tensor([10, 10],"float32"), Tensor([10, 1],"float32"), )
paddle.hypot(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.hypot(Tensor([],"float32"), Tensor([],"float32"), )
paddle.hypot(Tensor([6],"float32"), Tensor([1],"float32"), )
paddle.i0(Tensor([513],"float64"), )
paddle.i0(Tensor([10, 20, 1],"float32"), )
paddle.i0(Tensor([],"float32"), )
paddle.i0(Tensor([4],"float32"), )
paddle.i0(Tensor([4],"float64"), )
paddle.i0(Tensor([9],"float64"), )
paddle.i0(Tensor([],"float64"), )
paddle.i0(Tensor([6],"float64"), )
paddle.i0(Tensor([9],"float32"), )
paddle.i0e(Tensor([9],"float64"), )
paddle.i0e(Tensor([4],"float32"), )
paddle.i0e(Tensor([6],"float64"), )
paddle.i0e(Tensor([],"float32"), )
paddle.i0e(Tensor([4],"float64"), )
paddle.i0e(Tensor([9],"float32"), )
paddle.i1(Tensor([6],"float64"), )
paddle.i1(Tensor([],"float32"), )
paddle.i1(Tensor([9],"float64"), )
paddle.i1(Tensor([9],"float32"), )
paddle.i1e(Tensor([9],"float32"), )
paddle.i1e(Tensor([6],"float64"), )
paddle.i1e(Tensor([],"float32"), )
paddle.i1e(Tensor([9],"float64"), )
paddle.imag(Tensor([2, 20, 2, 3],"complex64"), )
paddle.imag(x=Tensor([20, 10],"complex128"), )
paddle.imag(Tensor([2, 20, 2, 3],"complex128"), )
paddle.imag(x=Tensor([20, 10],"complex64"), )
paddle.imag(Tensor([],"complex64"), )
paddle.imag(Tensor([2, 3],"complex128"), )
paddle.imag(Tensor([],"complex128"), )
paddle.imag(Tensor([2, 3],"complex64"), )
paddle.imag(x=Tensor([1, 10],"complex64"), )
paddle.increment(x=Tensor([1],"int32"), )
paddle.increment(x=Tensor([1],"int64"), value=1.0, )
paddle.increment(Tensor([],"int32"), -1, )
paddle.increment(x=Tensor([1],"float64"), )
paddle.increment(Tensor([],"float32"), 1.0, )
paddle.increment(Tensor([1],"int64"), )
paddle.increment(Tensor([],"int64"), -1, )
paddle.increment(x=Tensor([1],"float32"), )
paddle.increment(Tensor([1],"float32"), value=2.0, )
paddle.increment(x=Tensor([1],"float64"), value=2.0, )
paddle.increment(x=Tensor([1],"int64"), )
paddle.incubate.nn.functional.swiglu(Tensor([6, 1, 18],"float32"), Tensor([6, 1, 18],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([4, 101],"float32"), Tensor([4, 101],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([4, 202],"float32"), None, )
paddle.incubate.nn.functional.swiglu(Tensor([4, 101],"float64"), Tensor([4, 101],"float64"), )
paddle.incubate.nn.functional.swiglu(Tensor([4, 1, 18],"float32"), Tensor([4, 1, 18],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([4, 3, 18],"float32"), Tensor([4, 3, 18],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([2, 3, 18],"float32"), Tensor([2, 3, 18],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([4, 202],"float64"), None, )
paddle.incubate.nn.functional.swiglu(Tensor([6, 3, 18],"float32"), Tensor([6, 3, 18],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 86],"float32"), Tensor([1, 1, 86],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([1, 1, 18],"float32"), Tensor([1, 1, 18],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([2, 1, 18],"float32"), Tensor([2, 1, 18],"float32"), )
paddle.incubate.nn.functional.swiglu(Tensor([0, 7168],"bfloat16"), )
paddle.incubate.segment_max(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_mean(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_min(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.incubate.segment_sum(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.index_add(Tensor([10, 10],"float32"), Tensor([4],"int32"), -1, Tensor([10, 4],"float32"), )
paddle.index_add(Tensor([101, 3],"float16"), Tensor([3],"int64"), 0, Tensor([3, 3],"float16"), )
paddle.index_add(Tensor([101, 3],"float64"), Tensor([3],"int64"), 0, Tensor([3, 3],"float64"), )
paddle.index_add(Tensor([100, 5],"float64"), Tensor([20],"int64"), 0, Tensor([20, 5],"float64"), )
paddle.index_add(Tensor([101, 3],"float32"), Tensor([3],"int64"), 0, Tensor([3, 3],"float32"), )
paddle.index_add(Tensor([100, 5],"float32"), Tensor([20],"int32"), 0, Tensor([20, 5],"float32"), )
paddle.index_add(Tensor([4, 3, 2],"float32"), Tensor([16],"int64"), 1, Tensor([4, 16, 2],"float32"), )
paddle.index_add(Tensor([10],"float32"), Tensor([4],"int32"), 0, Tensor([4],"float32"), )
paddle.index_fill(Tensor([128],"int64"), Tensor([38],"int64"), 0, 6, )
paddle.index_fill(Tensor([128],"int64"), Tensor([30],"int64"), 0, 7, )
paddle.index_fill(Tensor([20, 40],"float32"), Tensor([2],"int64"), 1, -1, )
paddle.index_fill(Tensor([20, 40],"float64"), Tensor([5],"int64"), 0, -1, )
paddle.index_fill(Tensor([128],"int64"), Tensor([28],"int64"), 0, 5, )
paddle.index_fill(Tensor([4],"int64"), Tensor([4],"int64"), 0, 2, )
paddle.index_fill(Tensor([8],"int64"), Tensor([5],"int64"), 0, 2, )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([4],"int64"),Tensor([4],"int64"),), Tensor([4],"float64"), False, )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2, 1],"float64"), False, )
paddle.index_put(Tensor([128],"int64"), tuple(Tensor([38],"int64"),), Tensor([],"int64"), )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2, 1],"float64"), True, )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([4],"int64"),Tensor([4],"int64"),), Tensor([4],"float64"), True, )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2],"float64"), False, )
paddle.index_put(Tensor([20, 40],"float64"), tuple(Tensor([5],"int64"),), Tensor([],"float64"), )
paddle.index_put(Tensor([128],"int64"), tuple(Tensor([28],"int64"),), Tensor([],"int64"), )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([4],"int64"),Tensor([4],"int64"),), Tensor([1],"float64"), False, )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([1, 2],"float64"), True, )
paddle.index_put(Tensor([128],"int64"), tuple(Tensor([30],"int64"),), Tensor([],"int64"), )
paddle.index_put(Tensor([40, 20],"float32"), tuple(Tensor([2],"int64"),), Tensor([],"float32"), )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([4],"int64"),Tensor([4],"int64"),), Tensor([1],"float64"), True, )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([1, 2],"float64"), False, )
paddle.index_put(Tensor([16, 21],"float64"), tuple(Tensor([2, 2],"int64"),Tensor([2, 2],"int64"),), Tensor([2],"float64"), True, )
paddle.index_put(Tensor([8],"int64"), tuple(Tensor([5],"int64"),), Tensor([],"int64"), )
paddle.index_put(Tensor([4],"int64"), tuple(Tensor([4],"int64"),), Tensor([],"int64"), )
paddle.index_select(Tensor([4, 2, 7, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 108],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 17, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 109],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 78],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 42],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([8, 64],"float32"), index=Tensor([3],"int64"), axis=0, )
paddle.index_select(Tensor([4, 48],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 4, 9, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 41],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 19, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 4, 4, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 58],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 26],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 112],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 3, 2, 8],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 4, 6, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 30, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 77],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 123],"float32"), Tensor([2],"int64"), )
paddle.index_select(Tensor([4, 49],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 91],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 24],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 9, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 100],"float32"), Tensor([2],"int64"), )
paddle.index_select(Tensor([4, 28],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 57],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 5, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 38],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 86],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 99],"float32"), Tensor([2],"int64"), )
paddle.index_select(Tensor([4, 59],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 37],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 79],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 111],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 126],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 8, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 4, 10, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 30],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 4, 2, 8],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 36],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 28, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 75],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 34],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 128],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 64],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 4, 3, 8],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 72],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 45],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 127],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 25, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 66],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([2, 3, 32],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 3, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 104],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 106],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 46],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 4, 7, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 119],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 15, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 89],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 12, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 84],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 56],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 60],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 4, 15, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 62],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 105],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 99],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 29],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 70],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 18, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 120],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 40],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 31, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 14, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 32],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 71],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 68],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 93],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 94],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 85],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 123],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 25],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 4, 12, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 4, 11, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 54],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 88],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([100, 5],"float64"), Tensor([20],"int64"), 0, )
paddle.index_select(Tensor([4, 102],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 113],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 95],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 83],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 55],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 74],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 118],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 98],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 107],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 3, 4, 8],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 116],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 26, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 76],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 117],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 97],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 80],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 35],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 20, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 121],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 23, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 53],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 13, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 4, 13, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 33],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 16, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 124],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 82],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 31],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 69],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 22, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 110],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 4, 1, 8],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 50],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 122],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 4, 14, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([10, 10],"float32"), Tensor([4],"int32"), 1, )
paddle.index_select(Tensor([4, 2, 4, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 27, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([6, 4, 1, 4],"float32"), Tensor([4],"int64"), axis=1, )
paddle.index_select(Tensor([4, 39],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 4, 2, 4],"float32"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 44],"int64"), Tensor([4],"int64"), )
paddle.index_select(Tensor([4, 2, 10, 4],"float32"), Tensor([4],"int64"), )
paddle.inner(Tensor([5, 10, 10],"complex128"), Tensor([2, 10],"complex128"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.inner(x=Tensor([5, 3, 4],"float64"), y=Tensor([2, 5, 4],"float64"), )
paddle.inner(x=Tensor([2, 5, 3, 4],"float64"), y=Tensor([3, 2, 5, 4],"float64"), )
paddle.inner(Tensor([5, 10, 10],"float64"), Tensor([2, 10],"float64"), )
paddle.inner(x=Tensor([4],"float64"), y=Tensor([4],"float64"), )
paddle.inner(x=Tensor([4, 4],"float64"), y=Tensor([4, 4],"float64"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([5, 4],"float64"), )
paddle.inner(x=Tensor([3, 4],"float64"), y=Tensor([3, 2, 4],"float64"), )
paddle.inner(x=Tensor([4, 4],"float32"), y=Tensor([4, 4],"float32"), )
paddle.is_empty(Tensor([5],"float32"), )
paddle.is_empty(Tensor([3, 0],"float64"), )
paddle.is_empty(Tensor([3],"int64"), )
paddle.is_empty(Tensor([0],"float32"), )
paddle.is_empty(Tensor([],"float32"), )
paddle.is_empty(Tensor([2, 3],"float32"), )
paddle.is_empty(Tensor([3, 5],"float32"), )
paddle.is_empty(Tensor([3, 0],"int64"), )
paddle.is_empty(Tensor([],"int64"), )
paddle.is_empty(Tensor([3, 0, 5],"float32"), )
paddle.isclose(x=Tensor([3, 4, 5],"float64"), y=Tensor([3, 4, 5],"float64"), )
paddle.isclose(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), rtol=1e-05, atol=1e-08, )
paddle.isclose(x=Tensor([2],"float64"), y=Tensor([2],"float64"), )
paddle.isclose(Tensor([],"float32"), Tensor([],"float32"), )
paddle.isclose(x=Tensor([6],"float64"), y=Tensor([6],"float64"), )
paddle.isclose(x=Tensor([2],"float32"), y=Tensor([2],"float32"), )
paddle.isfinite(Tensor([2, 3, 4, 5],"float64"), )
paddle.isfinite(Tensor([11, 17],"float32"), )
paddle.isfinite(Tensor([11, 17],"complex64"), )
paddle.isfinite(Tensor([132],"int64"), )
paddle.isfinite(Tensor([2, 3, 4, 5],"complex128"), )
paddle.isfinite(x=Tensor([7],"float64"), )
paddle.isfinite(x=Tensor([3],"float64"), )
paddle.isfinite(x=Tensor([2],"float64"), )
paddle.isfinite(x=Tensor([5],"float64"), )
paddle.isfinite(Tensor([1],"float32"), )
paddle.isfinite(Tensor([],"float32"), )
paddle.isin(Tensor([2, 2, 5, 10],"float64"), Tensor([4, 5, 5],"float64"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"float64"), Tensor([4, 5, 5],"float64"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"int64"), Tensor([4, 5, 5],"int64"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"int32"), Tensor([4, 5, 5],"int32"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"int32"), Tensor([4, 5, 5],"int32"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"int64"), Tensor([4, 5, 5],"int64"), True, True, )
paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 5, 5],"float32"), True, False, )
paddle.isin(Tensor([2, 2, 5, 10],"float32"), Tensor([4, 5, 5],"float32"), True, True, )
paddle.isin(Tensor([],"float64"), Tensor([],"float64"), False, False, )
paddle.isin(Tensor([],"float32"), Tensor([],"float32"), False, True, )
paddle.isin(Tensor([4, 8],"float32"), Tensor([2, 3],"float32"), False, True, )
paddle.isin(Tensor([4, 8],"float16"), Tensor([2, 3],"float16"), False, True, )
paddle.isin(Tensor([],"float16"), Tensor([],"float16"), False, False, )
paddle.isin(Tensor([4, 8],"float64"), Tensor([2, 3],"float64"), False, True, )
paddle.isin(Tensor([4, 8],"float32"), Tensor([2, 3],"float32"), False, False, )
paddle.isin(Tensor([4, 8],"int32"), Tensor([2, 3],"int32"), False, False, )
paddle.isin(Tensor([],"int64"), Tensor([],"int64"), False, True, )
paddle.isin(Tensor([],"float32"), Tensor([],"float32"), False, False, )
paddle.isin(Tensor([],"int32"), Tensor([],"int32"), False, True, )
paddle.isin(Tensor([],"int32"), Tensor([],"int32"), False, False, )
paddle.isin(Tensor([4, 8],"bfloat16"), Tensor([2, 3],"bfloat16"), False, True, )
paddle.isin(Tensor([],"bfloat16"), Tensor([],"bfloat16"), False, False, )
paddle.isin(Tensor([4, 8],"bfloat16"), Tensor([2, 3],"bfloat16"), False, False, )
paddle.isin(Tensor([4, 8],"int64"), Tensor([2, 3],"int64"), False, False, )
paddle.isin(Tensor([4, 8],"int64"), Tensor([2, 3],"int64"), False, True, )
paddle.isin(Tensor([],"float16"), Tensor([],"float16"), False, True, )
paddle.isin(Tensor([],"int64"), Tensor([],"int64"), False, False, )
paddle.isin(Tensor([4, 8],"float16"), Tensor([2, 3],"float16"), False, False, )
paddle.isin(Tensor([4, 8],"int32"), Tensor([2, 3],"int32"), False, True, )
paddle.isin(Tensor([],"bfloat16"), Tensor([],"bfloat16"), False, True, )
paddle.isin(Tensor([],"float64"), Tensor([],"float64"), False, True, )
paddle.isin(Tensor([4, 8],"float64"), Tensor([2, 3],"float64"), False, False, )
paddle.isinf(Tensor([11, 17],"complex64"), )
paddle.isinf(Tensor([2, 3, 4, 5],"float64"), )
paddle.isinf(Tensor([2, 3, 4, 5],"complex128"), )
paddle.isinf(Tensor([10, 12],"float32"), )
paddle.isinf(Tensor([132],"uint8"), )
paddle.isinf(Tensor([384],"float32"), )
paddle.isinf(Tensor([132],"int64"), )
paddle.isinf(Tensor([11, 17],"float32"), )
paddle.isinf(Tensor([10, 12],"float64"), )
paddle.isinf(Tensor([2, 3, 4, 5],"int8"), )
paddle.isinf(Tensor([2, 1, 2],"float32"), )
paddle.isinf(x=Tensor([2],"float64"), )
paddle.isinf(Tensor([4, 5, 2],"float32"), )
paddle.isinf(Tensor([4, 5, 2],"float64"), )
paddle.isinf(Tensor([2, 2],"float32"), )
paddle.isinf(x=Tensor([7],"float64"), )
paddle.isinf(Tensor([],"float64"), )
paddle.isinf(Tensor([3],"float32"), )
paddle.isinf(Tensor([],"float32"), )
paddle.isinf(Tensor([2, 5],"float32"), )
paddle.isinf(Tensor([2, 2],"float64"), )
paddle.isinf(Tensor([3],"float64"), )
paddle.isinf(x=Tensor([5],"float64"), )
paddle.isnan(Tensor([384],"int64"), )
paddle.isnan(Tensor([114, 1],"float64"), )
paddle.isnan(Tensor([2, 3, 4, 5],"complex128"), )
paddle.isnan(Tensor([11, 17],"float32"), )
paddle.isnan(Tensor([2, 100],"float32"), )
paddle.isnan(Tensor([132],"int64"), )
paddle.isnan(Tensor([11, 17],"complex64"), )
paddle.isnan(Tensor([46, 14],"float32"), )
paddle.isnan(Tensor([384],"float32"), )
paddle.isnan(Tensor([2, 3, 4, 5],"float32"), )
paddle.isnan(Tensor([26, 12],"float32"), )
paddle.isnan(Tensor([400, 1],"float64"), )
paddle.isnan(Tensor([2, 3, 4, 5],"float64"), )
paddle.isnan(Tensor([144],"float64"), )
paddle.isnan(Tensor([400],"float64"), )
paddle.isnan(Tensor([],"float64"), )
paddle.isnan(Tensor([3, 4],"float16"), )
paddle.isnan(Tensor([4, 4, 4],"float32"), )
paddle.isnan(Tensor([6],"float64"), )
paddle.isnan(Tensor([3, 4],"float64"), )
paddle.isnan(Tensor([78],"float64"), )
paddle.isnan(Tensor([9],"float32"), )
paddle.isnan(Tensor([12],"float16"), )
paddle.isnan(Tensor([40],"int32"), )
paddle.isnan(Tensor([64],"int64"), )
paddle.isnan(Tensor([2, 4, 2],"float64"), )
paddle.isnan(Tensor([3, 4],"float32"), )
paddle.isnan(Tensor([24],"float32"), )
paddle.isnan(Tensor([3, 4, 2],"float32"), )
paddle.isnan(x=Tensor([2],"float64"), )
paddle.isnan(x=Tensor([5],"float64"), )
paddle.isnan(Tensor([6],"float32"), )
paddle.isnan(x=Tensor([3],"float64"), )
paddle.isnan(Tensor([24],"int32"), )
paddle.isnan(Tensor([3, 4, 2],"int32"), )
paddle.isnan(Tensor([24],"int64"), )
paddle.isnan(Tensor([1],"float32"), )
paddle.isnan(Tensor([2, 4],"float32"), )
paddle.isnan(Tensor([2, 3],"float32"), )
paddle.isnan(Tensor([5, 4],"float32"), )
paddle.isnan(Tensor([3, 4, 2],"int64"), )
paddle.isnan(x=Tensor([7],"float64"), )
paddle.isnan(Tensor([12],"float32"), )
paddle.isnan(Tensor([24],"float64"), )
paddle.isnan(Tensor([5],"float64"), )
paddle.isnan(Tensor([5, 4],"float64"), )
paddle.isnan(Tensor([3, 5],"float32"), )
paddle.isnan(Tensor([91, 1],"float64"), )
paddle.isnan(Tensor([2, 4, 2],"float32"), )
paddle.isnan(Tensor([3, 4, 2],"float64"), )
paddle.isnan(Tensor([40],"int64"), )
paddle.isnan(Tensor([40],"float32"), )
paddle.isnan(Tensor([20],"float32"), )
paddle.isnan(Tensor([3, 10],"float32"), )
paddle.isnan(Tensor([40],"float64"), )
paddle.isnan(Tensor([15],"float32"), )
paddle.isnan(Tensor([12],"float64"), )
paddle.isnan(Tensor([20],"float64"), )
paddle.isnan(Tensor([],"float32"), )
paddle.isnan(Tensor([5],"float32"), )
paddle.isneginf(Tensor([132],"uint8"), )
paddle.isneginf(Tensor([11, 17],"float32"), )
paddle.isneginf(Tensor([2, 3, 4, 5],"int8"), )
paddle.isneginf(Tensor([132],"int64"), )
paddle.isneginf(Tensor([2, 3, 4, 5],"float64"), )
paddle.isposinf(Tensor([11, 17],"float32"), )
paddle.isposinf(Tensor([2, 3, 4, 5],"int8"), )
paddle.isposinf(Tensor([2, 3, 4, 5],"float64"), )
paddle.isposinf(Tensor([132],"int64"), )
paddle.isposinf(Tensor([132],"uint8"), )
paddle.isreal(Tensor([],"complex64"), )
paddle.isreal(Tensor([],"bfloat16"), )
paddle.isreal(Tensor([],"float16"), )
paddle.isreal(Tensor([],"float32"), )
paddle.isreal(Tensor([],"int32"), )
paddle.isreal(Tensor([],"float64"), )
paddle.isreal(Tensor([2, 3],"float32"), )
paddle.isreal(Tensor([2, 3],"bool"), )
paddle.isreal(Tensor([2, 3],"complex128"), )
paddle.isreal(Tensor([2, 3],"int64"), )
paddle.isreal(Tensor([],"bool"), )
paddle.isreal(Tensor([2, 3],"float16"), )
paddle.isreal(Tensor([2, 3],"float64"), )
paddle.isreal(Tensor([2, 3],"int16"), )
paddle.isreal(Tensor([],"complex128"), )
paddle.isreal(Tensor([2, 3],"complex64"), )
paddle.isreal(Tensor([],"int16"), )
paddle.isreal(Tensor([2, 3],"bfloat16"), )
paddle.isreal(Tensor([2, 3],"int32"), )
paddle.isreal(Tensor([],"int64"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4, 3, 2],"float32"), )
paddle.kron(Tensor([2, 2],"float32"), Tensor([23, 7],"float32"), )
paddle.kron(Tensor([10, 10],"float32"), Tensor([5, 5, 4],"float32"), )
paddle.kron(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), )
paddle.kron(Tensor([],"float32"), Tensor([],"float32"), )
paddle.kron(x=Tensor([2, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.kron(x=Tensor([2, 3],"int32"), y=Tensor([3, 3],"int32"), )
paddle.kron(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([3, 3],"float64"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([2, 2, 3],"float64"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([3, 3],"complex128"), )
paddle.kron(Tensor([2, 2],"float64"), Tensor([3, 3],"complex128"), )
paddle.kron(Tensor([2, 3],"float32"), Tensor([13, 4],"float32"), )
paddle.kron(Tensor([2, 2],"complex128"), Tensor([3, 3],"float64"), )
paddle.kron(Tensor([4, 4],"float32"), Tensor([8, 8],"float32"), )
paddle.kron(x=Tensor([2, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.kron(x=Tensor([1],"float64"), y=Tensor([3, 3],"float64"), )
paddle.kron(x=Tensor([2, 2],"float64"), y=Tensor([3, 3, 2],"float64"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([3, 3],"float32"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([3, 3],"complex64"), )
paddle.kron(Tensor([2, 2],"complex64"), Tensor([2, 2, 3],"float32"), )
paddle.kron(Tensor([2, 2],"float32"), Tensor([3, 3],"complex64"), )
paddle.kron(x=Tensor([2, 3],"int64"), y=Tensor([3, 3],"int64"), )
paddle.kron(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.kthvalue(Tensor([],"float32"), 1, )
paddle.kthvalue(Tensor([5],"float32"), 1, )
paddle.kthvalue(x=Tensor([3, 2, 4],"float64"), k=4, axis=2, keepdim=True, )
paddle.kthvalue(x=Tensor([3, 2, 4],"float32"), k=3, axis=0, )
paddle.kthvalue(x=Tensor([3, 2, 4],"float64"), k=3, axis=0, )
paddle.kthvalue(x=Tensor([3, 2, 4],"float64"), k=4, axis=2, keepdim=False, )
paddle.kthvalue(Tensor([30],"float32"), k=2, )
paddle.lcm(Tensor([10, 20],"int32"), Tensor([10, 20],"int32"), )
paddle.lcm(Tensor([6],"int32"), Tensor([1],"int32"), )
paddle.lcm(Tensor([],"int64"), Tensor([],"int64"), )
paddle.lcm(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.ldexp(Tensor([210],"int32"), Tensor([210],"int32"), )
paddle.ldexp(Tensor([247],"float64"), Tensor([247],"int32"), )
paddle.ldexp(Tensor([207],"float32"), Tensor([207],"int32"), )
paddle.ldexp(Tensor([5, 6, 6],"float64"), Tensor([6],"int32"), )
paddle.ldexp(Tensor([209],"int64"), Tensor([209],"int32"), )
paddle.ldexp(Tensor([10, 20, 1],"float32"), Tensor([1],"int32"), )
paddle.ldexp(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.ldexp(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.ldexp(Tensor([],"float32"), Tensor([],"float32"), )
paddle.lerp(x=Tensor([4, 5, 4],"float64"), y=Tensor([4, 5, 4],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=1.0, )
paddle.lerp(Tensor([2, 3, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([3, 8, 8],"float32"), Tensor([3, 8, 8],"float32"), 2.1, )
paddle.lerp(Tensor([2, 1, 8, 8],"float32"), Tensor([2, 3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([1, 1, 1],"float32"), Tensor([3, 8, 8],"float32"), 0.3, )
paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5, 4, 3],"float64"), y=Tensor([4, 5, 4, 3],"float64"), weight=0.0, )
paddle.lerp(Tensor([2, 1, 1, 1],"float32"), Tensor([2, 3, 8, 8],"float32"), 0.3, )
paddle.lerp(Tensor([1, 8, 8],"float32"), Tensor([3, 8, 8],"float32"), 1.1, )
paddle.lerp(Tensor([2, 2, 5],"float32"), Tensor([3, 2, 1, 5],"float32"), 0.5, )
paddle.lerp(Tensor([],"float32"), Tensor([],"float32"), 0.5, )
paddle.lerp(x=Tensor([4],"float32"), y=Tensor([4],"float32"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5],"float64"), y=Tensor([1],"float64"), weight=0.2, )
paddle.lerp(x=Tensor([4],"float64"), y=Tensor([4],"float64"), weight=0.5, )
paddle.lerp(x=Tensor([4, 5],"float64"), y=Tensor([4, 5],"float64"), weight=0.5, )
paddle.less(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.less(x=Tensor([3],"int64"), y=Tensor([3],"int64"), )
paddle.less(Tensor([6],"float32"), Tensor([6],"float32"), )
paddle.less_equal(Tensor([513],"float64"), Tensor([],"float64"), )
paddle.less_equal(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.less_equal(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.less_equal(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.less_equal(Tensor([4],"float16"), Tensor([4],"float16"), )
paddle.less_equal(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.less_equal(Tensor([6],"float32"), Tensor([6],"float32"), )
paddle.less_equal(x=Tensor([3],"int64"), y=Tensor([3],"int64"), )
paddle.less_equal(Tensor([],"float32"), Tensor([],"float32"), )
paddle.less_equal(x=Tensor([1, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.less_equal(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.less_equal(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.less_equal(Tensor([4],"int64"), Tensor([4],"int64"), )
paddle.less_equal(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.less_equal(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.less_equal(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.less_equal(x=Tensor([1],"float64"), y=Tensor([4],"float64"), )
paddle.less_equal(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.less_equal(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.less_equal(x=Tensor([3, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.less_equal(Tensor([1],"int32"), Tensor([1],"int32"), )
paddle.less_than(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.less_than(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.less_than(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.less_than(x=Tensor([1, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.less_than(Tensor([4],"int64"), Tensor([4],"int64"), )
paddle.less_than(x=Tensor([1],"float64"), y=Tensor([4],"float64"), )
paddle.less_than(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.less_than(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.less_than(Tensor([],"float32"), Tensor([],"float32"), )
paddle.less_than(x=Tensor([3, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.less_than(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.less_than(x=Tensor([3],"int64"), y=Tensor([3],"int64"), )
paddle.less_than(Tensor([4],"float16"), Tensor([4],"float16"), )
paddle.less_than(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.less_than(Tensor([],"int64"), Tensor([1],"int64"), )
paddle.less_than(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.less_than(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.less_than(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.less_than(Tensor([6],"float32"), Tensor([6],"float32"), )
paddle.less_than(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.less_than(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.less_than(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.lgamma(Tensor([144],"float64"), )
paddle.lgamma(Tensor([10, 12],"float32"), )
paddle.lgamma(Tensor([114, 1],"float64"), )
paddle.lgamma(Tensor([400],"float64"), )
paddle.lgamma(Tensor([10, 20, 2],"float32"), )
paddle.lgamma(Tensor([10, 20, 1],"float32"), )
paddle.lgamma(Tensor([400, 1],"float64"), )
paddle.lgamma(Tensor([148, 1, 1],"float32"), )
paddle.lgamma(Tensor([10, 20, 2],"float64"), )
paddle.lgamma(x=Tensor([6, 6, 6],"float64"), )
paddle.lgamma(Tensor([2],"float64"), )
paddle.lgamma(Tensor([2, 2, 2],"float32"), )
paddle.lgamma(Tensor([2, 2],"float32"), )
paddle.lgamma(Tensor([],"float32"), )
paddle.lgamma(Tensor([2, 5, 2],"float64"), )
paddle.lgamma(Tensor([2, 2],"float64"), )
paddle.lgamma(Tensor([3],"float32"), )
paddle.lgamma(Tensor([7, 3],"float32"), )
paddle.lgamma(Tensor([1],"float32"), )
paddle.lgamma(Tensor([89],"float64"), )
paddle.lgamma(Tensor([1, 4],"float32"), )
paddle.lgamma(Tensor([5],"float64"), )
paddle.lgamma(Tensor([4],"float32"), )
paddle.lgamma(Tensor([4, 1],"float32"), )
paddle.lgamma(Tensor([10, 1, 1],"float32"), )
paddle.lgamma(x=Tensor([3, 3],"float32"), )
paddle.lgamma(Tensor([6],"float32"), )
paddle.lgamma(Tensor([10, 1],"float64"), )
paddle.lgamma(x=Tensor([6, 6],"float64"), )
paddle.lgamma(Tensor([2, 1, 2],"float32"), )
paddle.lgamma(Tensor([2, 5],"float64"), )
paddle.lgamma(Tensor([2, 3],"float32"), )
paddle.lgamma(Tensor([3],"float64"), )
paddle.lgamma(x=Tensor([6, 6],"float32"), )
paddle.lgamma(Tensor([10, 1, 1, 1],"float32"), )
paddle.lgamma(Tensor([1, 1],"float32"), )
paddle.lgamma(Tensor([],"float64"), )
paddle.lgamma(Tensor([2, 3],"float64"), )
paddle.lgamma(Tensor([9, 1, 1],"float64"), )
paddle.lgamma(Tensor([78],"float64"), )
paddle.lgamma(Tensor([2, 1],"float32"), )
paddle.lgamma(Tensor([91, 1],"float64"), )
paddle.lgamma(Tensor([2],"float32"), )
paddle.lgamma(Tensor([1, 2],"float32"), )
paddle.lgamma(Tensor([2, 1],"float64"), )
paddle.lgamma(Tensor([1, 2, 2],"float32"), )
paddle.lgamma(Tensor([10, 1],"float32"), )
paddle.lgamma(x=Tensor([3, 3],"float64"), )
paddle.linalg.cholesky(Tensor([2, 2],"float64"), )
paddle.linalg.cholesky(Tensor([2, 2],"float32"), )
paddle.linalg.cholesky(Tensor([3, 3],"float64"), )
paddle.linalg.cond(Tensor([3, 6, 6],"float64"), 1, )
paddle.linalg.cond(Tensor([3, 6, 6],"float64"), None, )
paddle.linalg.cond(x=Tensor([4, 2, 4, 4],"float64"), p=-1, )
paddle.linalg.cond(x=Tensor([6, 2, 4, 3, 4],"float64"), )
paddle.linalg.cond(Tensor([3, 6, 6],"float64"), "nuc", )
paddle.linalg.cond(Tensor([3, 6, 6],"float64"), -2, )
paddle.linalg.cond(x=Tensor([4, 2, 4, 4],"float64"), p=math.inf, )
paddle.linalg.cond(x=Tensor([4, 2, 4, 4],"float64"), p=-math.inf, )
paddle.linalg.cond(Tensor([3, 6, 6],"float64"), 2, )
paddle.linalg.cond(Tensor([3, 6, 6],"float64"), math.inf, )
paddle.linalg.cond(Tensor([3, 6, 6],"float64"), -1, )
paddle.linalg.cond(Tensor([3, 6, 6],"float64"), -math.inf, )
paddle.linalg.cond(Tensor([3, 6, 6],"float64"), "fro", )
paddle.linalg.cond(Tensor([5, 5],"float32"), "fro", )
paddle.linalg.cond(Tensor([0, 4, 5, 5],"float64"), -2, )
paddle.linalg.cond(Tensor([0, 7, 7],"float32"), 2, )
paddle.linalg.cond(Tensor([0, 7, 7],"float32"), "fro", )
paddle.linalg.cond(x=Tensor([6, 4],"float64"), p=-2, )
paddle.linalg.cond(Tensor([9, 7],"float64"), -2, )
paddle.linalg.cond(Tensor([5, 0, 4, 3],"float32"), None, )
paddle.linalg.cond(Tensor([0, 9, 9],"float32"), None, )
paddle.linalg.cond(Tensor([0, 4, 5, 5],"float64"), "nuc", )
paddle.linalg.cond(Tensor([0, 4, 5, 5],"float64"), -1, )
paddle.linalg.cond(Tensor([5, 0, 4, 3],"float32"), -2, )
paddle.linalg.cond(Tensor([2, 4, 3, 3],"float32"), -1, )
paddle.linalg.cond(x=Tensor([4, 4],"float64"), p="fro", )
paddle.linalg.cond(Tensor([2, 4, 3, 3],"float32"), "fro", )
paddle.linalg.cond(Tensor([2, 4, 3, 3],"float32"), -2, )
paddle.linalg.cond(Tensor([5, 5],"float32"), 2, )
paddle.linalg.cond(Tensor([5, 5],"float32"), -2, )
paddle.linalg.cond(Tensor([0, 9, 9],"float32"), 2, )
paddle.linalg.cond(Tensor([0, 4, 5, 5],"float64"), 1, )
paddle.linalg.cond(x=Tensor([4, 4],"float64"), p=1, )
paddle.linalg.cond(x=Tensor([4, 4],"float64"), p=-2, )
paddle.linalg.cond(Tensor([3, 3],"float32"), p=-1, )
paddle.linalg.cond(Tensor([0, 4, 5, 5],"float64"), -math.inf, )
paddle.linalg.cond(Tensor([3, 3],"float32"), )
paddle.linalg.cond(Tensor([9, 7],"float64"), None, )
paddle.linalg.cond(Tensor([5, 5],"float32"), "nuc", )
paddle.linalg.cond(Tensor([3, 3],"float32"), p=math.inf, )
paddle.linalg.cond(Tensor([2, 4, 3, 3],"float32"), 1, )
paddle.linalg.cond(Tensor([5, 5],"float32"), None, )
paddle.linalg.cond(Tensor([5, 5],"float32"), 1, )
paddle.linalg.cond(x=Tensor([4, 4],"float64"), )
paddle.linalg.cond(Tensor([0, 9, 9],"float32"), 1, )
paddle.linalg.cond(Tensor([0, 9, 9],"float32"), math.inf, )
paddle.linalg.cond(Tensor([0, 9, 9],"float32"), "nuc", )
paddle.linalg.cond(Tensor([0, 7, 7],"float32"), math.inf, )
paddle.linalg.cond(Tensor([3, 3],"float32"), p=1, )
paddle.linalg.cond(Tensor([3, 3],"float32"), p="nuc", )
paddle.linalg.cond(Tensor([4, 2, 10],"float32"), None, )
paddle.linalg.cond(Tensor([2, 4, 3, 3],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([0, 7, 7],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([0, 4, 5, 5],"float64"), "fro", )
paddle.linalg.cond(Tensor([4, 2, 10],"float32"), 2, )
paddle.linalg.cond(Tensor([0, 9, 9],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([9, 7],"float64"), 2, )
paddle.linalg.cond(Tensor([2, 4, 3, 3],"float32"), None, )
paddle.linalg.cond(x=Tensor([3, 4],"float64"), )
paddle.linalg.cond(Tensor([0, 10, 8],"float64"), None, )
paddle.linalg.cond(Tensor([0, 4, 5, 5],"float64"), 2, )
paddle.linalg.cond(Tensor([5, 5],"float32"), math.inf, )
paddle.linalg.cond(Tensor([0, 7, 11],"float32"), -2, )
paddle.linalg.cond(x=Tensor([3, 3],"float64"), )
paddle.linalg.cond(Tensor([2, 4, 4],"float32"), p="fro", )
paddle.linalg.cond(Tensor([3, 3],"float32"), p=2, )
paddle.linalg.cond(Tensor([3, 5, 4, 1],"float32"), None, )
paddle.linalg.cond(Tensor([0, 7, 11],"float32"), None, )
paddle.linalg.cond(Tensor([0, 7, 7],"float32"), -2, )
paddle.linalg.cond(Tensor([2, 4, 3, 3],"float32"), 2, )
paddle.linalg.cond(Tensor([5, 5],"float32"), -math.inf, )
paddle.linalg.cond(Tensor([0, 4, 5, 5],"float64"), math.inf, )
paddle.linalg.cond(Tensor([0, 10, 8],"float64"), 2, )
paddle.linalg.cond(Tensor([0, 10, 8],"float64"), -2, )
paddle.linalg.cond(x=Tensor([3, 3],"float32"), )
paddle.linalg.cond(Tensor([0, 7, 7],"float32"), 1, )
paddle.linalg.cond(Tensor([2, 4, 3, 3],"float32"), math.inf, )
paddle.linalg.cond(Tensor([0, 4, 5, 5],"float64"), None, )
paddle.linalg.cond(Tensor([4, 2, 10],"float32"), -2, )
paddle.linalg.cond(Tensor([0, 7, 11],"float32"), 2, )
paddle.linalg.cond(Tensor([0, 9, 9],"float32"), "fro", )
paddle.linalg.cond(x=Tensor([4, 4],"float64"), p="nuc", )
paddle.linalg.cond(Tensor([2, 4, 3, 3],"float32"), "nuc", )
paddle.linalg.cond(Tensor([0, 9, 9],"float32"), -1, )
paddle.linalg.cond(Tensor([5, 0, 4, 3],"float32"), 2, )
paddle.linalg.cond(Tensor([0, 7, 7],"float32"), "nuc", )
paddle.linalg.cond(Tensor([5, 5],"float32"), -1, )
paddle.linalg.cond(Tensor([0, 7, 7],"float32"), -1, )
paddle.linalg.cond(Tensor([0, 9, 9],"float32"), -2, )
paddle.linalg.cond(Tensor([3, 3],"float32"), p="fro", )
paddle.linalg.cond(Tensor([0, 7, 7],"float32"), None, )
paddle.linalg.corrcoef(Tensor([4, 5],"float32"), )
paddle.linalg.corrcoef(Tensor([10],"float64"), )
paddle.linalg.corrcoef(Tensor([10],"float32"), rowvar=False, )
paddle.linalg.corrcoef(Tensor([4, 5],"float64"), )
paddle.linalg.corrcoef(Tensor([4, 5],"float64"), rowvar=False, )
paddle.linalg.corrcoef(Tensor([10],"float64"), rowvar=False, )
paddle.linalg.corrcoef(Tensor([10],"float32"), )
paddle.linalg.corrcoef(Tensor([12],"float32"), )
paddle.linalg.corrcoef(Tensor([4, 5],"float32"), rowvar=False, )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([10],"int32"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=False, ddof=True, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([10],"float64"), )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([20, 10],"float64"), rowvar=True, ddof=False, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([3, 4],"float32"), )
paddle.linalg.cov(x=Tensor([4, 12],"float64"), )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int64"), aweights=Tensor([10],"float64"), )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=Tensor([10],"int32"), )
paddle.linalg.cov(x=Tensor([4, 2],"float64"), )
paddle.linalg.cov(x=Tensor([4, 2],"float32"), )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=True, ddof=True, fweights=Tensor([10],"int32"), aweights=None, )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=True, ddof=True, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=False, ddof=True, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([10],"float64"), rowvar=True, ddof=False, fweights=None, aweights=None, )
paddle.linalg.cov(Tensor([12],"float32"), )
paddle.linalg.cov(x=Tensor([4, 12],"float64"), rowvar=True, )
paddle.linalg.cov(x=Tensor([4, 12],"float64"), rowvar=True, ddof=True, )
paddle.linalg.det(Tensor([3, 3, 5, 5],"complex128"), )
paddle.linalg.det(Tensor([2, 1, 4, 3, 6, 6],"complex64"), )
paddle.linalg.det(Tensor([3, 3, 5, 5],"float32"), )
paddle.linalg.det(x=Tensor([4, 4],"float64"), )
paddle.linalg.det(Tensor([3, 3],"float32"), )
paddle.linalg.det(x=Tensor([3, 4, 4],"float64"), )
paddle.linalg.det(Tensor([3, 3, 3],"float32"), )
paddle.linalg.det(x=Tensor([4, 4],"float32"), )
paddle.linalg.inv(x=Tensor([5, 3, 4, 4],"float64"), )
paddle.linalg.inv(x=Tensor([4, 4],"float64"), )
paddle.linalg.inv(x=Tensor([2, 2, 2],"float64"), )
paddle.linalg.inv(x=Tensor([4, 4],"float32"), )
paddle.linalg.inv(Tensor([5, 5],"float64"), )
paddle.linalg.lu(Tensor([4, 5, 5, 3],"float32"), )
paddle.linalg.lu(Tensor([3, 5, 5, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([2, 5, 3, 5],"float64"), )
paddle.linalg.lu(Tensor([2, 5, 3, 5],"float32"), )
paddle.linalg.lu(Tensor([3, 5, 5, 5],"float32"), )
paddle.linalg.lu(Tensor([3, 5, 5, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 5, 5, 5],"float64"), )
paddle.linalg.lu(Tensor([2, 5, 3, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([4, 5, 5, 3],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([4, 5, 5, 3],"float64"), )
paddle.linalg.lu(Tensor([4, 5, 5, 3],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([2, 5, 3, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([5, 3, 3, 3],"float64"), get_infos=False, )
paddle.linalg.lu(Tensor([3, 5, 5],"float32"), )
paddle.linalg.lu(Tensor([3, 5],"float64"), )
paddle.linalg.lu(Tensor([3, 3],"float32"), )
paddle.linalg.lu(Tensor([3, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([2, 3, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([2, 3, 5],"float64"), )
paddle.linalg.lu(Tensor([2, 3, 5],"float32"), )
paddle.linalg.lu(Tensor([5, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 3],"float64"), )
paddle.linalg.lu(Tensor([5, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 5],"float32"), )
paddle.linalg.lu(Tensor([3, 5, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 3, 3],"float64"), get_infos=False, )
paddle.linalg.lu(Tensor([5, 3],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([5, 3],"float64"), )
paddle.linalg.lu(Tensor([4, 3, 2, 2],"float64"), )
paddle.linalg.lu(Tensor([4, 5, 3],"float64"), )
paddle.linalg.lu(Tensor([4, 5, 3],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([5, 5],"float32"), )
paddle.linalg.lu(Tensor([5, 3],"float32"), )
paddle.linalg.lu(Tensor([3, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([4, 5, 3],"float32"), )
paddle.linalg.lu(Tensor([3, 3],"float32"), get_infos=False, )
paddle.linalg.lu(Tensor([5, 5],"float64"), )
paddle.linalg.lu(Tensor([4, 5, 3],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([5, 3],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 5, 5],"float32"), pivot=True, get_infos=True, )
paddle.linalg.lu(Tensor([3, 3],"float64"), get_infos=False, )
paddle.linalg.lu(Tensor([3, 3, 3],"float64"), )
paddle.linalg.lu(Tensor([3, 5, 5],"float64"), )
paddle.linalg.lu(Tensor([2, 3, 5],"float64"), pivot=True, get_infos=True, )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 5],"float32"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 3, 5],"float32"), Tensor([2, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([5, 3, 3, 3],"float64"), Tensor([5, 3, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 5, 3],"float32"), Tensor([4, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 5, 3],"float64"), Tensor([4, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 5, 3, 5],"float64"), Tensor([2, 5, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5, 5],"float64"), Tensor([3, 5, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 3],"float64"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 3, 5],"float64"), Tensor([2, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5],"float32"), Tensor([3, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5],"float64"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([5, 3],"float64"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([2, 3, 5],"float32"), Tensor([2, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 3],"float64"), Tensor([4, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 3],"float32"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([5, 5],"float64"), Tensor([5],"int32"), )
paddle.linalg.lu_unpack(Tensor([5, 3],"float32"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5, 5],"float64"), Tensor([3, 5],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 3, 3],"float64"), Tensor([3, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([4, 5, 3],"float32"), Tensor([4, 3],"int32"), )
paddle.linalg.lu_unpack(Tensor([3, 5],"float32"), Tensor([3],"int32"), )
paddle.linalg.lu_unpack(Tensor([5, 5],"float32"), Tensor([5],"int32"), )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4, 5],"float64"), p=-2, axis=list[1,2,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4],"float64"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4],"float64"), p="fro", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=True, )
paddle.linalg.matrix_norm(x=Tensor([2, 3, 4],"float64"), p="nuc", axis=list[0,1,], keepdim=False, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 10, 10],"float64"), n=64, )
paddle.linalg.matrix_power(Tensor([4, 4],"float64"), -2, )
paddle.linalg.matrix_power(x=Tensor([3, 4, 4],"float32"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 4, 4],"float64"), n=3, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 4, 4],"float64"), n=8, )
paddle.linalg.matrix_power(x=Tensor([3, 2, 4, 4],"float64"), n=64, )
paddle.linalg.matrix_rank(Tensor([2, 0, 6, 6],"float32"), )
paddle.linalg.matrix_rank(Tensor([2, 0, 6, 6],"float32"), atol=0.2, rtol=0.2, )
paddle.linalg.matrix_transpose(Tensor([2, 3, 4],"float32"), )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 31],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4, 4],"float64"),Tensor([4, 31],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 8],"float64"),Tensor([8, 4],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 8],"float32"),Tensor([8, 4],"float32"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float32"),Tensor([4, 5],"float32"),Tensor([5],"float32"),], )
paddle.linalg.multi_dot(list[Tensor([2, 3],"float64"),Tensor([3, 2],"float64"),Tensor([2, 3],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3, 4],"float64"),Tensor([4, 8],"float64"),Tensor([8, 2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3, 4],"float64"),Tensor([4, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 4],"float64"),Tensor([4, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3, 6],"float64"),Tensor([6],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 5],"float64"),Tensor([5, 2],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 2],"float64"),Tensor([2],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 4],"float64"),Tensor([4, 3],"float64"),Tensor([3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([4],"float64"),Tensor([4, 3],"float64"),Tensor([3, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([6],"float64"),Tensor([6, 4],"float64"),Tensor([4],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([2, 10],"float64"),Tensor([10, 4],"float64"),Tensor([4, 3],"float64"),], )
paddle.linalg.multi_dot(list[Tensor([8, 6],"float64"),Tensor([6, 3],"float64"),Tensor([3, 4],"float64"),Tensor([4, 5],"float64"),], )
paddle.linalg.norm(Tensor([3, 20, 3],"float32"), 0.0, 2, True, )
paddle.linalg.norm(Tensor([3, 20, 3],"float32"), 2.0, -1, False, )
paddle.linalg.norm(Tensor([5, 5, 5],"float32"), p="fro", axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(Tensor([3, 20, 3],"float32"), math.inf, 2, True, )
paddle.linalg.norm(Tensor([2, 3, 4, 5],"float64"), 2.0, 1, False, )
paddle.linalg.norm(Tensor([3, 20, 3],"float32"), -math.inf, 2, True, )
paddle.linalg.norm(Tensor([100],"float32"), 2.0, )
paddle.linalg.norm(Tensor([3, 20, 3],"float32"), 2.0, 2, True, )
paddle.linalg.norm(Tensor([2, 3, 4, 5],"float64"), p="fro", axis=list[1,2,], keepdim=False, )
paddle.linalg.norm(Tensor([4, 6],"float32"), p=2, axis=list[0,1,], )
paddle.linalg.norm(x=Tensor([3, 3, 3],"float64"), axis=1, p=-math.inf, )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float32"), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=-math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(Tensor([24],"float32"), p=1, axis=0, )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.norm(Tensor([4, 6],"float32"), p=-math.inf, axis=list[0,1,], )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 4],"float64"), p=0, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 4],"float64"), p=1, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(Tensor([24],"float32"), p=1, )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 3, 3],"float64"), axis=list[1,2,], p=1, )
paddle.linalg.norm(x=Tensor([3, 4],"float64"), p=0, axis=1, keepdim=True, )
paddle.linalg.norm(Tensor([1],"float32"), 2.0, )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=-math.inf, axis=0, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 3, 3],"float64"), axis=None, )
paddle.linalg.norm(Tensor([1, 2],"float32"), 2.0, )
paddle.linalg.norm(x=Tensor([3, 3, 3],"float64"), axis=list[0,2,], p=2, )
paddle.linalg.norm(x=Tensor([9],"float64"), axis=None, p="fro", )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=-math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(Tensor([24],"float32"), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=2, axis=-1, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 3, 3],"float64"), axis=list[0,2,], p=1, )
paddle.linalg.norm(Tensor([4, 6],"float32"), p=1, axis=list[0,1,], )
paddle.linalg.norm(x=Tensor([3, 4],"float64"), p=1, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 3, 3],"float64"), axis=list[1,2,], p=math.inf, )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 3, 3],"float64"), axis=list[1,], p=math.inf, )
paddle.linalg.norm(Tensor([4, 6],"float32"), )
paddle.linalg.norm(x=Tensor([3, 4],"float64"), p=0, axis=None, keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 3, 3],"float64"), axis=1, p=math.inf, )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 3],"float64"), axis=None, p="fro", )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 4],"float64"), p=0, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.norm(x=Tensor([3, 4],"float64"), p=2, axis=1, keepdim=False, )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float64"), p=2, axis=-1, keepdim=True, )
paddle.linalg.norm(x=Tensor([3, 3, 3],"float64"), axis=1, p=0, )
paddle.linalg.norm(x=Tensor([3, 4],"float64"), p=2, axis=1, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.norm(x=Tensor([2, 3, 4],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.norm(Tensor([24],"float32"), p="fro", axis=0, )
paddle.linalg.pinv(x=Tensor([2, 4, 40],"float64"), rcond=0.5, )
paddle.linalg.pinv(x=Tensor([2, 4, 40],"float64"), )
paddle.linalg.pinv(Tensor([3, 6, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(x=Tensor([4, 2, 2],"float64"), rcond=5, hermitian=True, )
paddle.linalg.pinv(Tensor([3, 4, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([4, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(x=Tensor([2, 40],"float64"), )
paddle.linalg.pinv(x=Tensor([3, 4],"float64"), )
paddle.linalg.pinv(Tensor([3, 5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([5, 4],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 5, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(x=Tensor([3, 4],"float32"), )
paddle.linalg.pinv(Tensor([5, 5],"float64"), rcond=1e-15, hermitian=False, )
paddle.linalg.pinv(Tensor([3, 5, 5],"float64"), rcond=1e-10, hermitian=False, )
paddle.linalg.qr(Tensor([100, 6],"float64"), )
paddle.linalg.qr(Tensor([4, 5, 5, 3],"float64"), mode="reduced", )
paddle.linalg.qr(Tensor([40, 21],"float64"), )
paddle.linalg.qr(Tensor([3, 5, 5, 5],"complex64"), mode="complete", )
paddle.linalg.qr(Tensor([4, 5, 5, 3],"complex64"), mode="r", )
paddle.linalg.qr(Tensor([2, 3, 17, 4],"float64"), )
paddle.linalg.qr(Tensor([40, 8],"float64"), )
paddle.linalg.qr(Tensor([1, 40, 12],"float64"), )
paddle.linalg.qr(Tensor([2, 5, 3, 5],"complex128"), mode="complete", )
paddle.linalg.qr(Tensor([2, 5, 3, 5],"float32"), mode="reduced", )
paddle.linalg.qr(Tensor([2, 5, 3, 5],"complex64"), mode="reduced", )
paddle.linalg.qr(Tensor([3, 5, 5, 5],"float64"), mode="complete", )
paddle.linalg.qr(Tensor([2, 5, 3, 5],"complex128"), mode="reduced", )
paddle.linalg.qr(Tensor([3, 17, 4],"float64"), )
paddle.linalg.qr(Tensor([3, 5, 5, 5],"float32"), mode="reduced", )
paddle.linalg.qr(Tensor([3, 5, 5, 5],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([3, 5, 5, 5],"complex128"), mode="r", )
paddle.linalg.qr(Tensor([1, 100, 4],"float64"), )
paddle.linalg.qr(Tensor([4, 5, 5, 3],"float64"), mode="r", )
paddle.linalg.qr(Tensor([2, 5, 3, 5],"complex64"), mode="r", )
paddle.linalg.qr(Tensor([100, 8],"float64"), )
paddle.linalg.qr(Tensor([3, 5, 5, 5],"complex128"), mode="complete", )
paddle.linalg.qr(Tensor([1, 100, 6],"float64"), )
paddle.linalg.qr(Tensor([2, 3, 17, 2],"float64"), )
paddle.linalg.qr(Tensor([2, 5, 3, 5],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([2, 5, 3, 5],"float64"), mode="reduced", )
paddle.linalg.qr(Tensor([2, 5, 3, 5],"float64"), mode="r", )
paddle.linalg.qr(Tensor([4, 5, 5, 3],"complex128"), mode="complete", )
paddle.linalg.qr(Tensor([1, 100, 8],"float64"), )
paddle.linalg.qr(Tensor([3, 5, 5, 5],"complex64"), mode="r", )
paddle.linalg.qr(Tensor([1, 40, 8],"float64"), )
paddle.linalg.qr(Tensor([2, 5, 3, 5],"complex64"), mode="complete", )
paddle.linalg.qr(Tensor([4, 5, 5, 3],"complex128"), mode="r", )
paddle.linalg.qr(Tensor([3, 5, 5, 5],"float64"), mode="r", )
paddle.linalg.qr(Tensor([100, 2],"float64"), )
paddle.linalg.qr(Tensor([40, 12],"float64"), )
paddle.linalg.qr(Tensor([40, 6],"float64"), )
paddle.linalg.qr(Tensor([1, 40, 6],"float64"), )
paddle.linalg.qr(Tensor([2, 5, 3, 5],"float32"), mode="r", )
paddle.linalg.qr(Tensor([4, 5, 5, 3],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([100, 4],"float64"), )
paddle.linalg.qr(Tensor([4, 5, 5, 3],"complex64"), mode="reduced", )
paddle.linalg.qr(Tensor([4, 5, 5, 3],"float32"), mode="r", )
paddle.linalg.qr(Tensor([3, 40, 8],"float64"), )
paddle.linalg.qr(Tensor([3, 40, 6],"float64"), )
paddle.linalg.qr(Tensor([2, 5, 3, 5],"complex128"), mode="r", )
paddle.linalg.qr(Tensor([3, 5, 5, 5],"float32"), mode="r", )
paddle.linalg.qr(Tensor([1, 100, 2],"float64"), )
paddle.linalg.qr(Tensor([4, 5, 5, 3],"complex128"), mode="reduced", )
paddle.linalg.qr(Tensor([4, 5, 5, 3],"float64"), mode="complete", )
paddle.linalg.qr(Tensor([3, 5, 5, 5],"complex64"), mode="reduced", )
paddle.linalg.qr(Tensor([4, 5, 5, 3],"complex64"), mode="complete", )
paddle.linalg.qr(Tensor([3, 5, 5, 5],"float64"), mode="reduced", )
paddle.linalg.qr(Tensor([3, 17, 2],"float64"), )
paddle.linalg.qr(Tensor([4, 5, 5, 3],"float32"), mode="reduced", )
paddle.linalg.qr(Tensor([3, 5, 5, 5],"complex128"), mode="reduced", )
paddle.linalg.qr(Tensor([3, 100, 2],"float64"), )
paddle.linalg.qr(Tensor([17, 16],"float64"), )
paddle.linalg.qr(Tensor([2, 5, 3, 5],"float64"), mode="complete", )
paddle.linalg.qr(Tensor([5, 5],"complex64"), mode="r", )
paddle.linalg.qr(Tensor([3, 4],"float64"), )
paddle.linalg.qr(Tensor([2, 3, 5],"complex64"), mode="reduced", )
paddle.linalg.qr(Tensor([2, 3, 5],"float64"), mode="r", )
paddle.linalg.qr(Tensor([0, 5, 3, 5],"complex128"), mode="r", )
paddle.linalg.qr(Tensor([3, 5, 5],"float32"), mode="reduced", )
paddle.linalg.qr(Tensor([0, 3, 5],"complex128"), mode="reduced", )
paddle.linalg.qr(Tensor([0, 3],"float32"), mode="reduced", )
paddle.linalg.qr(Tensor([3, 5],"float32"), mode="reduced", )
paddle.linalg.qr(Tensor([4, 0, 5],"complex64"), mode="r", )
paddle.linalg.qr(Tensor([4, 5],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([4, 0, 5],"float32"), mode="r", )
paddle.linalg.qr(Tensor([4, 0, 5],"complex128"), mode="reduced", )
paddle.linalg.qr(Tensor([3, 5, 5],"float64"), mode="reduced", )
paddle.linalg.qr(Tensor([3, 5, 5],"float64"), mode="r", )
paddle.linalg.qr(Tensor([3, 5],"float64"), mode="reduced", )
paddle.linalg.qr(Tensor([4, 0, 5],"complex64"), mode="reduced", )
paddle.linalg.qr(Tensor([2, 3, 5],"float64"), mode="reduced", )
paddle.linalg.qr(Tensor([4, 5, 3],"float64"), mode="r", )
paddle.linalg.qr(Tensor([4, 2],"float64"), )
paddle.linalg.qr(Tensor([3, 5],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([1, 4, 2],"float64"), )
paddle.linalg.qr(Tensor([2, 3, 4, 2],"float64"), )
paddle.linalg.qr(Tensor([0, 5, 3, 5],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([2, 3, 5],"float32"), mode="r", )
paddle.linalg.qr(Tensor([5, 3],"complex64"), mode="r", )
paddle.linalg.qr(Tensor([4, 0, 5],"complex64"), mode="complete", )
paddle.linalg.qr(Tensor([5, 4, 0],"float32"), mode="r", )
paddle.linalg.qr(Tensor([5, 5],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([0, 3],"float64"), mode="complete", )
paddle.linalg.qr(Tensor([4, 0, 5],"float64"), mode="reduced", )
paddle.linalg.qr(Tensor([2, 3, 5],"complex128"), mode="complete", )
paddle.linalg.qr(Tensor([0, 3, 5],"float64"), mode="reduced", )
paddle.linalg.qr(Tensor([3, 5, 5],"complex64"), mode="reduced", )
paddle.linalg.qr(Tensor([3, 5, 5],"complex128"), mode="complete", )
paddle.linalg.qr(Tensor([5, 5],"float64"), )
paddle.linalg.qr(Tensor([0, 3, 5],"float32"), mode="r", )
paddle.linalg.qr(Tensor([5, 3],"float64"), mode="reduced", )
paddle.linalg.qr(Tensor([1, 17, 4],"float64"), )
paddle.linalg.qr(Tensor([3, 4, 4],"float64"), )
paddle.linalg.qr(Tensor([4, 5, 3],"float64"), mode="reduced", )
paddle.linalg.qr(Tensor([3, 5],"complex128"), mode="reduced", )
paddle.linalg.qr(Tensor([17, 4],"float64"), )
paddle.linalg.qr(Tensor([4, 0, 5],"float64"), mode="r", )
paddle.linalg.qr(Tensor([5, 3],"float64"), mode="r", )
paddle.linalg.qr(Tensor([17, 2],"float64"), )
paddle.linalg.qr(Tensor([0, 5, 3, 5],"float32"), mode="reduced", )
paddle.linalg.qr(Tensor([5, 4, 0],"complex128"), mode="r", )
paddle.linalg.qr(Tensor([3, 5],"float32"), mode="r", )
paddle.linalg.qr(Tensor([3, 5],"complex64"), mode="complete", )
paddle.linalg.qr(Tensor([3, 5, 5],"complex128"), mode="r", )
paddle.linalg.qr(Tensor([5, 3],"float64"), mode="complete", )
paddle.linalg.qr(Tensor([4, 5],"float32"), )
paddle.linalg.qr(Tensor([2, 3, 5],"complex128"), mode="reduced", )
paddle.linalg.qr(Tensor([0, 3],"complex128"), mode="r", )
paddle.linalg.qr(Tensor([3, 5],"float64"), mode="complete", )
paddle.linalg.qr(Tensor([3, 5],"complex64"), mode="reduced", )
paddle.linalg.qr(Tensor([5, 3],"complex128"), mode="r", )
paddle.linalg.qr(Tensor([5, 3],"complex64"), mode="reduced", )
paddle.linalg.qr(Tensor([2, 3, 5],"float32"), mode="reduced", )
paddle.linalg.qr(Tensor([5, 5],"complex64"), mode="reduced", )
paddle.linalg.qr(Tensor([3, 5, 5],"complex128"), mode="reduced", )
paddle.linalg.qr(Tensor([0, 3],"float64"), mode="r", )
paddle.linalg.qr(Tensor([0, 3],"float32"), mode="r", )
paddle.linalg.qr(Tensor([5, 4, 0],"complex64"), mode="reduced", )
paddle.linalg.qr(Tensor([5, 5],"float32"), mode="r", )
paddle.linalg.qr(Tensor([3, 5, 5],"float64"), mode="complete", )
paddle.linalg.qr(Tensor([0, 3, 5],"complex128"), mode="complete", )
paddle.linalg.qr(Tensor([4, 0, 5],"complex128"), mode="r", )
paddle.linalg.qr(Tensor([0, 3],"float64"), mode="reduced", )
paddle.linalg.qr(Tensor([3, 5, 6],"float64"), )
paddle.linalg.qr(Tensor([0, 5, 3, 5],"float32"), mode="r", )
paddle.linalg.qr(Tensor([3, 5, 5],"complex64"), mode="r", )
paddle.linalg.qr(Tensor([5, 3],"float32"), mode="r", )
paddle.linalg.qr(Tensor([0, 5, 3, 5],"complex128"), mode="complete", )
paddle.linalg.qr(Tensor([4, 5, 3],"complex64"), mode="r", )
paddle.linalg.qr(Tensor([2, 3, 5],"complex128"), mode="r", )
paddle.linalg.qr(Tensor([4, 5],"float32"), mode="r", )
paddle.linalg.qr(Tensor([5, 4, 0],"float32"), mode="reduced", )
paddle.linalg.qr(Tensor([4, 5, 3],"complex128"), mode="complete", )
paddle.linalg.qr(Tensor([0, 3],"complex64"), mode="complete", )
paddle.linalg.qr(Tensor([1, 4, 4],"float64"), )
paddle.linalg.qr(Tensor([5, 3],"complex128"), mode="complete", )
paddle.linalg.qr(Tensor([0, 3],"complex128"), mode="complete", )
paddle.linalg.qr(Tensor([4, 5, 3],"complex64"), mode="reduced", )
paddle.linalg.qr(Tensor([0, 5, 3, 5],"float64"), mode="reduced", )
paddle.linalg.qr(Tensor([4, 5, 3],"float32"), mode="reduced", )
paddle.linalg.qr(Tensor([4, 5],"float64"), mode="r", )
paddle.linalg.qr(Tensor([0, 3, 5],"float32"), mode="reduced", )
paddle.linalg.qr(Tensor([4, 0, 5],"complex128"), mode="complete", )
paddle.linalg.qr(Tensor([5, 4, 0],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([0, 3, 5],"complex64"), mode="complete", )
paddle.linalg.qr(Tensor([3, 4, 2],"float64"), )
paddle.linalg.qr(Tensor([4, 0, 5],"float64"), mode="complete", )
paddle.linalg.qr(Tensor([4, 0, 5],"float32"), mode="reduced", )
paddle.linalg.qr(Tensor([0, 3],"complex64"), mode="reduced", )
paddle.linalg.qr(Tensor([5, 4, 0],"float64"), mode="reduced", )
paddle.linalg.qr(Tensor([3, 4],"float32"), )
paddle.linalg.qr(Tensor([2, 3, 5],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([4, 5],"float64"), mode="complete", )
paddle.linalg.qr(Tensor([5, 3],"complex128"), mode="reduced", )
paddle.linalg.qr(Tensor([0, 3, 5],"complex128"), mode="r", )
paddle.linalg.qr(Tensor([3, 5, 6],"float32"), )
paddle.linalg.qr(Tensor([5, 5],"complex128"), mode="r", )
paddle.linalg.qr(Tensor([1, 17, 2],"float64"), )
paddle.linalg.qr(Tensor([4, 5, 3],"complex128"), mode="reduced", )
paddle.linalg.qr(Tensor([0, 5, 3, 5],"complex64"), mode="complete", )
paddle.linalg.qr(Tensor([0, 3, 5],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([0, 3],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([5, 5],"float32"), mode="reduced", )
paddle.linalg.qr(Tensor([0, 3, 5],"complex64"), mode="reduced", )
paddle.linalg.qr(Tensor([5, 4, 0],"float64"), mode="r", )
paddle.linalg.qr(Tensor([0, 3, 5],"complex64"), mode="r", )
paddle.linalg.qr(Tensor([3, 5, 5],"float32"), mode="r", )
paddle.linalg.qr(Tensor([2, 3, 4, 4],"float64"), )
paddle.linalg.qr(Tensor([4, 5, 3],"float64"), mode="complete", )
paddle.linalg.qr(Tensor([0, 3, 5],"float64"), mode="complete", )
paddle.linalg.qr(Tensor([5, 4, 0],"complex128"), mode="complete", )
paddle.linalg.qr(Tensor([0, 5, 3, 5],"complex128"), mode="reduced", )
paddle.linalg.qr(Tensor([5, 5],"complex128"), mode="complete", )
paddle.linalg.qr(Tensor([4, 5, 3],"complex128"), mode="r", )
paddle.linalg.qr(Tensor([0, 5, 3, 5],"float64"), mode="r", )
paddle.linalg.qr(Tensor([2, 3, 5],"float64"), mode="complete", )
paddle.linalg.qr(Tensor([3, 5],"complex64"), mode="r", )
paddle.linalg.qr(Tensor([0, 5, 3, 5],"float64"), mode="complete", )
paddle.linalg.qr(Tensor([0, 3, 5],"float64"), mode="r", )
paddle.linalg.qr(Tensor([3, 5],"complex128"), mode="r", )
paddle.linalg.qr(Tensor([5, 5],"complex64"), mode="complete", )
paddle.linalg.qr(Tensor([2, 3, 5],"complex64"), mode="r", )
paddle.linalg.qr(Tensor([0, 3],"complex64"), mode="r", )
paddle.linalg.qr(Tensor([0, 5, 3, 5],"complex64"), mode="reduced", )
paddle.linalg.qr(Tensor([5, 5],"float64"), mode="reduced", )
paddle.linalg.qr(Tensor([5, 3],"float32"), mode="reduced", )
paddle.linalg.qr(Tensor([3, 5, 5],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([3, 5],"float64"), mode="r", )
paddle.linalg.qr(Tensor([5, 4, 0],"float64"), mode="complete", )
paddle.linalg.qr(Tensor([5, 4, 0],"complex64"), mode="complete", )
paddle.linalg.qr(Tensor([5, 5],"complex128"), mode="reduced", )
paddle.linalg.qr(Tensor([4, 5, 3],"complex64"), mode="complete", )
paddle.linalg.qr(Tensor([3, 5, 5],"complex64"), mode="complete", )
paddle.linalg.qr(Tensor([3, 5],"complex128"), mode="complete", )
paddle.linalg.qr(Tensor([2, 3, 5],"complex64"), mode="complete", )
paddle.linalg.qr(Tensor([5, 5],"float64"), mode="r", )
paddle.linalg.qr(Tensor([5, 4, 0],"complex64"), mode="r", )
paddle.linalg.qr(Tensor([4, 5],"float64"), )
paddle.linalg.qr(Tensor([4, 0, 5],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([0, 3],"complex128"), mode="reduced", )
paddle.linalg.qr(Tensor([0, 5, 3, 5],"complex64"), mode="r", )
paddle.linalg.qr(Tensor([5, 4, 0],"complex128"), mode="reduced", )
paddle.linalg.qr(Tensor([5, 3],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([4, 5, 3],"float32"), mode="complete", )
paddle.linalg.qr(Tensor([4, 5, 3],"float32"), mode="r", )
paddle.linalg.qr(Tensor([5, 3],"complex64"), mode="complete", )
paddle.linalg.qr(Tensor([5, 5],"float64"), mode="complete", )
paddle.linalg.qr(Tensor([4, 4],"float64"), )
paddle.linalg.slogdet(x=Tensor([14, 14],"float64"), )
paddle.linalg.slogdet(Tensor([3, 3, 5, 5],"complex64"), )
paddle.linalg.slogdet(Tensor([3, 3, 5, 5],"float32"), )
paddle.linalg.slogdet(x=Tensor([14, 14],"float32"), )
paddle.linalg.slogdet(Tensor([6, 5, 5],"complex128"), )
paddle.linalg.slogdet(Tensor([3, 3],"float32"), )
paddle.linalg.slogdet(x=Tensor([3, 4, 4],"float64"), )
paddle.linalg.slogdet(x=Tensor([4, 4],"float64"), )
paddle.linalg.slogdet(Tensor([3, 3, 3],"float32"), )
paddle.linalg.solve(x=Tensor([14, 14],"float64"), y=Tensor([14, 2],"float64"), )
paddle.linalg.solve(Tensor([10, 10],"float64"), Tensor([4, 10],"float64"), left=False, )
paddle.linalg.solve(Tensor([10, 10],"float32"), Tensor([6, 10],"float32"), left=False, )
paddle.linalg.solve(Tensor([10, 10],"float32"), Tensor([10, 4],"float32"), )
paddle.linalg.solve(Tensor([10, 10],"float64"), Tensor([10, 4],"float64"), )
paddle.linalg.solve(x=Tensor([4, 14, 14],"float64"), y=Tensor([4, 14, 2],"float64"), )
paddle.linalg.solve(x=Tensor([14, 14],"float64"), y=Tensor([14],"float64"), )
paddle.linalg.solve(Tensor([3, 3],"float64"), Tensor([1, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), left=False, )
paddle.linalg.solve(Tensor([2, 3, 3],"float64"), Tensor([1, 3, 3],"float64"), )
paddle.linalg.solve(Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), )
paddle.linalg.solve(x=Tensor([4, 4],"float64"), y=Tensor([4],"float64"), )
paddle.linalg.solve(x=Tensor([4, 4],"float32"), y=Tensor([4],"float32"), )
paddle.linalg.solve(Tensor([3, 3],"float64"), Tensor([3],"float64"), )
paddle.linalg.svdvals(Tensor([10, 12],"float32"), )
paddle.linalg.svdvals(Tensor([10, 3, 6],"float64"), )
paddle.linalg.svdvals(Tensor([100, 1],"float64"), )
paddle.linalg.triangular_solve(Tensor([3, 3],"float64"), Tensor([3, 2],"float64"), upper=False, )
paddle.linalg.triangular_solve(x=Tensor([3, 3],"float64"), y=Tensor([3, 1],"float64"), )
paddle.linalg.triangular_solve(x=Tensor([3, 3],"float32"), y=Tensor([3, 1],"float32"), )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([4, 1],"float64"), )
paddle.linalg.triangular_solve(Tensor([1, 2, 2],"float32"), Tensor([1, 2, 1],"float32"), upper=False, )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([4, 4],"float64"), upper=False, )
paddle.linalg.triangular_solve(x=Tensor([4, 4],"float64"), y=Tensor([4, 4],"float64"), )
paddle.linalg.triangular_solve(Tensor([2, 2],"float32"), Tensor([2, 2],"float32"), upper=False, )
paddle.linalg.triangular_solve(Tensor([2, 2],"float64"), Tensor([2, 2],"float64"), upper=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4, 5],"float64"), p=1, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 14],"complex128"), p=math.inf, axis=2, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 14],"complex128"), p=0, axis=list[1,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 14],"complex128"), p=0, axis=list[1,3,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 14],"complex128"), p=-math.inf, axis=list[0,1,2,3,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([1, 14, 5, 14],"complex128"), p=math.inf, axis=2, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4, 5],"float64"), p=1, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 4],"float32"), p=2, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=2, axis=-1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([],"complex64"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([],"complex64"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 4],"float64"), p=1, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 4],"float64"), p=0, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([],"float64"), p=2, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 4],"float64"), p=2, axis=1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float32"), p=math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=2, axis=-1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=-math.inf, axis=list[0,1,2,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 4],"float64"), p=0, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 4],"float64"), p=0, axis=1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=-math.inf, axis=None, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=math.inf, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=-math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 4],"float64"), p=2, axis=1, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 4],"float32"), p=2, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([],"float64"), p=2, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=-math.inf, axis=list[0,1,2,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float32"), p=math.inf, axis=0, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=2, axis=list[0,1,], keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float32"), p=math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=2, axis=list[0,1,], keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=-math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float64"), p=-math.inf, axis=None, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([2, 3, 4],"float32"), p=math.inf, axis=0, keepdim=False, )
paddle.linalg.vector_norm(x=Tensor([3, 4],"float64"), p=1, axis=1, keepdim=True, )
paddle.linalg.vector_norm(x=Tensor([3, 4],"float64"), p=0, axis=None, keepdim=True, )
paddle.log10(Tensor([10, 20, 1],"float32"), )
paddle.log10(x=Tensor([1, 2],"float32"), )
paddle.log10(x=Tensor([2, 3, 2, 2],"float64"), )
paddle.log10(x=Tensor([2, 2],"float64"), )
paddle.log10(x=Tensor([1],"float64"), )
paddle.log10(Tensor([],"float32"), )
paddle.log10(x=Tensor([1, 2],"float64"), )
paddle.log1p(Tensor([10, 12],"float64"), )
paddle.log1p(Tensor([10, 20, 1],"float32"), )
paddle.log1p(Tensor([10, 20],"float64"), )
paddle.log1p(Tensor([2, 2],"float64"), )
paddle.log1p(Tensor([3],"float32"), )
paddle.log1p(x=Tensor([1, 2],"float64"), )
paddle.log1p(Tensor([2, 2],"float32"), )
paddle.log1p(Tensor([1, 2, 3, 4],"float64"), )
paddle.log1p(Tensor([2],"float32"), )
paddle.log1p(x=Tensor([1],"float64"), )
paddle.log1p(Tensor([1, 2, 3, 4],"float32"), )
paddle.log1p(Tensor([2, 3, 4],"float32"), )
paddle.log1p(Tensor([4, 3, 2],"float64"), )
paddle.log1p(Tensor([4],"float64"), )
paddle.log1p(Tensor([],"float64"), )
paddle.log1p(x=Tensor([2, 2],"float64"), )
paddle.log1p(Tensor([2, 4],"float64"), )
paddle.log1p(Tensor([3],"float64"), )
paddle.log1p(Tensor([2, 1, 2],"float32"), )
paddle.log1p(Tensor([4, 3, 2],"float32"), )
paddle.log1p(Tensor([],"float32"), )
paddle.log1p(Tensor([2, 3],"float32"), )
paddle.log1p(Tensor([2],"float64"), )
paddle.log1p(x=Tensor([2, 3, 2, 2],"float64"), )
paddle.log1p(x=Tensor([1, 2],"float32"), )
paddle.log2(Tensor([10, 20, 1],"float32"), )
paddle.log2(Tensor([10, 12],"float32"), )
paddle.log2(Tensor([10, 12],"float64"), )
paddle.log2(x=Tensor([2, 2],"float64"), )
paddle.log2(Tensor([4, 5, 2],"float32"), )
paddle.log2(Tensor([],"float32"), )
paddle.log2(Tensor([4, 5, 2],"float64"), )
paddle.log2(x=Tensor([1],"float64"), )
paddle.log2(x=Tensor([1, 2],"float32"), )
paddle.log2(x=Tensor([1, 2],"float64"), )
paddle.log2(x=Tensor([2, 3, 2, 2],"float64"), )
paddle.logaddexp(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.logaddexp(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.logaddexp(Tensor([],"float32"), Tensor([],"float32"), )
paddle.logaddexp(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.logaddexp(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.logaddexp(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.logaddexp(Tensor([1, 2, 3, 4],"float32"), Tensor([1, 2, 3, 1],"float32"), )
paddle.logaddexp(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.logaddexp(Tensor([1, 2, 3, 4],"float64"), Tensor([1, 2, 3, 4],"float64"), )
paddle.logaddexp(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.logaddexp(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.logcumsumexp(Tensor([10, 12],"float32"), dtype="float32", axis=1, )
paddle.logcumsumexp(Tensor([10, 12],"float32"), dtype="float32", axis=None, )
paddle.logcumsumexp(Tensor([3, 4],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([],"float32"), axis=-1, )
paddle.logcumsumexp(Tensor([3, 4],"float32"), )
paddle.logcumsumexp(Tensor([],"float32"), )
paddle.logcumsumexp(Tensor([3, 4],"float32"), dtype="float32", )
paddle.logcumsumexp(Tensor([],"float32"), axis=0, )
paddle.logcumsumexp(Tensor([3, 4],"float32"), axis=0, )
paddle.logcumsumexp(Tensor([24],"float32"), )
paddle.logcumsumexp(Tensor([3, 4],"float32"), axis=-2, )
paddle.logical_or(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_or(Tensor([13, 7, 1],"bool"), Tensor([13, 1, 7],"bool"), )
paddle.logical_or(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int16"), )
paddle.logical_or(Tensor([],"bool"), Tensor([],"bool"), )
paddle.logical_or(Tensor([2, 1],"bool"), Tensor([2, 1],"bool"), )
paddle.logical_or(x=Tensor([1, 2],"bool"), y=Tensor([2, 2],"bool"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"bool"), )
paddle.logical_or(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int64"), )
paddle.logical_or(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int16"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float64"), )
paddle.logical_or(Tensor([1],"bool"), Tensor([1],"bool"), )
paddle.logical_or(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_or(Tensor([1, 1],"bool"), Tensor([1, 1],"bool"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 4],"bool"), Tensor([4, 4],"bool"), )
paddle.logical_or(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int64"), )
paddle.logical_or(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int32"), )
paddle.logical_or(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_or(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 8],"bool"), Tensor([4, 8],"bool"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int8"), )
paddle.logical_or(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(x=Tensor([1],"bool"), y=Tensor([4],"bool"), )
paddle.logical_or(Tensor([8, 4],"bool"), Tensor([8, 4],"bool"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([],"float32"), Tensor([],"float32"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_or(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"bool"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int32"), )
paddle.logical_or(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_or(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int8"), )
paddle.logical_or(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.logical_or(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_or(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.logical_xor(Tensor([],"float32"), Tensor([],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int16"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int16"), )
paddle.logical_xor(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"bool"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int64"), )
paddle.logical_xor(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(x=Tensor([1],"bool"), y=Tensor([4],"bool"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.logical_xor(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float16"), )
paddle.logical_xor(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"bool"), )
paddle.logical_xor(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.logical_xor(x=Tensor([1, 2, 1, 3],"bool"), y=Tensor([1, 2, 3],"bool"), )
paddle.logical_xor(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(x=Tensor([1, 2],"bool"), y=Tensor([2, 2],"bool"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int32"), )
paddle.logical_xor(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.logical_xor(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"complex128"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int8"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int32"), )
paddle.logical_xor(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"complex64"), )
paddle.logical_xor(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int8"), )
paddle.logical_xor(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex64"), )
paddle.logit(Tensor([120],"float32"), 1e-08, )
paddle.logit(x=Tensor([4, 3, 2, 5],"float64"), eps=0.2, )
paddle.logit(Tensor([10, 20, 1],"float32"), 0.001, )
paddle.logspace(0, 10, 5, 2, dtype="float32", name="logspace_res", )
paddle.logspace(0, 10, 5, 2, dtype="float32", )
paddle.logspace(Tensor([],"float32"), Tensor([],"float32"), Tensor([],"int32"), Tensor([],"float32"), )
paddle.logspace(Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"int32"), Tensor([1],"float32"), dtype="float32", )
paddle.logspace(0, 10, 200, 2, dtype="int32", )
paddle.logspace(start=1, stop=5, num=10, )
paddle.logspace(0, 10, 5, 2, dtype="int32", )
paddle.logspace(0, 10, 5, 2, dtype=type(numpy.float32), )
paddle.logsumexp(Tensor([10, 60],"float32"), axis=1, )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float32"), tuple(0,1,-1,), False, )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float64"), list[0,1,2,3,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float64"), list[0,-1,], False, )
paddle.logsumexp(Tensor([4, 5, 6],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float64"), list[-1,], False, )
paddle.logsumexp(Tensor([6, 60],"float32"), axis=1, )
paddle.logsumexp(Tensor([4, 60],"float32"), axis=1, )
paddle.logsumexp(Tensor([2, 60],"float32"), axis=1, )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float32"), )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float32"), None, False, )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float32"), None, True, )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float32"), 2, False, )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float32"), list[-1,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float64"), list[-1,], True, )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float32"), list[2,-3,], False, )
paddle.logsumexp(Tensor([2, 3, 4, 5],"float64"), None, False, )
paddle.logsumexp(Tensor([],"float32"), axis=list[], )
paddle.logsumexp(x=Tensor([2, 3, 2],"float32"), axis=2, )
paddle.logsumexp(x=Tensor([2, 3, 2],"float64"), axis=list[0,1,], )
paddle.logsumexp(Tensor([5],"float32"), axis=0, )
paddle.logsumexp(Tensor([],"float64"), list[], False, )
paddle.logsumexp(Tensor([],"float32"), axis=None, )
paddle.logsumexp(x=Tensor([2, 3, 2],"float64"), axis=list[0,1,], keepdim=True, )
paddle.logsumexp(Tensor([],"float32"), axis=-1, )
paddle.logsumexp(x=Tensor([2, 3, 2],"float64"), axis=0, keepdim=True, )
paddle.logsumexp(Tensor([3, 5],"float32"), keepdim=True, )
paddle.logsumexp(Tensor([3, 5],"float32"), axis=None, )
paddle.logsumexp(Tensor([],"float32"), axis=0, )
paddle.logsumexp(x=Tensor([2, 3, 2],"float64"), axis=2, )
paddle.masked_fill(Tensor([2, 60],"int32"), Tensor([2, 60],"bool"), 0, )
paddle.masked_fill(Tensor([30, 3],"float32"), Tensor([30, 1],"bool"), Tensor([],"float32"), )
paddle.masked_fill(Tensor([168],"float16"), Tensor([168],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([6, 60],"int32"), Tensor([6, 60],"bool"), 0, )
paddle.masked_fill(Tensor([30, 3],"float32"), Tensor([30, 3],"bool"), Tensor([],"float32"), )
paddle.masked_fill(Tensor([168],"float16"), Tensor([168],"bool"), -1.7802734375, )
paddle.masked_fill(Tensor([3, 40],"float16"), Tensor([3, 1],"bool"), Tensor([1],"float16"), )
paddle.masked_fill(Tensor([50, 3],"float32"), Tensor([50, 3],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([168],"float16"), Tensor([168],"bool"), 0.7587890625, )
paddle.masked_fill(Tensor([3, 40],"float32"), Tensor([3, 1],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([168],"float32"), Tensor([168],"bool"), Tensor([1],"float32"), )
paddle.masked_fill(Tensor([4, 60],"int32"), Tensor([4, 60],"bool"), 0, )
paddle.masked_fill(Tensor([2, 60, 2],"int32"), Tensor([2, 60, 2],"bool"), 0, )
paddle.masked_fill(Tensor([3, 3],"float32"), Tensor([1, 3],"bool"), Tensor([1],"float32"), )
paddle.masked_select(Tensor([10, 10],"float32"), Tensor([10, 10],"bool"), )
paddle.masked_select(x=Tensor([2, 3],"int32"), mask=Tensor([2, 3],"bool"), )
paddle.masked_select(Tensor([3, 4],"float32"), Tensor([3, 1],"bool"), )
paddle.masked_select(x=Tensor([2, 3],"float32"), mask=Tensor([2, 3],"bool"), )
paddle.masked_select(Tensor([1, 2, 2],"float32"), Tensor([1, 2, 2],"bool"), )
paddle.masked_select(Tensor([1, 1],"float32"), Tensor([1, 1],"bool"), )
paddle.masked_select(Tensor([],"float32"), Tensor([],"bool"), )
paddle.masked_select(Tensor([3, 4],"float32"), Tensor([],"bool"), )
paddle.masked_select(x=Tensor([2, 3],"float64"), mask=Tensor([2, 3],"bool"), )
paddle.masked_select(x=Tensor([2, 3],"int64"), mask=Tensor([2, 3],"bool"), )
paddle.matrix_transpose(Tensor([2, 3, 4],"int16"), )
paddle.matrix_transpose(Tensor([2, 3, 4],"float64"), )
paddle.matrix_transpose(Tensor([],"float32"), )
paddle.matrix_transpose(Tensor([2, 3, 4],"float32"), )
paddle.matrix_transpose(Tensor([2, 3, 4],"float16"), )
paddle.matrix_transpose(Tensor([2, 3, 4],"int64"), )
paddle.matrix_transpose(Tensor([2, 3, 4],"int8"), )
paddle.matrix_transpose(Tensor([2, 3, 4],"int32"), )
paddle.max(Tensor([1, 120],"float32"), )
paddle.max(Tensor([1, 1, 192],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([2, 128],"int32"), axis=0, )
paddle.max(Tensor([10, 20],"float64"), axis=-1, keepdim=True, )
paddle.max(Tensor([2, 2, 2, 2, 2, 2, 2],"float32"), axis=6, )
paddle.max(Tensor([1, 32, 8],"float32"), axis=list[2,], )
paddle.max(Tensor([13, 3, 3],"float32"), 2, )
paddle.max(Tensor([100],"int64"), )
paddle.max(Tensor([192],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([84, 10],"float32"), )
paddle.max(Tensor([4, 4, 60],"int32"), axis=1, )
paddle.max(Tensor([2, 245],"float32"), axis=0, )
paddle.max(Tensor([1, 576],"float32"), )
paddle.max(Tensor([145],"float64"), )
paddle.max(Tensor([512],"float32"), axis=None, keepdim=False, name=None, )
paddle.max(Tensor([149],"float32"), )
paddle.max(Tensor([115],"float64"), )
paddle.max(Tensor([2, 2, 2, 2, 2, 2, 2],"float32"), axis=-1, )
paddle.max(Tensor([13, 4, 2],"float32"), )
paddle.max(Tensor([2, 4, 60],"int32"), axis=1, )
paddle.max(Tensor([],"float32"), axis=-1, )
paddle.max(Tensor([4, 2],"float64"), axis=0, )
paddle.max(Tensor([3],"int32"), )
paddle.max(Tensor([1, 84],"float32"), )
paddle.max(Tensor([2, 4],"float64"), None, False, )
paddle.max(Tensor([32],"float32"), axis=list[0,], keepdim=False, )
paddle.max(Tensor([2],"int32"), )
paddle.max(Tensor([2, 4],"float64"), 0, False, )
paddle.max(Tensor([2],"float64"), axis=0, )
paddle.max(x=Tensor([2, 2],"float32"), axis=list[-2,1,], keepdim=False, )
paddle.max(Tensor([3, 5],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([5],"float32"), axis=0, )
paddle.max(Tensor([79],"float64"), )
paddle.max(x=Tensor([2, 3],"float32"), axis=0, keepdim=True, )
paddle.max(Tensor([],"float32"), 0, )
paddle.max(Tensor([2, 2, 2],"int32"), tuple(0,1,), False, )
paddle.max(Tensor([1, 1],"int32"), )
paddle.max(Tensor([2, 1, 2],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([8, 2],"float64"), axis=0, )
paddle.max(Tensor([2, 2],"float32"), axis=tuple(-2,-1,), )
paddle.max(x=Tensor([2, 3],"float32"), axis=Tensor([1],"int64"), )
paddle.max(Tensor([2],"float32"), )
paddle.max(Tensor([],"float32"), axis=None, )
paddle.max(Tensor([],"float64"), )
paddle.max(Tensor([5, 5],"float64"), axis=1, )
paddle.max(Tensor([3, 5],"float32"), keepdim=True, )
paddle.max(Tensor([],"int32"), )
paddle.max(Tensor([4, 2],"int32"), axis=0, )
paddle.max(Tensor([5],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([],"float32"), axis=0, )
paddle.max(Tensor([3, 2, 5],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([2, 2],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([2, 6],"float32"), axis=0, )
paddle.max(Tensor([30],"float32"), keepdim=True, )
paddle.max(Tensor([1],"int32"), )
paddle.max(Tensor([13, 3],"float32"), 1, )
paddle.max(Tensor([5, 3],"float32"), )
paddle.max(Tensor([6],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([6, 1, 3, 3],"float32"), )
paddle.max(Tensor([3],"float32"), axis=-1, keepdim=True, )
paddle.max(Tensor([2, 4],"float64"), 1, True, )
paddle.max(Tensor([],"float32"), )
paddle.max(Tensor([8, 4],"float64"), axis=0, )
paddle.max(Tensor([3, 5],"float32"), axis=None, )
paddle.max(Tensor([2, 3],"float32"), )
paddle.max(x=Tensor([2, 3],"float32"), )
paddle.max(Tensor([3, 5],"float64"), axis=-1, keepdim=True, )
paddle.max(Tensor([],"float64"), None, False, )
paddle.max(Tensor([],"float32"), axis=list[], )
paddle.max(Tensor([60],"int64"), )
paddle.max(Tensor([1],"float64"), )
paddle.max(Tensor([3],"float64"), axis=-1, keepdim=True, )
paddle.max(Tensor([2, 3],"float32"), axis=Tensor([],"int64"), )
paddle.max(Tensor([2, 1],"int32"), )
paddle.max(x=Tensor([2, 3],"float32"), axis=1, )
paddle.max(Tensor([92],"float64"), )
paddle.max(x=Tensor([2, 3],"float32"), axis=-2, )
paddle.median(Tensor([384],"int64"), )
paddle.median(Tensor([2, 100],"float32"), axis=1, mode="min", )
paddle.median(Tensor([384],"float32"), )
paddle.median(Tensor([5, 4],"float64"), None, True, mode="min", )
paddle.median(x=Tensor([4, 4, 4],"float32"), axis=1, keepdim=True, )
paddle.median(Tensor([3, 4, 2],"float32"), None, True, )
paddle.median(Tensor([3, 4, 2],"float32"), 1, True, mode="min", )
paddle.median(Tensor([2, 4, 5],"int64"), mode="avg", )
paddle.median(Tensor([],"float32"), axis=None, )
paddle.median(Tensor([3, 4, 2],"int64"), -1, True, )
paddle.median(Tensor([3, 4, 2],"float32"), -1, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"float64"), 1, False, )
paddle.median(Tensor([3, 4, 2],"float32"), 2, True, )
paddle.median(Tensor([5, 4],"float64"), 0, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"int32"), -1, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"int32"), 2, False, )
paddle.median(Tensor([3, 4, 2],"float32"), 2, False, )
paddle.median(Tensor([3, 4, 2],"int64"), 0, True, )
paddle.median(Tensor([3, 4, 2],"float32"), -1, False, )
paddle.median(Tensor([3, 4],"float64"), 0, False, )
paddle.median(Tensor([3, 4, 2],"int32"), 1, True, )
paddle.median(Tensor([3, 4, 2],"float64"), 0, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"int64"), 2, True, mode="min", )
paddle.median(Tensor([5, 4],"float32"), 1, True, mode="min", )
paddle.median(Tensor([5, 4],"float64"), None, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"int64"), 0, True, mode="min", )
paddle.median(Tensor([3, 4],"float64"), None, True, )
paddle.median(Tensor([3, 4, 2],"float32"), 2, True, mode="min", )
paddle.median(Tensor([3, 5],"float32"), keepdim=True, )
paddle.median(Tensor([3, 4, 2],"int64"), 1, False, mode="min", )
paddle.median(Tensor([3, 4],"float32"), 1, False, )
paddle.median(Tensor([5, 4],"float64"), 1, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"int64"), -1, False, )
paddle.median(Tensor([3, 4, 2],"float32"), -1, True, )
paddle.median(Tensor([3, 4],"float64"), -1, True, )
paddle.median(Tensor([3, 4],"float64"), None, False, )
paddle.median(Tensor([3, 4, 2],"float64"), 2, True, mode="min", )
paddle.median(Tensor([2, 4, 5],"float64"), mode="min", )
paddle.median(Tensor([3, 4, 2],"float32"), None, False, )
paddle.median(Tensor([3, 4, 2],"float64"), 2, False, )
paddle.median(Tensor([2, 4, 5],"int32"), mode="avg", )
paddle.median(Tensor([3, 4, 2],"int32"), 1, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"int64"), 2, True, )
paddle.median(Tensor([5, 4],"float32"), None, True, mode="min", )
paddle.median(Tensor([5, 4],"float64"), 1, False, mode="min", )
paddle.median(Tensor([3, 4],"float64"), -1, False, )
paddle.median(Tensor([3, 4, 2],"float64"), 0, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"int32"), 2, True, )
paddle.median(Tensor([3, 4],"float32"), None, False, )
paddle.median(Tensor([3, 4],"float32"), None, True, )
paddle.median(Tensor([5, 4],"float32"), -1, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"int64"), 0, False, )
paddle.median(Tensor([3, 4, 2],"int32"), 0, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"float32"), 1, False, )
paddle.median(Tensor([3, 4, 2],"int64"), -1, True, mode="min", )
paddle.median(Tensor([3, 4],"float32"), 0, False, )
paddle.median(Tensor([3, 4, 2],"float32"), 0, True, mode="min", )
paddle.median(x=Tensor([4, 4, 4],"float32"), axis=1, keepdim=False, )
paddle.median(Tensor([3, 4, 2],"int64"), 1, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"float32"), -1, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"int64"), None, True, )
paddle.median(Tensor([3, 4, 2],"int32"), 0, False, mode="min", )
paddle.median(Tensor([2, 4, 5],"float64"), mode="avg", )
paddle.median(x=Tensor([4, 4, 4],"float32"), axis=0, keepdim=False, )
paddle.median(Tensor([3, 4, 2],"int32"), 0, True, )
paddle.median(Tensor([3, 4, 2],"int32"), None, False, )
paddle.median(Tensor([3, 4, 2],"int64"), 2, False, mode="min", )
paddle.median(Tensor([3, 4],"float64"), 0, True, )
paddle.median(Tensor([3, 4, 2],"int32"), 1, False, )
paddle.median(Tensor([3, 4, 2],"int32"), 1, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"int32"), -1, False, )
paddle.median(Tensor([3, 4, 2],"float64"), 0, True, )
paddle.median(Tensor([3, 4, 2],"float64"), 1, True, mode="min", )
paddle.median(Tensor([3, 5],"float32"), axis=None, )
paddle.median(Tensor([3, 4, 2],"float64"), -1, True, mode="min", )
paddle.median(Tensor([3, 4],"float32"), -1, True, )
paddle.median(Tensor([5, 4],"float64"), 0, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"int32"), 2, False, mode="min", )
paddle.median(Tensor([2, 4, 5],"int32"), mode="min", )
paddle.median(Tensor([5, 4],"float32"), 0, True, mode="min", )
paddle.median(Tensor([5, 4],"float32"), 1, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"int64"), 2, False, )
paddle.median(Tensor([],"float32"), axis=0, )
paddle.median(Tensor([3, 4, 2],"int64"), 1, True, )
paddle.median(Tensor([3, 4, 2],"int32"), 0, False, )
paddle.median(Tensor([3, 4, 2],"int32"), -1, True, mode="min", )
paddle.median(Tensor([2, 4, 5],"int64"), mode="min", )
paddle.median(Tensor([2, 4, 5],"float32"), mode="min", )
paddle.median(Tensor([3, 10],"float32"), axis=1, mode="min", )
paddle.median(Tensor([5, 4],"float64"), -1, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"float64"), 1, True, )
paddle.median(Tensor([3, 4],"float32"), -1, False, )
paddle.median(Tensor([3, 4],"float64"), 1, False, )
paddle.median(Tensor([],"float32"), axis=-1, )
paddle.median(Tensor([3, 4, 2],"float64"), 1, False, mode="min", )
paddle.median(Tensor([2, 4, 5],"float32"), mode="avg", )
paddle.median(Tensor([3, 4, 2],"int32"), -1, True, )
paddle.median(Tensor([3, 4, 2],"float64"), -1, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"int32"), 2, True, mode="min", )
paddle.median(Tensor([3, 4, 2],"int32"), None, True, )
paddle.median(Tensor([5, 4],"float32"), -1, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"float32"), 0, True, )
paddle.median(Tensor([3, 4, 2],"float64"), 0, False, )
paddle.median(Tensor([3, 4, 2],"float64"), -1, True, )
paddle.median(Tensor([3, 4, 2],"float32"), 0, False, )
paddle.median(Tensor([5, 4],"float32"), 0, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"int64"), None, False, )
paddle.median(Tensor([3, 4, 2],"float32"), 1, True, )
paddle.median(Tensor([3, 4],"float64"), 0, )
paddle.median(Tensor([3, 4, 2],"int64"), -1, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"float32"), 2, False, mode="min", )
paddle.median(Tensor([3, 4],"float32"), 1, True, )
paddle.median(Tensor([3, 4, 2],"float64"), 2, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"float32"), 0, False, mode="min", )
paddle.median(Tensor([3, 4],"float32"), 0, True, )
paddle.median(Tensor([5],"float32"), axis=0, )
paddle.median(Tensor([3, 4, 2],"float64"), -1, False, )
paddle.median(Tensor([5, 4],"float32"), None, False, mode="min", )
paddle.median(Tensor([3, 4, 2],"float64"), None, False, )
paddle.median(Tensor([5, 4],"float64"), -1, False, mode="min", )
paddle.median(Tensor([3, 4],"float64"), 1, True, )
paddle.median(Tensor([3, 4, 2],"int64"), 0, False, mode="min", )
paddle.median(x=Tensor([4, 4, 4],"float32"), axis=-2, keepdim=True, )
paddle.median(Tensor([3, 4, 2],"float64"), None, True, )
paddle.median(Tensor([3, 4, 2],"float64"), 2, True, )
paddle.median(Tensor([3, 4, 2],"int64"), 1, False, )
paddle.median(Tensor([64],"int64"), )
paddle.median(Tensor([3, 4, 2],"float32"), 1, False, mode="min", )
paddle.meshgrid(Tensor([304],"float32"), Tensor([224],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([74],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([56],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([115],"float32"), )
paddle.meshgrid(Tensor([92],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([208],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([192],"float32"), )
paddle.meshgrid(Tensor([82],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(list[Tensor([80],"float32"),Tensor([68],"float32"),], )
paddle.meshgrid(Tensor([128],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([63],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(list[Tensor([144],"float32"),Tensor([168],"float32"),], )
paddle.meshgrid(Tensor([68],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([83],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([112],"float32"), Tensor([164],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([92],"float32"), Tensor([164],"float32"), )
paddle.meshgrid(Tensor([336],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([46],"float32"), )
paddle.meshgrid(Tensor([53],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([240],"float32"), Tensor([288],"float32"), )
paddle.meshgrid(Tensor([108],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([108],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([75],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([73],"float32"), Tensor([73],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([96],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(Tensor([264],"float32"), Tensor([312],"float32"), )
paddle.meshgrid(list[Tensor([76],"float32"),Tensor([68],"float32"),], )
paddle.meshgrid(Tensor([92],"float32"), Tensor([156],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([61],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([336],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([240],"float32"), Tensor([312],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([48],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([65],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([124],"float32"), Tensor([92],"float32"), )
paddle.meshgrid(Tensor([100],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([156],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(list[Tensor([104],"float32"),Tensor([168],"float32"),], )
paddle.meshgrid(Tensor([256],"float32"), Tensor([216],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([74],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([73],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([164],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([232],"float32"), )
paddle.meshgrid(list[Tensor([108],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(Tensor([50],"float32"), Tensor([61],"float32"), )
paddle.meshgrid(Tensor([112],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([148],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([216],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([69],"float32"), Tensor([59],"float32"), )
paddle.meshgrid(Tensor([156],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(list[Tensor([116],"float32"),Tensor([160],"float32"),], )
paddle.meshgrid(list[Tensor([68],"float32"),Tensor([78],"float32"),], )
paddle.meshgrid(Tensor([54],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([65],"float32"), Tensor([77],"float32"), )
paddle.meshgrid(list[Tensor([164],"float32"),Tensor([100],"float32"),], )
paddle.meshgrid(Tensor([124],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(list[Tensor([72],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(Tensor([62],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([112],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([200],"float32"), )
paddle.meshgrid(Tensor([160],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([54],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([100],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([82],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([312],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(Tensor([232],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([104],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([328],"float32"), )
paddle.meshgrid(Tensor([44],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([75],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([63],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([124],"float32"), Tensor([112],"float32"), )
paddle.meshgrid(Tensor([168],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([80],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([148],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([112],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([96],"float32"), )
paddle.meshgrid(list[Tensor([152],"float32"),Tensor([108],"float32"),], )
paddle.meshgrid(Tensor([67],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([54],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(list[Tensor([100],"float32"),Tensor([148],"float32"),], )
paddle.meshgrid(list[Tensor([76],"float32"),Tensor([74],"float32"),], )
paddle.meshgrid(Tensor([70],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([224],"float32"), Tensor([240],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([264],"float32"), Tensor([320],"float32"), )
paddle.meshgrid(Tensor([92],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(Tensor([65],"float32"), Tensor([79],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(list[Tensor([76],"float32"),Tensor([82],"float32"),], )
paddle.meshgrid(Tensor([280],"float32"), Tensor([328],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([320],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([65],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([328],"float32"), )
paddle.meshgrid(Tensor([176],"float32"), Tensor([176],"float32"), )
paddle.meshgrid(Tensor([200],"float32"), Tensor([328],"float32"), )
paddle.meshgrid(Tensor([232],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([200],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([112],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([104],"float32"), )
paddle.meshgrid(Tensor([96],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([65],"float32"), Tensor([48],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([40],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(list[Tensor([152],"float32"),Tensor([168],"float32"),], )
paddle.meshgrid(Tensor([192],"int32"), Tensor([144],"int32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([44],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([216],"float32"), Tensor([224],"float32"), )
paddle.meshgrid(Tensor([52],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([57],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(list[Tensor([136],"float32"),Tensor([148],"float32"),], )
paddle.meshgrid(Tensor([66],"float32"), Tensor([52],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([48],"float32"), )
paddle.meshgrid(list[Tensor([136],"float32"),Tensor([160],"float32"),], )
paddle.meshgrid(Tensor([48],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(list[Tensor([100],"float32"),Tensor([144],"float32"),], )
paddle.meshgrid(list[Tensor([132],"float32"),Tensor([160],"float32"),], )
paddle.meshgrid(Tensor([124],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([192],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([46],"float32"), )
paddle.meshgrid(list[Tensor([152],"float32"),Tensor([140],"float32"),], )
paddle.meshgrid(Tensor([68],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([63],"float32"), Tensor([73],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(Tensor([63],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(list[Tensor([50],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(Tensor([76],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([54],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([54],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([208],"float32"), Tensor([288],"float32"), )
paddle.meshgrid(Tensor([112],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(Tensor([148],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(list[Tensor([152],"float32"),Tensor([160],"float32"),], )
paddle.meshgrid(Tensor([72],"int32"), Tensor([100],"int32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([88],"float32"), )
paddle.meshgrid(list[Tensor([56],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(list[Tensor([76],"float32"),Tensor([50],"float32"),], )
paddle.meshgrid(list[Tensor([164],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(Tensor([296],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([78],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([77],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([96],"float32"), Tensor([164],"float32"), )
paddle.meshgrid(Tensor([224],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([144],"int32"), Tensor([200],"int32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(list[Tensor([128],"float32"),Tensor([168],"float32"),], )
paddle.meshgrid(Tensor([184],"float32"), Tensor([184],"float32"), )
paddle.meshgrid(Tensor([148],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([128],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([96],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(list[Tensor([160],"float32"),Tensor([136],"float32"),], )
paddle.meshgrid(Tensor([136],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([51],"float32"), )
paddle.meshgrid(Tensor([104],"float32"), Tensor([164],"float32"), )
paddle.meshgrid(list[Tensor([74],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(list[Tensor([152],"float32"),Tensor([148],"float32"),], )
paddle.meshgrid(Tensor([48],"float32"), Tensor([65],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([100],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([224],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([148],"float32"), Tensor([156],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([320],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(list[Tensor([76],"float32"),Tensor([72],"float32"),], )
paddle.meshgrid(Tensor([216],"float32"), Tensor([288],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([48],"float32"), )
paddle.meshgrid(Tensor([192],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([192],"float32"), )
paddle.meshgrid(Tensor([296],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([192],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(list[Tensor([68],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(Tensor([72],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([320],"float32"), Tensor([288],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([164],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(list[Tensor([116],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(Tensor([328],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([116],"float32"), Tensor([116],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([79],"float32"), )
paddle.meshgrid(Tensor([44],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(list[Tensor([124],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(Tensor([60],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([82],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([148],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([65],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([200],"float32"), )
paddle.meshgrid(Tensor([42],"float32"), Tensor([63],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([328],"float32"), )
paddle.meshgrid(list[Tensor([68],"float32"),Tensor([74],"float32"),], )
paddle.meshgrid(Tensor([216],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([84],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([79],"float32"), )
paddle.meshgrid(list[Tensor([50],"float32"),Tensor([80],"float32"),], )
paddle.meshgrid(Tensor([176],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([80],"float32"), Tensor([108],"float32"), )
paddle.meshgrid(Tensor([336],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([63],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([240],"float32"), Tensor([224],"float32"), )
paddle.meshgrid(Tensor([75],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(list[Tensor([148],"float32"),Tensor([136],"float32"),], )
paddle.meshgrid(list[Tensor([50],"float32"),Tensor([74],"float32"),], )
paddle.meshgrid(Tensor([148],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(list[Tensor([100],"float32"),Tensor([140],"float32"),], )
paddle.meshgrid(Tensor([62],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([184],"float32"), Tensor([312],"float32"), )
paddle.meshgrid(list[Tensor([82],"float32"),Tensor([50],"float32"),], )
paddle.meshgrid(Tensor([73],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([156],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(list[Tensor([68],"float32"),Tensor([82],"float32"),], )
paddle.meshgrid(Tensor([44],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([124],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([168],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([73],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([92],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([74],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([216],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(list[Tensor([160],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(Tensor([108],"float32"), Tensor([156],"float32"), )
paddle.meshgrid(Tensor([52],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([80],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([50],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([192],"float32"), )
paddle.meshgrid(Tensor([72],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(list[Tensor([76],"int64"),Tensor([76],"int64"),], )
paddle.meshgrid(Tensor([136],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(list[Tensor([120],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(Tensor([56],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(Tensor([75],"float32"), Tensor([61],"float32"), )
paddle.meshgrid(Tensor([92],"float32"), Tensor([148],"float32"), )
paddle.meshgrid(list[Tensor([68],"float32"),Tensor([50],"float32"),], )
paddle.meshgrid(Tensor([108],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([55],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([56],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([240],"float32"), )
paddle.meshgrid(list[Tensor([68],"float32"),Tensor([68],"float32"),], )
paddle.meshgrid(Tensor([58],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([63],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([320],"float32"), )
paddle.meshgrid(Tensor([200],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([240],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(list[Tensor([76],"float32"),Tensor([80],"float32"),], )
paddle.meshgrid(Tensor([128],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(list[Tensor([64],"float32"),Tensor([84],"float32"),], )
paddle.meshgrid(Tensor([48],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(Tensor([192],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([264],"float32"), Tensor([208],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([164],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([108],"float32"), )
paddle.meshgrid(Tensor([192],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([67],"float32"), Tensor([61],"float32"), )
paddle.meshgrid(Tensor([312],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([164],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([63],"float32"), Tensor([42],"float32"), )
paddle.meshgrid(Tensor([74],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(list[Tensor([58],"float32"),Tensor([80],"float32"),], )
paddle.meshgrid(Tensor([152],"float32"), Tensor([156],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([50],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([240],"float32"), )
paddle.meshgrid(Tensor([50],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(list[Tensor([124],"float32"),Tensor([168],"float32"),], )
paddle.meshgrid(Tensor([66],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([65],"float32"), Tensor([75],"float32"), )
paddle.meshgrid(Tensor([54],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([51],"float32"), Tensor([82],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([63],"float32"), )
paddle.meshgrid(list[Tensor([132],"float32"),Tensor([168],"float32"),], )
paddle.meshgrid(Tensor([75],"float32"), Tensor([50],"float32"), )
paddle.meshgrid(Tensor([208],"float32"), Tensor([208],"float32"), )
paddle.meshgrid(Tensor([68],"float32"), Tensor([50],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(list[Tensor([70],"float32"),Tensor([68],"float32"),], )
paddle.meshgrid(Tensor([296],"float32"), Tensor([192],"float32"), )
paddle.meshgrid(list[Tensor([104],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(Tensor([72],"float32"), Tensor([59],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([80],"int32"), Tensor([60],"int32"), )
paddle.meshgrid(Tensor([58],"float32"), Tensor([80],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([79],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(list[Tensor([70],"float32"),Tensor([78],"float32"),], )
paddle.meshgrid(Tensor([46],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([216],"float32"), Tensor([216],"float32"), )
paddle.meshgrid(Tensor([40],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([54],"float32"), )
paddle.meshgrid(list[Tensor([70],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(Tensor([88],"float32"), Tensor([168],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([44],"float32"), Tensor([69],"float32"), )
paddle.meshgrid(Tensor([336],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([92],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([100],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([56],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([152],"float32"), )
paddle.meshgrid(Tensor([52],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(list[Tensor([68],"int64"),Tensor([68],"int64"),], )
paddle.meshgrid(Tensor([136],"float32"), Tensor([96],"float32"), )
paddle.meshgrid(Tensor([73],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([92],"float32"), Tensor([92],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([73],"float32"), )
paddle.meshgrid(Tensor([61],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(list[Tensor([136],"float32"),Tensor([168],"float32"),], )
paddle.meshgrid(list[Tensor([140],"float32"),Tensor([140],"float32"),], )
paddle.meshgrid(Tensor([66],"float32"), Tensor([48],"float32"), )
paddle.meshgrid(Tensor([232],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([312],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(list[Tensor([82],"float32"),Tensor([68],"float32"),], )
paddle.meshgrid(Tensor([67],"float32"), Tensor([57],"float32"), )
paddle.meshgrid(list[Tensor([84],"float32"),Tensor([68],"float32"),], )
paddle.meshgrid(list[Tensor([108],"float32"),Tensor([156],"float32"),], )
paddle.meshgrid(Tensor([112],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([128],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([92],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(list[Tensor([100],"float32"),Tensor([156],"float32"),], )
paddle.meshgrid(Tensor([54],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([144],"float32"), Tensor([100],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([68],"float32"), )
paddle.meshgrid(Tensor([320],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(list[Tensor([58],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(Tensor([256],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([56],"float32"), Tensor([65],"float32"), )
paddle.meshgrid(Tensor([75],"float32"), Tensor([73],"float32"), )
paddle.meshgrid(list[Tensor([140],"float32"),Tensor([164],"float32"),], )
paddle.meshgrid(Tensor([76],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([48],"float32"), )
paddle.meshgrid(Tensor([120],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(Tensor([74],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(list[Tensor([50],"float32"),Tensor([82],"float32"),], )
paddle.meshgrid(Tensor([164],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([304],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([63],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([74],"float32"), Tensor([48],"float32"), )
paddle.meshgrid(Tensor([76],"float32"), Tensor([70],"float32"), )
paddle.meshgrid(Tensor([96],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(list[Tensor([168],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(list[Tensor([156],"float32"),Tensor([148],"float32"),], )
paddle.meshgrid(Tensor([56],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([264],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([75],"float32"), Tensor([62],"float32"), )
paddle.meshgrid(list[Tensor([68],"float32"),Tensor([54],"float32"),], )
paddle.meshgrid(Tensor([164],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([60],"float32"), Tensor([72],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([176],"float32"), )
paddle.meshgrid(Tensor([256],"float32"), Tensor([312],"float32"), )
paddle.meshgrid(list[Tensor([52],"float32"),Tensor([84],"float32"),], )
paddle.meshgrid(Tensor([72],"float32"), Tensor([78],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([264],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([312],"float32"), )
paddle.meshgrid(list[Tensor([72],"float32"),Tensor([68],"float32"),], )
paddle.meshgrid(Tensor([58],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([100],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(list[Tensor([52],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(Tensor([60],"float32"), Tensor([56],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([232],"float32"), )
paddle.meshgrid(Tensor([156],"float32"), Tensor([112],"float32"), )
paddle.meshgrid(Tensor([224],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(list[Tensor([84],"float32"),Tensor([80],"float32"),], )
paddle.meshgrid(Tensor([200],"float32"), Tensor([336],"float32"), )
paddle.meshgrid(Tensor([80],"float32"), Tensor([124],"float32"), )
paddle.meshgrid(list[Tensor([168],"float32"),Tensor([160],"float32"),], )
paddle.meshgrid(list[Tensor([76],"float32"),Tensor([76],"float32"),], )
paddle.meshgrid(Tensor([240],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([54],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([240],"float32"), Tensor([176],"float32"), )
paddle.meshgrid(list[Tensor([80],"float32"),Tensor([80],"float32"),], )
paddle.meshgrid(Tensor([176],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([112],"float32"), )
paddle.meshgrid(Tensor([70],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([124],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([140],"float32"), Tensor([156],"float32"), )
paddle.meshgrid(Tensor([108],"float32"), Tensor([112],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([54],"float32"), )
paddle.meshgrid(Tensor([75],"float32"), Tensor([64],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([224],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([67],"float32"), )
paddle.meshgrid(Tensor([59],"float32"), Tensor([81],"float32"), )
paddle.meshgrid(Tensor([248],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(list[Tensor([136],"float32"),Tensor([108],"float32"),], )
paddle.meshgrid(Tensor([144],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(Tensor([224],"float32"), Tensor([224],"float32"), )
paddle.meshgrid(Tensor([92],"float32"), Tensor([128],"float32"), )
paddle.meshgrid(Tensor([184],"float32"), Tensor([280],"float32"), )
paddle.meshgrid(Tensor([66],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([136],"float32"), Tensor([100],"float32"), )
paddle.meshgrid(Tensor([64],"float32"), Tensor([84],"float32"), )
paddle.meshgrid(Tensor([78],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(Tensor([100],"float32"), Tensor([144],"float32"), )
paddle.meshgrid(Tensor([336],"float32"), Tensor([256],"float32"), )
paddle.meshgrid(Tensor([288],"float32"), Tensor([312],"float32"), )
paddle.meshgrid(Tensor([232],"float32"), Tensor([232],"float32"), )
paddle.meshgrid(Tensor([84],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(list[Tensor([140],"float32"),Tensor([156],"float32"),], )
paddle.meshgrid(Tensor([241],"float32"), Tensor([241],"float32"), )
paddle.meshgrid(list[Tensor([132],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(Tensor([120],"float32"), Tensor([120],"float32"), )
paddle.meshgrid(Tensor([96],"float32"), Tensor([136],"float32"), )
paddle.meshgrid(Tensor([160],"float32"), Tensor([160],"float32"), )
paddle.meshgrid(list[Tensor([100],"float32"),Tensor([152],"float32"),], )
paddle.meshgrid(Tensor([184],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([184],"float32"), Tensor([248],"float32"), )
paddle.meshgrid(Tensor([132],"float32"), Tensor([132],"float32"), )
paddle.meshgrid(Tensor([176],"float32"), Tensor([240],"float32"), )
paddle.meshgrid(Tensor([84],"float32"), Tensor([66],"float32"), )
paddle.meshgrid(Tensor([62],"float32"), Tensor([81],"float32"), )
paddle.meshgrid(Tensor([272],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([200],"float32"), Tensor([320],"float32"), )
paddle.meshgrid(Tensor([304],"float32"), Tensor([296],"float32"), )
paddle.meshgrid(Tensor([280],"float32"), Tensor([272],"float32"), )
paddle.meshgrid(Tensor([152],"float32"), Tensor([140],"float32"), )
paddle.meshgrid(Tensor([48],"float32"), Tensor([60],"float32"), )
paddle.meshgrid(Tensor([46],"float32"), Tensor([74],"float32"), )
paddle.meshgrid(list[Tensor([140],"float32"),Tensor([168],"float32"),], )
paddle.meshgrid(Tensor([67],"float32"), Tensor([76],"float32"), )
paddle.meshgrid(list[Tensor([80],"float32"),Tensor([76],"float32"),], )
paddle.min(Tensor([16, 32],"float32"), list[0,], )
paddle.min(Tensor([128, 4],"float32"), axis=1, keepdim=True, )
paddle.min(Tensor([16, 32],"float32"), list[1,], )
paddle.min(Tensor([2, 245],"float32"), axis=0, )
paddle.min(Tensor([4, 2],"float64"), axis=0, )
paddle.min(Tensor([],"float32"), axis=-1, )
paddle.min(Tensor([2, 4],"float64"), 1, True, )
paddle.min(Tensor([8, 4],"float64"), axis=0, )
paddle.min(Tensor([2, 4],"float64"), None, False, )
paddle.min(Tensor([5],"float32"), axis=0, )
paddle.min(Tensor([2, 4],"float64"), 0, False, )
paddle.min(Tensor([3, 5],"float32"), keepdim=True, )
paddle.min(x=Tensor([2, 3],"float32"), axis=1, )
paddle.min(Tensor([8, 2],"float64"), axis=0, )
paddle.min(Tensor([1],"int64"), )
paddle.min(x=Tensor([2, 2],"float32"), axis=list[-2,1,], keepdim=False, )
paddle.min(Tensor([],"float32"), axis=None, )
paddle.min(x=Tensor([2, 3],"float32"), )
paddle.min(Tensor([2],"float64"), axis=0, )
paddle.min(x=Tensor([2, 3],"float32"), axis=0, keepdim=True, )
paddle.min(Tensor([2],"float64"), axis=tuple(0,), )
paddle.min(Tensor([2, 3],"float32"), )
paddle.min(x=Tensor([2, 3],"float32"), axis=-2, )
paddle.min(Tensor([2],"int64"), )
paddle.min(x=Tensor([2, 3],"float32"), axis=Tensor([1],"int32"), )
paddle.min(Tensor([3, 5],"float32"), axis=None, )
paddle.min(Tensor([],"float32"), axis=list[], )
paddle.min(Tensor([2, 2, 2],"int32"), tuple(0,1,), False, )
paddle.min(Tensor([],"float64"), None, False, )
paddle.min(Tensor([],"float32"), axis=0, )
paddle.mm(Tensor([10, 20],"float64"), Tensor([20, 10],"float64"), )
paddle.mm(Tensor([20, 10],"float64"), Tensor([10, 20],"float64"), )
paddle.mm(Tensor([5, 4],"float32"), Tensor([4, 5],"float32"), )
paddle.mm(Tensor([4, 5],"float64"), Tensor([5, 4],"float64"), )
paddle.mm(Tensor([1, 10],"float32"), Tensor([10, 1],"float32"), )
paddle.mm(Tensor([5, 4],"float64"), Tensor([4, 5],"float64"), )
paddle.mm(input=Tensor([2, 3, 4],"float64"), mat2=Tensor([4, 5],"float64"), )
paddle.mm(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.mm(Tensor([4, 2],"float32"), Tensor([2, 4],"float32"), )
paddle.mm(input=Tensor([2, 3],"float64"), mat2=Tensor([3, 2],"float64"), )
paddle.mm(Tensor([1, 10],"float64"), Tensor([10, 1],"float64"), )
paddle.mm(input=Tensor([2, 3, 4],"float64"), mat2=Tensor([2, 4, 2],"float64"), )
paddle.mm(input=Tensor([7],"float64"), mat2=Tensor([7],"float64"), )
paddle.mm(Tensor([1, 12],"float32"), Tensor([12, 1],"float32"), )
paddle.mm(Tensor([4, 12],"float64"), Tensor([12, 4],"float64"), )
paddle.mm(input=Tensor([2, 3, 1, 2],"float64"), mat2=Tensor([2, 3, 2, 3],"float64"), )
paddle.mm(Tensor([4, 2],"float64"), Tensor([2, 4],"float64"), )
paddle.mm(Tensor([4, 5],"float32"), Tensor([5, 4],"float32"), )
paddle.mm(Tensor([3, 4],"float32"), Tensor([4, 3],"float32"), )
paddle.mm(input=Tensor([2, 3],"float32"), mat2=Tensor([3, 2],"float32"), )
paddle.mm(input=Tensor([2, 3, 4],"float64"), mat2=Tensor([4],"float64"), )
paddle.mod(Tensor([10, 20],"int32"), Tensor([10, 20],"int32"), )
paddle.mod(Tensor([6, 2, 4, 5],"int32"), Tensor([6, 2, 4, 5],"int32"), )
paddle.mod(Tensor([1],"int64"), Tensor([1],"int64"), )
paddle.mod(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.mod(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.mod(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.mod(Tensor([2, 4, 5],"int32"), Tensor([2, 4, 5],"int32"), )
paddle.mod(Tensor([1],"int32"), Tensor([1],"int32"), )
paddle.mod(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.mod(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.mod(Tensor([4, 5],"int32"), Tensor([4, 5],"int32"), )
paddle.mod(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.mod(Tensor([6],"int32"), Tensor([6],"int32"), )
paddle.mod(Tensor([],"int64"), Tensor([],"int64"), )
paddle.mod(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.mod(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.mod(Tensor([],"float32"), Tensor([],"float32"), )
paddle.mode(Tensor([2, 10, 10],"float64"), -1, )
paddle.mode(Tensor([2, 10, 10],"float64"), -1, keepdim=True, )
paddle.mode(Tensor([2, 10, 10],"float64"), 1, )
paddle.mode(Tensor([2, 10, 10],"float64"), 1, keepdim=True, )
paddle.mode(Tensor([5],"float32"), )
paddle.mode(x=Tensor([3, 2, 3],"int64"), )
paddle.mode(x=Tensor([3, 2, 3],"float64"), axis=2, keepdim=True, )
paddle.mode(x=Tensor([3, 2, 3],"float32"), )
paddle.mode(x=Tensor([3, 2, 3],"float64"), )
paddle.mode(x=Tensor([3, 2, 3],"float64"), axis=1, keepdim=False, )
paddle.mode(x=Tensor([3, 2, 3],"int32"), )
paddle.moveaxis(x=Tensor([4, 2, 3, 5, 7],"float64"), source=tuple(0,1,), destination=tuple(2,3,), )
paddle.moveaxis(Tensor([4, 7, 6],"float64"), list[0,2,], list[1,2,], )
paddle.moveaxis(x=Tensor([4, 2, 3, 5],"float64"), source=0, destination=2, )
paddle.moveaxis(Tensor([4, 7, 6],"float64"), list[1,2,], list[1,2,], )
paddle.moveaxis(Tensor([2, 3, 4, 5, 7],"float64"), list[0,4,3,2,], list[1,3,2,0,], )
paddle.moveaxis(x=Tensor([4, 2, 3, 5, 7],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([4, 2],"float64"), source=0, destination=1, )
paddle.moveaxis(Tensor([],"float32"), list[], list[], )
paddle.moveaxis(x=Tensor([4, 2],"float32"), source=0, destination=1, )
paddle.moveaxis(x=Tensor([4, 2, 3],"float64"), source=0, destination=2, )
paddle.moveaxis(x=Tensor([4, 2],"int64"), source=0, destination=1, )
paddle.moveaxis(x=Tensor([4, 2],"complex64"), source=0, destination=1, )
paddle.moveaxis(Tensor([5, 3, 4],"float64"), list[1,2,], list[1,2,], )
paddle.moveaxis(x=Tensor([4, 2],"complex128"), source=0, destination=1, )
paddle.moveaxis(x=Tensor([4, 2],"int32"), source=0, destination=1, )
paddle.multigammaln(Tensor([10, 20],"float32"), 2, )
paddle.multigammaln(Tensor([10, 20],"float64"), 2, )
paddle.multiplex(inputs=list[Tensor([7, 4],"float32"),Tensor([7, 4],"float32"),], index=Tensor([6, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),], index=Tensor([4, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 4],"float32"),Tensor([2, 4],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([4, 4],"float32"),Tensor([4, 4],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),Tensor([2, 3],"float32"),], index=Tensor([2, 1],"int32"), )
paddle.multiplex(inputs=list[Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),Tensor([3, 3],"float32"),], index=Tensor([3, 1],"int32"), )
paddle.mv(Tensor([5, 100],"float64"), Tensor([100],"float64"), )
paddle.mv(Tensor([3, 36],"float32"), Tensor([36],"float32"), )
paddle.mv(x=Tensor([1, 2],"float64"), vec=Tensor([2],"float64"), )
paddle.mv(x=Tensor([2, 1],"float64"), vec=Tensor([1],"float64"), )
paddle.mv(x=Tensor([3, 2],"float32"), vec=Tensor([2],"float32"), )
paddle.mv(Tensor([3, 6],"float32"), Tensor([6],"float32"), )
paddle.mv(x=Tensor([3, 3],"float64"), vec=Tensor([3],"float64"), )
paddle.mv(Tensor([1, 18],"float32"), Tensor([18],"float32"), )
paddle.mv(x=Tensor([3, 2],"float64"), vec=Tensor([2],"float64"), )
paddle.mv(Tensor([3, 12],"float32"), Tensor([12],"float32"), )
paddle.mv(x=Tensor([2, 3],"float64"), vec=Tensor([3],"float64"), )
paddle.nan_to_num(Tensor([400],"float64"), neginf=-2.220446049250313e-16, )
paddle.nan_to_num(Tensor([114, 1],"float64"), neginf=-2.220446049250313e-16, )
paddle.nan_to_num(Tensor([144],"float64"), neginf=-2.220446049250313e-16, )
paddle.nan_to_num(Tensor([400, 1],"float64"), neginf=-2.220446049250313e-16, )
paddle.nan_to_num(Tensor([2, 3],"float32"), 1.0, 100.0, -10.0, )
paddle.nan_to_num(Tensor([2, 3],"float32"), 1.0, 2.0, None, )
paddle.nan_to_num(Tensor([5],"float64"), neginf=-2.220446049250313e-16, )
paddle.nan_to_num(Tensor([78],"float64"), neginf=-2.220446049250313e-16, )
paddle.nan_to_num(Tensor([2, 3],"float32"), 1.0, None, -10.0, )
paddle.nan_to_num(Tensor([2, 4],"float32"), )
paddle.nan_to_num(Tensor([],"float32"), )
paddle.nan_to_num(Tensor([91, 1],"float64"), neginf=-2.220446049250313e-16, )
paddle.nan_to_num(Tensor([],"float32"), neginf=-1.1920928955078125e-07, )
paddle.nan_to_num(Tensor([2, 3],"float32"), )
paddle.nan_to_num(Tensor([2, 3],"float32"), 1.0, None, None, )
paddle.nanmean(Tensor([2, 3, 4, 5],"float32"), list[0,1,2,3,], False, )
paddle.nanmean(Tensor([2, 3, 4, 5],"float32"), list[], False, )
paddle.nanmean(Tensor([2, 3, 4, 5],"float32"), None, True, )
paddle.nanmean(Tensor([2, 3, 4, 5],"float32"), tuple(0,2,), False, )
paddle.nanmean(Tensor([2, 3, 4, 5],"float32"), list[0,2,], False, )
paddle.nanmean(Tensor([2, 3, 4, 5],"float32"), None, False, )
paddle.nanmean(Tensor([2, 3, 4, 5],"float32"), -1, False, )
paddle.nanmean(Tensor([2, 3, 4, 5],"float32"), 2, True, )
paddle.nanmean(Tensor([],"float32"), axis=-1, )
paddle.nanmean(Tensor([],"float32"), axis=list[], )
paddle.nanmean(Tensor([3, 5],"float32"), axis=None, )
paddle.nanmean(Tensor([],"float32"), axis=None, )
paddle.nanmean(Tensor([2, 3],"float32"), None, False, )
paddle.nanmean(Tensor([2, 3],"float32"), None, True, )
paddle.nanmean(Tensor([],"float32"), axis=0, )
paddle.nanmean(Tensor([5],"float32"), axis=0, )
paddle.nanmean(Tensor([2, 3],"float32"), tuple(0,1,), False, )
paddle.nanmean(Tensor([2, 3],"float32"), -1, False, )
paddle.nanmean(Tensor([2, 3],"float32"), 0, True, )
paddle.nanmean(Tensor([2, 3],"float32"), 1, False, )
paddle.nanmean(Tensor([3, 5],"float32"), keepdim=True, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=list[0,2,1,3,], keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=tuple(1,2,3,), keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=None, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=list[0,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 100],"float32"), axis=1, mode="min", )
paddle.nanmedian(Tensor([120],"float64"), keepdim=True, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=list[0,3,], keepdim=False, )
paddle.nanmedian(Tensor([120],"float32"), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), keepdim=True, )
paddle.nanmedian(Tensor([120],"float32"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float64"), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([120],"float64"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=-1, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=tuple(1,2,), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=list[0,1,3,], keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float64"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([120],"float32"), keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=0, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=None, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=list[0,1,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=tuple(1,2,), keepdim=False, )
paddle.nanmedian(Tensor([120],"float32"), keepdim=True, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=-1, keepdim=False, )
paddle.nanmedian(Tensor([120],"float64"), keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=2, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float64"), keepdim=True, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=0, keepdim=False, )
paddle.nanmedian(Tensor([120],"float64"), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=-2, keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=tuple(1,2,3,), keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=list[0,2,1,3,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=-2, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=list[0,-1,], keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float64"), keepdim=False, )
paddle.nanmedian(Tensor([2, 3, 4, 5],"float32"), axis=list[0,-1,], keepdim=False, mode="min", )
paddle.nanmedian(Tensor([2, 3],"float64"), axis=1, keepdim=False, )
paddle.nanmedian(Tensor([3, 5],"float32"), axis=None, )
paddle.nanmedian(Tensor([],"float32"), axis=0, )
paddle.nanmedian(Tensor([3, 5],"float32"), keepdim=True, )
paddle.nanmedian(Tensor([],"float32"), )
paddle.nanmedian(Tensor([4, 5],"float64"), axis=1, mode="min", )
paddle.nanmedian(Tensor([5],"float32"), axis=0, )
paddle.nanmedian(Tensor([4, 5],"float64"), keepdim=True, )
paddle.nanmedian(Tensor([4, 5],"float64"), axis=1, )
paddle.nanmedian(Tensor([2, 3],"float64"), axis=1, keepdim=False, mode="min", )
paddle.nanmedian(Tensor([4, 5],"float64"), keepdim=True, mode="min", )
paddle.nanmedian(Tensor([],"float32"), axis=None, )
paddle.nanmedian(Tensor([],"float32"), mode="min", )
paddle.nanmedian(Tensor([],"float32"), axis=-1, )
paddle.nanquantile(Tensor([4, 7, 6],"float64"), q=0.1, axis=list[1,2,], keepdim=True, )
paddle.nanquantile(Tensor([4, 7, 6],"float64"), q=0.35, axis=2, keepdim=True, )
paddle.nanquantile(Tensor([4, 7, 6],"float64"), q=0.75, axis=list[0,2,], )
paddle.nanquantile(Tensor([4, 7, 6],"float64"), q=0, axis=1, )
paddle.nanquantile(Tensor([4, 7, 6],"float64"), q=0.5, axis=2, )
paddle.nanquantile(Tensor([4, 7, 6],"float64"), q=0.35, )
paddle.nanquantile(Tensor([2, 3, 4],"float64"), q=0.35, axis=0, interpolation="lower", )
paddle.nanquantile(Tensor([2, 3, 4],"float64"), q=0.35, axis=0, interpolation="nearest", )
paddle.nanquantile(Tensor([2, 3],"float32"), list[0.3,0.7,], 1, )
paddle.nanquantile(Tensor([4, 7],"float64"), q=0.5, axis=1, )
paddle.nanquantile(Tensor([8],"float32"), list[0.55,0.7,], 0, )
paddle.nanquantile(Tensor([2, 3],"float64"), q=0.35, axis=0, )
paddle.nanquantile(Tensor([2, 3, 4],"float64"), q=0.35, axis=0, interpolation="midpoint", )
paddle.nanquantile(Tensor([3],"float32"), 0.5, 0, )
paddle.nanquantile(Tensor([4, 7],"float32"), q=0.5, axis=1, )
paddle.nanquantile(Tensor([2, 3, 4],"float64"), q=0.35, axis=0, interpolation="higher", )
paddle.nansum(Tensor([2, 3, 4, 5],"float32"), axis=tuple(0,2,), keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 5],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([2, 3, 4, 5],"float32"), axis=list[0,1,2,3,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 5],"float32"), axis=list[], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 5],"float32"), axis=list[2,], keepdim=True, name=None, )
paddle.nansum(x=Tensor([3, 2, 3, 4, 5, 1, 2],"float64"), axis=3, keepdim=True, )
paddle.nansum(Tensor([2, 3, 4, 5],"float32"), axis=list[0,2,], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 5],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3, 4, 5],"float32"), axis=list[-1,], keepdim=False, name=None, )
paddle.nansum(x=Tensor([3, 3, 3],"float64"), )
paddle.nansum(Tensor([2, 3],"float32"), axis=list[0,], keepdim=True, name=None, )
paddle.nansum(Tensor([],"float32"), axis=list[0,], keepdim=False, name=None, )
paddle.nansum(Tensor([3, 5],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(Tensor([],"float32"), axis=0, )
paddle.nansum(Tensor([5],"float32"), axis=0, )
paddle.nansum(Tensor([5],"float32"), axis=list[0,], keepdim=False, name=None, )
paddle.nansum(Tensor([],"float32"), axis=list[], keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3],"float32"), axis=list[1,], keepdim=False, name=None, )
paddle.nansum(Tensor([],"float32"), axis=list[-1,], keepdim=False, name=None, )
paddle.nansum(Tensor([3, 5],"float32"), keepdim=True, )
paddle.nansum(Tensor([2, 3],"float32"), axis=tuple(0,1,), keepdim=False, name=None, )
paddle.nansum(Tensor([3, 5],"float32"), axis=None, )
paddle.nansum(x=Tensor([3, 3, 3],"float64"), axis=0, )
paddle.nansum(Tensor([2, 3],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([2, 4],"float32"), )
paddle.nansum(Tensor([],"float32"), axis=None, )
paddle.nansum(Tensor([2, 3],"float32"), axis=None, keepdim=True, name=None, )
paddle.nansum(x=Tensor([3, 3, 3],"float64"), axis=-1, )
paddle.nansum(Tensor([],"float32"), axis=list[], )
paddle.nansum(Tensor([3, 5],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([2, 3],"float32"), axis=list[-1,], keepdim=False, name=None, )
paddle.nansum(x=Tensor([3, 3, 3],"float64"), axis=0, keepdim=True, )
paddle.nansum(Tensor([],"float32"), axis=None, keepdim=False, name=None, )
paddle.nansum(Tensor([],"float32"), axis=-1, )
paddle.neg(Tensor([10, 20, 1],"float32"), )
paddle.neg(Tensor([32, 8],"int16"), )
paddle.neg(Tensor([32, 8],"int32"), )
paddle.neg(Tensor([32, 8],"float32"), )
paddle.neg(Tensor([32, 8],"float64"), )
paddle.neg(Tensor([32, 8],"int8"), )
paddle.neg(Tensor([32, 8],"int64"), )
paddle.neg(x=Tensor([6, 6, 6],"float64"), )
paddle.neg(x=Tensor([6, 6],"float32"), )
paddle.neg(Tensor([],"float32"), )
paddle.neg(x=Tensor([6, 6],"int64"), )
paddle.neg(x=Tensor([6, 6],"int16"), )
paddle.neg(x=Tensor([6, 6],"int32"), )
paddle.neg(x=Tensor([6, 6],"int8"), )
paddle.neg(x=Tensor([6, 6],"float64"), )
paddle.negative(Tensor([2, 3, 4, 5],"float16"), )
paddle.negative(Tensor([2, 3, 4, 5],"float32"), )
paddle.negative(Tensor([2, 3, 4, 5],"int64"), )
paddle.negative(Tensor([2, 3, 4, 5],"int32"), )
paddle.negative(Tensor([2, 3, 4, 5],"float64"), )
paddle.negative(Tensor([2, 3, 4, 5],"int16"), )
paddle.nextafter(Tensor([2, 3, 4, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.nextafter(Tensor([],"float32"), Tensor([],"float32"), )
paddle.nextafter(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.nextafter(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.nextafter(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 32],"float32"), 16, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 32],"float32"), 16, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 8],"float64"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 8],"float64"), 4, None, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 3, 8],"float64"), output_size=8, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 8],"float32"), 2, None, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 3, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_avg_pool1d(Tensor([2, 3, 8],"float64"), 8, None, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 3, 8],"float64"), output_size=2, )
paddle.nn.functional.adaptive_avg_pool1d(x=Tensor([2, 3, 8],"float32"), output_size=2, )
paddle.nn.functional.adaptive_log_softmax_with_loss(Tensor([8, 8],"float32"), Tensor([8],"int64"), Tensor([8, 3],"float32"), list[list[Tensor([8, 4],"float32"),Tensor([4, 2],"float32"),],], list[2,4,], None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 32],"float32"), output_size=16, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 3, 32],"float64"), output_size=8, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 32],"float32"), 16, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 32],"float64"), 8, False, None, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 8],"float32"), 4, False, None, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 3, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_max_pool1d(x=Tensor([2, 3, 8],"float32"), output_size=4, )
paddle.nn.functional.adaptive_max_pool1d(Tensor([2, 3, 8],"float64"), 4, False, None, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list[None,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([1, 2, 8, 8],"float64"), output_size=4, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=5, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list[None,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list[2,5,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 1, 8, 8],"float64"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([1, 2, 8, 8],"float64"), output_size=4, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 1, 8, 8],"float32"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), output_size=list[2,5,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 3, 7, 7],"float32"), return_mask=False, output_size=list[3,3,], )
paddle.nn.functional.adaptive_max_pool2d(x=Tensor([2, 1, 8, 8],"float32"), output_size=3, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=5, return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 3, 7, 7],"float32"), output_size=list[3,3,], return_mask=False, name=None, )
paddle.nn.functional.adaptive_max_pool2d(Tensor([2, 1, 8, 8],"float64"), output_size=3, return_mask=False, name=None, )
paddle.nn.functional.affine_grid(Tensor([20, 2, 3],"float32"), list[20,2,5,7,], align_corners=False, )
paddle.nn.functional.affine_grid(Tensor([20, 2, 3],"float32"), list[20,2,5,7,], align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([20, 2, 3],"float32"), list[20,1,7,7,], align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([20, 2, 3],"float32"), Tensor([4],"int64"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([1, 2, 3],"float32"), Tensor([4],"int32"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([4, 2, 3],"float64"), Tensor([4],"int32"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([1, 2, 3],"float64"), Tensor([4],"int32"), align_corners=True, )
paddle.nn.functional.affine_grid(Tensor([2, 2, 3],"float32"), out_shape=list[2,3,244,244,], )
paddle.nn.functional.affine_grid(Tensor([4, 2, 3],"float64"), Tensor([4],"int32"), align_corners=False, )
paddle.nn.functional.avg_pool2d(Tensor([1, 2, 4, 4],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=True, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([1, 4, 3, 3],"float32"), kernel_size=2, stride=1, padding=0, ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=tuple(0,0,), ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,0,0,], ceil_mode=False, exclusive=False, )
paddle.nn.functional.avg_pool2d(Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[0,0,], ceil_mode=False, exclusive=True, divisor_override=None, data_format="NCHW", name=None, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=tuple(1,1,), padding=list[0,0,], )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[1,1,], padding=list[1,1,], exclusive=False, )
paddle.nn.functional.avg_pool2d(x=Tensor([2, 3, 4, 4],"float64"), kernel_size=list[3,3,], stride=list[3,3,], padding=list[0,0,], ceil_mode=True, exclusive=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 4],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 4],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NCHW", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 3, 4, 4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), Tensor([4],"float64"), training=True, momentum=0.1, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.9, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=False, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=True, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, momentum=0.1, data_format="NCHW", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, data_format="NCL", )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 3],"float64"), running_mean=Tensor([1],"float64"), running_var=Tensor([1],"float64"), weight=Tensor([1],"float64"), bias=Tensor([1],"float64"), epsilon=1e-05, )
paddle.nn.functional.batch_norm(x=Tensor([2, 1, 2, 3],"float32"), running_mean=Tensor([1],"float32"), running_var=Tensor([1],"float32"), weight=Tensor([1],"float32"), bias=Tensor([1],"float32"), )
paddle.nn.functional.batch_norm(Tensor([2, 1, 2, 3],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), Tensor([1],"float32"), training=True, momentum=0.9, epsilon=1e-05, data_format="NCHW", use_global_stats=None, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=False, )
paddle.nn.functional.batch_norm(Tensor([2, 4, 3, 3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), Tensor([3],"float64"), training=True, momentum=0.9, epsilon=1e-05, data_format="NHWC", use_global_stats=None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float32"), Tensor([3, 2],"float32"), Tensor([4, 1, 2],"float32"), Tensor([1, 4],"float32"), None, )
paddle.nn.functional.bilinear(Tensor([3, 1],"float64"), Tensor([3, 2],"float64"), Tensor([4, 1, 2],"float64"), Tensor([1, 4],"float64"), None, )
paddle.nn.functional.bilinear(Tensor([1, 3],"float32"), Tensor([1, 3],"float32"), Tensor([6, 3, 3],"float32"), Tensor([1, 6],"float32"), None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([3, 4, 10],"float64"), "sum", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([3, 4, 10],"float64"), "none", None, )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([3, 4, 10],"float64"), reduction="mean", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([3, 4, 10],"float64"), reduction="sum", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([3, 4, 10],"float64"), reduction="none", )
paddle.nn.functional.binary_cross_entropy(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([3, 4, 10],"float64"), "mean", None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="none", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([1, 100, 2],"float32"), Tensor([1, 100, 2],"float32"), weight=Tensor([1, 100, 2],"float32"), reduction="none", )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="sum", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), weight=Tensor([2, 3, 4, 10],"float64"), reduction="mean", pos_weight=None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "mean", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "sum", None, None, )
paddle.nn.functional.binary_cross_entropy_with_logits(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), "none", None, None, )
paddle.nn.functional.celu(x=Tensor([2, 3, 4],"float32"), )
paddle.nn.functional.celu(Tensor([2, 3, 4],"float64"), 1.0, None, )
paddle.nn.functional.celu(x=Tensor([2, 2],"float64"), alpha=-0.4, )
paddle.nn.functional.celu(Tensor([2, 4, 4],"float64"), 1.0, None, )
paddle.nn.functional.celu(Tensor([2, 4, 4],"float64"), 0.2, None, )
paddle.nn.functional.celu(Tensor([2, 2],"float64"), -0.4, None, )
paddle.nn.functional.celu(Tensor([],"float32"), )
paddle.nn.functional.celu(Tensor([2, 3, 4],"float32"), 1.0, None, )
paddle.nn.functional.celu(x=Tensor([2, 4, 4],"float64"), alpha=0.2, )
paddle.nn.functional.celu(x=Tensor([2, 3, 4],"float64"), )
paddle.nn.functional.celu(x=Tensor([2, 4, 4],"float64"), )
paddle.nn.functional.channel_shuffle(Tensor([2, 4, 4, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.channel_shuffle(Tensor([2, 4, 4, 9],"float64"), 3, "NHWC", )
paddle.nn.functional.channel_shuffle(Tensor([2, 9, 4, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.channel_shuffle(Tensor([2, 9, 4, 4],"float64"), 3, "NCHW", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="same", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 3, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 16, 3],"float32"), Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 16, 6],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=2, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([4, 6, 16],"float32"), Tensor([8, 6, 3],"float32"), bias=Tensor([8],"float32"), padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([3, 3, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([6, 1, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 6],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=tuple(1,), stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 2],"float64"), bias=Tensor([1],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv1d(Tensor([2, 3, 6],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([3, 3, 2],"float64"), bias=Tensor([3],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([3, 3, 2],"float32"), bias=Tensor([3],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv1d(Tensor([2, 4, 3],"float64"), Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 4, 3],"float32"), Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=list[1,], dilation=tuple(2,), )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([6, 1, 3],"float32"), bias=Tensor([6],"float32"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([6, 1, 3],"float64"), bias=Tensor([6],"float64"), padding=0, stride=list[2,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 2],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float32"), Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([3, 3, 2],"float64"), bias=Tensor([3],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(x=Tensor([2, 4, 3],"float32"), weight=Tensor([2, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float32"), weight=Tensor([1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv1d(Tensor([1, 3, 5],"float32"), Tensor([4, 3, 3],"float32"), bias=Tensor([4],"float32"), padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d(x=Tensor([2, 3, 4],"float64"), weight=Tensor([1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[1,], padding=1, dilation=2, )
paddle.nn.functional.conv1d(x=Tensor([2, 4, 3],"float64"), weight=Tensor([2, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=18, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 4, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=2, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 1],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=3, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[1,2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 3, 16],"float32"), Tensor([3, 2, 3],"float32"), bias=Tensor([6],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding="valid", stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=0, padding=list[2,], stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 16, 6],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=None, output_padding=2, padding=0, stride=list[3,], dilation=list[1,], groups=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(Tensor([4, 6, 16],"float32"), Tensor([6, 8, 3],"float32"), bias=Tensor([8],"float32"), output_size=list[36,], output_padding=0, padding=0, stride=list[2,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 8, 3],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[list[0,0,],list[3,4,],list[0,0,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), stride=2, padding=list[1,], output_padding=1, groups=3, dilation=1, output_size=None, data_format="NLC", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,], output_padding=0, groups=3, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 2, 3],"float32"), bias=Tensor([2],"float32"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], output_padding=0, groups=1, dilation=2, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[2,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[1,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 5],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding="SaME", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 5],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding="vALiD", output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=1, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), output_size=None, output_padding=0, padding=0, stride=list[1,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([3],"float64"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(Tensor([2, 3, 2],"float64"), Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), output_size=None, output_padding=0, padding=list[1,], stride=list[2,], dilation=list[1,], groups=1, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 8],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[4,4,], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=3, dilation=1, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,], groups=3, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", name=None, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float32"), weight=Tensor([3, 2, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=list[1,], groups=1, dilation=1, )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 2, 3],"float32"), weight=Tensor([3, 1, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=list[1,], groups=3, dilation=1, data_format="NLC", output_padding=1, )
paddle.nn.functional.conv1d_transpose(Tensor([2, 2, 3],"float32"), Tensor([3, 1, 3],"float32"), bias=Tensor([3],"float32"), output_size=None, output_padding=1, padding=list[1,], stride=list[2,], dilation=list[1,], groups=3, data_format="NLC", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 8],"float64"), weight=Tensor([3, 2, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[3,4,],], output_padding=0, groups=1, dilation=1, output_size=None, data_format="NCL", )
paddle.nn.functional.conv1d_transpose(x=Tensor([2, 3, 2],"float64"), weight=Tensor([3, 1, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,], groups=1, dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 5, 5],"float32"), Tensor([3, 3, 2, 2],"float32"), bias=Tensor([3],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([1, 4, 8, 8],"float32"), Tensor([4, 2, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], output_padding=0, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=Tensor([2],"int32"), stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,6,], stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,2,3,4,], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 4, 4],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding="vaLiD", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 6, 2, 2],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float64"), weight=Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=2, padding=list[1,0,], output_padding=1, dilation=1, groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 2, 2, 6],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, data_format="NHWC", dilation=1, )
paddle.nn.functional.conv2d_transpose(Tensor([1, 2, 16, 16],"float32"), Tensor([2, 1, 4, 4],"float32"), bias=None, padding=1, output_padding=0, stride=list[2,2,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding="sAmE", output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 6, 2, 2],"float32"), weight=Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,], groups=3, dilation=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 8, 8, 3],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[1,2,],list[3,4,],list[0,0,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float32"), Tensor([6, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 8, 8],"float64"), weight=Tensor([3, 1, 5, 5],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[list[0,0,],list[0,0,],list[1,2,],list[3,4,],], output_padding=0, dilation=1, groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 2, 6],"float64"), Tensor([6, 1, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,], output_padding=1, stride=list[2,2,], dilation=list[1,1,], groups=3, output_size=None, data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="SAME", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 4, 3, 3],"float64"), Tensor([4, 2, 1, 1],"float64"), groups=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float64"), Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding="VALID", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,], output_padding=0, stride=list[1,1,], dilation=list[2,2,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), Tensor([1],"float32"), output_size=Tensor([2],"int64"), )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, output_padding=0, dilation=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=0, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,0,0,1,], )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 2, 2],"float32"), Tensor([3, 1, 3, 3],"float32"), bias=None, padding=1, output_padding=0, stride=list[1,1,], dilation=list[1,1,], groups=1, output_size=None, data_format="NCHW", )
paddle.nn.functional.conv2d_transpose(Tensor([2, 3, 3, 2],"float64"), Tensor([2, 2, 1, 1],"float64"), groups=1, padding=list[1,1,], data_format="NHWC", )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=2, )
paddle.nn.functional.conv2d_transpose(x=Tensor([2, 3, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,], dilation=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 3],"float64"), weight=Tensor([2, 3, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 2, 2, 2],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=1, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([3, 3, 2, 2, 2],"float32"), bias=Tensor([3],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([2, 3, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=list[2,2,2,], )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=1, dilation=2, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([6, 1, 3, 3, 3],"float64"), bias=Tensor([6],"float64"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([3, 3, 2, 2, 2],"float64"), bias=Tensor([3],"float64"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 4, 4, 4, 3],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, data_format="NDHWC", )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=2, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 2, 2, 2],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([1, 3, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=list[2,2,1,], padding=tuple(1,2,2,), dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([6, 1, 3, 3, 3],"float32"), bias=Tensor([6],"float32"), stride=2, padding=0, groups=3, )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float64"), weight=Tensor([1, 3, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=list[2,2,1,], padding=list[1,2,2,], dilation=tuple(2,2,2,), )
paddle.nn.functional.conv3d(x=Tensor([2, 3, 4, 4, 4],"float32"), weight=Tensor([2, 3, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), stride=1, padding=0, )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([2],"float32"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=1, dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=2, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 2, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), stride=1, padding=0, dilation=1, )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 2, 3, 3, 3],"float64"), bias=Tensor([2],"float64"), padding=0, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), stride=1, padding=list[1,0,1,], dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), output_padding=1, stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float64"), weight=Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([3],"float64"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([1],"float32"), padding=1, output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,1,1,], output_padding=1, stride=list[2,2,2,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(Tensor([2, 2, 2, 2, 3],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NDHWC", )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 3, 2, 2, 2],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, dilation=1, )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float32"), Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[1,1,1,], groups=3, output_size=None, data_format="NCDHW", )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), output_size=list[4,4,4,], stride=2, padding=list[1,1,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(x=Tensor([2, 2, 2, 2, 3],"float32"), weight=Tensor([3, 1, 3, 3, 3],"float32"), bias=Tensor([3],"float32"), stride=1, padding=list[1,0,1,], groups=3, data_format="NDHWC", dilation=1, )
paddle.nn.functional.conv3d_transpose(Tensor([2, 3, 2, 2, 2],"float64"), Tensor([3, 1, 3, 3, 3],"float64"), bias=Tensor([1],"float64"), padding=list[1,0,1,], output_padding=0, stride=list[1,1,1,], dilation=list[2,2,2,], groups=1, output_size=None, data_format="NCDHW", )
paddle.nn.functional.cosine_embedding_loss(Tensor([10],"float32"), Tensor([10],"float32"), Tensor([1],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([10, 3],"float32"), Tensor([10, 3],"float32"), Tensor([10],"int64"), margin=0.5, reduction="mean", name=None, )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 3],"float64"), Tensor([5, 3],"float64"), Tensor([5],"int32"), margin=0.5, reduction="mean", )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 3],"float64"), Tensor([5, 3],"float64"), Tensor([5],"int32"), margin=0.5, reduction="none", )
paddle.nn.functional.cosine_embedding_loss(Tensor([5, 3],"float64"), Tensor([5, 3],"float64"), Tensor([5],"int32"), margin=0.5, reduction="sum", )
paddle.nn.functional.cosine_similarity(Tensor([10, 15],"float32"), Tensor([10, 15],"float32"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([5, 2, 3, 4],"float64"), Tensor([2, 3, 4],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([12, 13],"float32"), Tensor([12, 13],"float32"), axis=0, eps=1e-06, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3, 4],"float64"), x2=Tensor([2, 3, 4],"float64"), axis=1, eps=0, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float64"), Tensor([1, 5],"float64"), axis=1, eps=1e-06, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float64"), Tensor([1, 5],"float64"), axis=1, eps=1e-09, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3],"float32"), x2=Tensor([2, 3],"float32"), )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3],"float64"), x2=Tensor([2, 3],"float64"), )
paddle.nn.functional.cosine_similarity(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=-1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float64"), Tensor([1, 5],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=-2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5],"float64"), Tensor([1, 5],"float64"), axis=1, eps=1e-07, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3],"float64"), x2=Tensor([2, 3],"float64"), axis=1, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=0, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([1, 5, 2],"float64"), Tensor([1, 5, 2],"float64"), axis=2, eps=1e-08, )
paddle.nn.functional.cosine_similarity(Tensor([3, 8, 2],"float64"), Tensor([3, 8, 2],"float64"), axis=1, eps=1e-08, )
paddle.nn.functional.cosine_similarity(x1=Tensor([2, 3],"float64"), x2=Tensor([2, 3],"float64"), axis=0, )
paddle.nn.functional.elu(Tensor([15, 20],"float32"), 1.0, )
paddle.nn.functional.elu(Tensor([2, 64],"float32"), )
paddle.nn.functional.elu(Tensor([10, 20, 1],"float32"), )
paddle.nn.functional.elu(Tensor([],"float32"), )
paddle.nn.functional.elu(Tensor([2, 2],"float64"), 0.2, None, )
paddle.nn.functional.elu(x=Tensor([2, 2],"float64"), alpha=0.2, )
paddle.nn.functional.elu(Tensor([3, 3, 3],"float64"), 2, None, )
paddle.nn.functional.elu(x=Tensor([3, 3, 3],"float64"), alpha=0, )
paddle.nn.functional.elu(Tensor([3, 3, 3],"float64"), 1.0, None, )
paddle.nn.functional.elu(x=Tensor([3, 3, 3],"float32"), )
paddle.nn.functional.elu(Tensor([3, 3, 3],"float32"), 1.0, None, )
paddle.nn.functional.elu(x=Tensor([3, 3, 3],"float64"), )
paddle.nn.functional.elu(x=Tensor([3, 3, 3],"float64"), alpha=2, )
paddle.nn.functional.elu(Tensor([3, 3, 3],"float64"), 0, None, )
paddle.nn.functional.elu(Tensor([2, 32],"float32"), )
paddle.nn.functional.fold(Tensor([3, 12, 12],"float64"), output_sizes=list[4,5,], kernel_sizes=2, )
paddle.nn.functional.fold(Tensor([2, 12, 6],"float64"), output_sizes=4, kernel_sizes=tuple(2,3,), )
paddle.nn.functional.fold(Tensor([3, 12, 12],"float64"), output_sizes=list[4,5,], kernel_sizes=list[2,2,], strides=list[1,1,], paddings=list[0,0,0,0,], dilations=list[1,1,], name=None, )
paddle.nn.functional.fold(Tensor([3, 12, 9],"float64"), output_sizes=4, kernel_sizes=2, )
paddle.nn.functional.fold(Tensor([2, 12, 6],"float64"), output_sizes=4, kernel_sizes=tuple(2,3,), strides=2, paddings=1, )
paddle.nn.functional.fold(Tensor([3, 12, 12],"float32"), output_sizes=list[4,5,], kernel_sizes=2, )
paddle.nn.functional.fold(Tensor([2, 12, 2],"float64"), output_sizes=4, kernel_sizes=tuple(2,3,), strides=2, )
paddle.nn.functional.fold(Tensor([2, 12, 2],"float64"), output_sizes=4, kernel_sizes=tuple(2,3,), strides=2, paddings=1, dilations=2, )
paddle.nn.functional.grid_sample(Tensor([2, 4, 4, 4],"float32"), Tensor([2, 4, 4, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 4, 8, 8],"float32"), Tensor([2, 8, 8, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([1, 4, 8, 8],"float32"), Tensor([1, 8, 8, 2],"float32"), mode="nearest", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 3, 3, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=True, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 3, 3, 2],"float64"), mode="bilinear", padding_mode="zeros", align_corners=False, )
paddle.nn.functional.grid_sample(Tensor([2, 2, 3, 3],"float64"), Tensor([2, 3, 3, 2],"float64"), mode="bilinear", padding_mode="reflection", align_corners=True, )
paddle.nn.functional.hardshrink(x=Tensor([3],"float64"), threshold=0, )
paddle.nn.functional.hardshrink(Tensor([3],"float32"), 0.5, None, )
paddle.nn.functional.hardshrink(Tensor([3],"float64"), -1, None, )
paddle.nn.functional.hardshrink(x=Tensor([3],"float32"), )
paddle.nn.functional.hardshrink(Tensor([3],"float32"), -1, None, )
paddle.nn.functional.hardshrink(Tensor([],"float32"), )
paddle.nn.functional.hardshrink(x=Tensor([3],"float64"), )
paddle.nn.functional.hardshrink(x=Tensor([3],"float64"), threshold=-1, )
paddle.nn.functional.hardshrink(Tensor([3],"float64"), 0, None, )
paddle.nn.functional.hardshrink(Tensor([3],"float64"), 0.5, None, )
paddle.nn.functional.hardsigmoid(Tensor([4, 128, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([2, 120, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 384, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 480, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([8, 48, 1, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([1, 120, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([4, 48, 1, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([2, 240, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 512, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 576, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 192, 1, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([2, 384, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([8, 72, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([4, 240, 1, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([1, 240, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 384, 1, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([4, 176, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([4, 240, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 480, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 672, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([1, 960, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([2, 144, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 288, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 384, 1, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([4, 96, 1, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([1, 120, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 144, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([8, 96, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([16, 40, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([8, 120, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([1, 768, 1, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([1, 192, 1, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([2, 96, 1, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([4, 240, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([4, 88, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([1, 192, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 96, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([4, 96, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([2, 72, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([8, 24, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([8, 96, 1, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([2, 288, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 192, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([4, 192, 1, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([4, 120, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([8, 72, 1, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([4, 72, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([4, 120, 1, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([1, 96, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([4, 24, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([3, 3],"float64"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([4, 16, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([1, 96, 1, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([2, 48, 1, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([1, 16, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([1, 48, 1, 1],"float32"), )
paddle.nn.functional.hardsigmoid(Tensor([1, 72, 1, 1],"float32"), slope=0.2, offset=0.5, )
paddle.nn.functional.hardsigmoid(Tensor([2, 2],"float32"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 2],"float64"), name=None, )
paddle.nn.functional.hardsigmoid(Tensor([2, 16, 1, 1],"float32"), name=None, )
paddle.nn.functional.hardtanh(Tensor([10, 20, 1],"float32"), -1.0, 1.0, )
paddle.nn.functional.hardtanh(Tensor([],"float32"), )
paddle.nn.functional.hardtanh(Tensor([3, 3, 3],"float64"), -3.4, 0, None, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 3],"float64"), 1, 1, None, )
paddle.nn.functional.hardtanh(x=Tensor([3, 3, 3],"float64"), max=3.5, min=2.3, )
paddle.nn.functional.hardtanh(x=Tensor([3, 3, 3],"float64"), max=1, min=1, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 3],"float64"), 0, 0, None, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 3],"float64"), 2.3, 3.5, None, )
paddle.nn.functional.hardtanh(x=Tensor([3, 3, 3],"float64"), max=0, min=0, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 3],"float64"), 3.3, -3.3, None, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 3],"float64"), 0, 1.3, None, )
paddle.nn.functional.hardtanh(x=Tensor([3, 3, 3],"float64"), max=1.3, min=0, )
paddle.nn.functional.hardtanh(x=Tensor([3, 3, 3],"float64"), max=-3.2, min=-3.2, )
paddle.nn.functional.hardtanh(x=Tensor([3, 3, 3],"float64"), max=0, min=-3.4, )
paddle.nn.functional.hardtanh(x=Tensor([3, 3, 3],"float64"), max=-3.3, min=3.3, )
paddle.nn.functional.hardtanh(Tensor([3, 3, 3],"float64"), -3.2, -3.2, None, )
paddle.nn.functional.hardtanh(x=Tensor([3],"float32"), )
paddle.nn.functional.hardtanh(Tensor([3],"float64"), -1.0, 1.0, None, )
paddle.nn.functional.hardtanh(Tensor([3],"float32"), -1.0, 1.0, None, )
paddle.nn.functional.hardtanh(x=Tensor([3],"float64"), )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 4],"float64"), Tensor([4, 3, 3, 4],"float64"), reduction="sum", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 4],"float64"), Tensor([4, 3, 3, 4],"float64"), reduction="none", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3, 4],"float64"), Tensor([4, 3, 3, 4],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 3],"float64"), Tensor([3, 3],"float64"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 3],"float64"), Tensor([3, 3],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 3],"float64"), Tensor([3, 3],"float64"), reduction="mean", margin=1.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([4, 3, 3],"float64"), Tensor([4, 3, 3],"float64"), reduction="mean", margin=-4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 3],"float64"), Tensor([3, 3],"float64"), reduction="mean", margin=4.0, name=None, )
paddle.nn.functional.hinge_embedding_loss(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), reduction="none", margin=1.0, name=None, )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 3],"float64"), weight=None, bias=None, data_format="NCHW", )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 3],"float32"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 3],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 1, 3],"float64"), )
paddle.nn.functional.instance_norm(x=Tensor([2, 2, 2, 3],"float64"), weight=None, bias=None, data_format="NCHW", use_input_stats=True, )
paddle.nn.functional.label_smooth(Tensor([8, 102],"float32"), epsilon=0.1, )
paddle.nn.functional.label_smooth(Tensor([4, 102],"float32"), epsilon=0.1, )
paddle.nn.functional.label_smooth(Tensor([128, 1, 2],"float32"), epsilon=0.1, )
paddle.nn.functional.label_smooth(Tensor([2, 3, 1],"float32"), prior_dist=None, epsilon=0.1, )
paddle.nn.functional.label_smooth(Tensor([3, 2, 2, 5],"float64"), epsilon=0.18833946207874966, )
paddle.nn.functional.label_smooth(Tensor([4, 3],"float64"), epsilon=0.5986189939413826, )
paddle.nn.functional.label_smooth(Tensor([3, 2, 2, 5],"float64"), epsilon=0.7642113030841614, )
paddle.nn.functional.label_smooth(Tensor([8, 1, 5],"float32"), epsilon=0.1, )
paddle.nn.functional.label_smooth(label=Tensor([2, 1, 10],"float32"), epsilon=0.1, )
paddle.nn.functional.label_smooth(Tensor([20, 1],"float32"), prior_dist=None, epsilon=0.1, )
paddle.nn.functional.label_smooth(Tensor([16, 1, 4],"float32"), epsilon=0.1, )
paddle.nn.functional.label_smooth(Tensor([3, 2, 2, 5],"float32"), epsilon=0.7336344401714625, )
paddle.nn.functional.label_smooth(Tensor([3, 2, 2, 5],"float32"), epsilon=0.20326138379662173, )
paddle.nn.functional.label_smooth(Tensor([4, 3],"float64"), epsilon=0.8211263365048883, )
paddle.nn.functional.label_smooth(Tensor([4, 3],"float32"), epsilon=0.1858912794612338, )
paddle.nn.functional.label_smooth(Tensor([4, 3],"float32"), epsilon=0.5436483450993637, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float32"), list[6,6,3,], weight=None, bias=Tensor([108],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float64"), list[6,6,3,], weight=Tensor([108],"float64"), bias=Tensor([108],"float64"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([4, 10, 4, 4],"float32"), list[10,4,4,], )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float64"), list[6,6,3,], weight=None, bias=Tensor([108],"float64"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([4, 10, 4, 4],"float32"), 4, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float32"), list[6,6,3,], weight=Tensor([108],"float32"), bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([4, 10, 4, 4],"float32"), tuple(10,4,4,), )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float32"), list[6,6,3,], weight=Tensor([108],"float32"), bias=Tensor([108],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 100],"float32"), list[100,], weight=Tensor([100],"float32"), bias=Tensor([100],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float32"), list[6,6,3,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float64"), list[6,6,3,], weight=None, bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([2, 6, 6, 3],"float64"), list[6,6,3,], weight=Tensor([108],"float64"), bias=None, epsilon=1e-05, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,2,3,), x=Tensor([2, 2, 2, 3],"float64"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,2,3,), x=Tensor([2, 2, 2, 3],"float32"), epsilon=1e-05, weight=None, bias=None, )
paddle.nn.functional.layer_norm(Tensor([1, 2, 2],"float32"), 2, epsilon=1e-05, weight=Tensor([2],"float32"), bias=Tensor([2],"float32"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(3,), x=Tensor([2, 3],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,3,), x=Tensor([2, 2, 3],"float64"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,2,3,), x=Tensor([2, 2, 2, 3],"float32"), )
paddle.nn.functional.layer_norm(Tensor([3, 4],"float32"), list[4,], Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,3,), x=Tensor([2, 2, 3],"float32"), )
paddle.nn.functional.layer_norm(Tensor([1, 2, 2],"float32"), 2, epsilon=1e-05, weight=None, bias=None, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,3,), x=Tensor([2, 2, 3],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,2,3,), x=Tensor([2, 2, 2, 3],"float64"), epsilon=1e-05, weight=None, bias=None, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,3,), x=Tensor([2, 2, 3],"float64"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,2,3,), x=Tensor([2, 2, 2, 3],"float32"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(3,), x=Tensor([2, 3],"float32"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(2,2,3,), x=Tensor([2, 2, 2, 3],"float64"), epsilon=1e-05, )
paddle.nn.functional.layer_norm(Tensor([3, 4],"float32"), list[4,], None, None, )
paddle.nn.functional.layer_norm(normalized_shape=tuple(3,), x=Tensor([2, 3],"float64"), )
paddle.nn.functional.layer_norm(normalized_shape=tuple(3,), x=Tensor([2, 3],"float64"), epsilon=1e-05, )
paddle.nn.functional.leaky_relu(Tensor([1, 512],"float32"), negative_slope=0.2, )
paddle.nn.functional.leaky_relu(Tensor([10, 20, 1],"float32"), 0.01, )
paddle.nn.functional.leaky_relu(Tensor([1, 1, 16, 16],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(Tensor([1, 2, 16, 16],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([1, 4, 8, 8],"float32"), 0, )
paddle.nn.functional.leaky_relu(Tensor([50],"float32"), 0.2, )
paddle.nn.functional.leaky_relu(x=Tensor([3],"float64"), )
paddle.nn.functional.leaky_relu(Tensor([10, 3, 3],"float64"), -1, None, )
paddle.nn.functional.leaky_relu(Tensor([3, 3, 3],"float64"), 0, None, )
paddle.nn.functional.leaky_relu(x=Tensor([3],"float32"), )
paddle.nn.functional.leaky_relu(x=Tensor([5],"float64"), negative_slope=-100, )
paddle.nn.functional.leaky_relu(x=Tensor([5],"float64"), )
paddle.nn.functional.leaky_relu(Tensor([3, 3, 3],"float64"), 0.01, None, )
paddle.nn.functional.leaky_relu(Tensor([],"float32"), )
paddle.nn.functional.leaky_relu(x=Tensor([5],"float64"), negative_slope=0, )
paddle.nn.functional.leaky_relu(Tensor([3, 3, 3],"float32"), 0.01, None, )
paddle.nn.functional.log_loss(Tensor([128, 1],"float32"), Tensor([128, 1],"float32"), )
paddle.nn.functional.log_loss(Tensor([128, 1],"float32"), Tensor([128, 1],"float32"), )
paddle.nn.functional.log_loss(Tensor([400, 1],"float32"), Tensor([400, 1],"float32"), )
paddle.nn.functional.log_loss(Tensor([400, 1],"float32"), Tensor([400, 1],"float32"), )
paddle.nn.functional.log_loss(Tensor([10, 1],"float32"), label=Tensor([10, 1],"float32"), epsilon=0.0001, name=None, )
paddle.nn.functional.log_loss(Tensor([10, 1],"float32"), label=Tensor([10, 1],"float32"), epsilon=0.0001, name=None, )
paddle.nn.functional.log_sigmoid(Tensor([3, 3, 3],"float64"), None, )
paddle.nn.functional.log_sigmoid(Tensor([3],"float64"), )
paddle.nn.functional.log_sigmoid(x=Tensor([4],"float32"), )
paddle.nn.functional.log_sigmoid(Tensor([],"float32"), )
paddle.nn.functional.log_sigmoid(Tensor([2],"float32"), )
paddle.nn.functional.log_sigmoid(Tensor([5, 5],"float64"), )
paddle.nn.functional.log_sigmoid(Tensor([3],"float32"), )
paddle.nn.functional.log_sigmoid(Tensor([3, 3, 3],"float32"), None, )
paddle.nn.functional.log_sigmoid(Tensor([10],"float64"), )
paddle.nn.functional.log_sigmoid(x=Tensor([4],"float64"), )
paddle.nn.functional.log_sigmoid(Tensor([1],"float32"), )
paddle.nn.functional.log_softmax(Tensor([2, 3, 4, 5],"float32"), -1, "float64", )
paddle.nn.functional.log_softmax(Tensor([2, 3, 4, 5],"float32"), -1, )
paddle.nn.functional.log_softmax(Tensor([128, 2],"float32"), axis=-1, )
paddle.nn.functional.log_softmax(Tensor([30, 5],"float32"), axis=1, )
paddle.nn.functional.log_softmax(Tensor([4, 102],"float32"), axis=-1, )
paddle.nn.functional.log_softmax(Tensor([28, 5],"float32"), axis=1, )
paddle.nn.functional.log_softmax(Tensor([2, 3, 4, 5],"float32"), -1, None, )
paddle.nn.functional.log_softmax(Tensor([8, 102],"float32"), axis=-1, )
paddle.nn.functional.log_softmax(Tensor([38, 5],"float32"), axis=1, )
paddle.nn.functional.log_softmax(x=Tensor([2, 3, 4],"float64"), axis=-1, )
paddle.nn.functional.log_softmax(x=Tensor([2, 3, 4],"float64"), axis=2, dtype="float32", )
paddle.nn.functional.log_softmax(Tensor([5, 2],"float32"), axis=1, )
paddle.nn.functional.log_softmax(x=Tensor([2, 3, 4],"float64"), axis=2, dtype="float64", )
paddle.nn.functional.log_softmax(Tensor([8, 3],"float32"), axis=1, )
paddle.nn.functional.log_softmax(Tensor([4, 2],"float32"), axis=1, )
paddle.nn.functional.log_softmax(Tensor([16, 4],"float32"), axis=-1, )
paddle.nn.functional.log_softmax(x=Tensor([2, 3, 4],"float64"), axis=2, )
paddle.nn.functional.log_softmax(x=Tensor([2, 3, 4],"float64"), )
paddle.nn.functional.log_softmax(Tensor([2, 3, 4],"float64"), -1, )
paddle.nn.functional.log_softmax(x=Tensor([2, 3, 4],"float64"), axis=2, dtype=type(numpy.float64), )
paddle.nn.functional.log_softmax(Tensor([],"float32"), )
paddle.nn.functional.log_softmax(Tensor([4, 6],"float32"), axis=1, )
paddle.nn.functional.log_softmax(x=Tensor([2, 3, 4],"float64"), axis=2, dtype=type(numpy.float32), )
paddle.nn.functional.log_softmax(Tensor([4, 4],"float32"), axis=1, )
paddle.nn.functional.log_softmax(Tensor([4, 3],"float32"), axis=1, )
paddle.nn.functional.log_softmax(Tensor([5, 3],"float32"), 1, )
paddle.nn.functional.log_softmax(Tensor([2, 3, 4],"float64"), 2, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), 7.0, 2, None, 1, True, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 32, 3],"float32"), 7.0, 2, None, 1, False, "NLC", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), norm_type=4, kernel_size=3, stride=2, padding=list[1,], )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float64"), 5.0, 5, 3, 0, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), 4.0, 3, 2, 1, False, "NCL", None, )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, )
paddle.nn.functional.lp_pool1d(Tensor([2, 32, 3],"float32"), norm_type=7, kernel_size=2, stride=2, padding=list[1,], ceil_mode=True, data_format="NLC", )
paddle.nn.functional.lp_pool1d(Tensor([2, 3, 32],"float64"), norm_type=5, kernel_size=5, stride=3, padding=list[0,], )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.2, "mean", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10],"float64"), 0.0, "sum", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.2, "sum", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10],"float64"), 0.0, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.0, "sum", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.2, "none", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.0, "sum", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.0, "none", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([128],"float32"), Tensor([128],"float32"), Tensor([128],"float32"), 0.5, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.0, "none", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10],"float64"), 0.2, "none", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.2, "sum", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.2, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.0, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.2, "none", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10],"float64"), 0.0, "none", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), 0.0, "mean", )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10],"float64"), 0.2, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([10, 10],"float64"), Tensor([10, 10],"float64"), Tensor([10],"float64"), 0.2, "sum", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([2, 2],"float64"), Tensor([2, 2],"float64"), Tensor([2, 2],"float64"), 0.0, "mean", None, )
paddle.nn.functional.margin_ranking_loss(Tensor([2, 2],"float64"), other=Tensor([2, 2],"float64"), label=Tensor([2, 2],"float64"), margin=0.0, reduction="mean", name=None, )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 6, 6, 3],"float32"), 3, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 4, 4],"float32"), list[3,3,3,], stride=1, padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 4, 4, 4, 4],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 6, 9, 6, 3],"float32"), list[5,5,5,], stride=list[1,1,1,], padding=list[0,0,0,], data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([1, 5, 6, 8, 3],"float32"), list[3,3,3,], stride=list[1,1,1,], padding=1, data_format="NDHWC", )
paddle.nn.functional.max_pool3d(Tensor([2, 3, 4, 4, 4],"float64"), kernel_size=list[3,3,3,], stride=list[1,1,1,], padding=list[0,0,0,], return_mask=False, ceil_mode=True, data_format="NCDHW", name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCL", output_size=None, name=None, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"int64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, output_size=tuple(1,3,16,), )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"int64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float32"), Tensor([1, 3, 8],"int64"), kernel_size=2, stride=2, output_size=list[1,3,16,], )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.max_unpool1d(Tensor([1, 3, 8],"float64"), Tensor([1, 3, 8],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 5],"float64"), Tensor([3, 2, 5, 5],"int32"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 8],"float64"), Tensor([2, 4, 7, 8],"int32"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([2, 4, 7, 8],"float64"), Tensor([2, 4, 7, 8],"int64"), list[2,2,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[14,16,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([3, 2, 5, 5],"float64"), Tensor([3, 2, 5, 5],"int64"), list[4,4,], stride=list[2,2,], padding=list[0,0,], data_format="NCHW", output_size=list[12,12,], name=None, )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, output_size=tuple(5,5,), )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int64"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"int64"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=None, output_size=list[1,1,4,5,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[1,1,7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 3, 3, 3],"float32"), Tensor([1, 3, 3, 3],"int32"), kernel_size=2, padding=0, output_size=list[7,7,], )
paddle.nn.functional.max_unpool2d(Tensor([1, 1, 2, 2],"float32"), Tensor([1, 1, 2, 2],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 1, 4, 5, 6],"float64"), Tensor([1, 1, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[8,10,12,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int64"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 4, 5, 6],"float64"), Tensor([1, 3, 4, 5, 6],"int32"), list[2,2,2,], stride=list[2,2,2,], padding=list[0,0,0,], data_format="NCDHW", output_size=list[7,9,11,], name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float32"), Tensor([1, 3, 2, 2, 3],"int64"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, padding=0, data_format="NCDHW", output_size=None, name=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=None, )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"int64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, output_size=list[1,3,4,4,6,], )
paddle.nn.functional.max_unpool3d(Tensor([1, 3, 2, 2, 3],"float64"), Tensor([1, 3, 2, 2, 3],"int32"), kernel_size=2, stride=2, )
paddle.nn.functional.maxout(Tensor([10, 9, 3, 3],"float64"), 3, 1, None, )
paddle.nn.functional.maxout(Tensor([2, 6, 5, 4],"float64"), 2, -1, )
paddle.nn.functional.maxout(Tensor([2, 6, 5, 4],"float64"), 2, 1, )
paddle.nn.functional.maxout(Tensor([2, 6, 5, 4],"float64"), 2, 1, None, )
paddle.nn.functional.maxout(x=Tensor([10, 9, 3, 3],"float64"), groups=3, )
paddle.nn.functional.maxout(x=Tensor([9, 2, 2, 6],"float64"), groups=2, axis=3, )
paddle.nn.functional.maxout(Tensor([9, 2, 2, 6],"float64"), 2, 3, None, )
paddle.nn.functional.mish(Tensor([2, 16],"float32"), name="mish", )
paddle.nn.functional.mish(Tensor([],"float32"), )
paddle.nn.functional.mse_loss(Tensor([99, 1],"float32"), Tensor([99, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([201, 1],"float32"), Tensor([201, 1],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([101, 1],"float32"), Tensor([101, 1],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([256, 1],"float32"), Tensor([256, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([50, 1],"float32"), Tensor([50, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([2, 96, 2],"float32"), Tensor([2, 96, 2],"float32"), reduction="none", )
paddle.nn.functional.mse_loss(Tensor([2, 10, 10],"float32"), Tensor([2, 10, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([251, 1],"float32"), Tensor([251, 1],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([2, 96, 2],"float32"), Tensor([2, 96, 2],"float32"), )
paddle.nn.functional.mse_loss(Tensor([128, 1],"float32"), Tensor([128, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([100],"float32"), Tensor([100, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([10, 10],"float32"), Tensor([10, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([89, 1],"float32"), Tensor([89, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([2, 10, 10],"float32"), Tensor([2, 10, 10],"float32"), "mean", )
paddle.nn.functional.mse_loss(Tensor([10, 10],"float32"), Tensor([10, 10],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([3, 96, 1],"float32"), Tensor([3, 96, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([10, 10],"float32"), Tensor([10, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([101, 1],"float32"), Tensor([101, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([125, 1],"float32"), Tensor([125, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([100, 1],"float32"), Tensor([100, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([400, 1],"float32"), Tensor([400, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([2, 10, 10],"float32"), Tensor([2, 10, 10],"float32"), "sum", )
paddle.nn.functional.mse_loss(Tensor([8],"float32"), Tensor([8],"float32"), )
paddle.nn.functional.mse_loss(Tensor([1],"float32"), Tensor([1, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([1, 1],"float32"), Tensor([1, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([32, 1],"float32"), Tensor([32, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([1, 1],"float32"), Tensor([4, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([4, 1],"float32"), Tensor([4, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.nn.functional.mse_loss(input=Tensor([2, 1],"float32"), label=Tensor([2, 1],"float32"), )
paddle.nn.functional.mse_loss(Tensor([15, 1],"float32"), Tensor([15, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([20, 1],"float32"), Tensor([20, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.nn.functional.mse_loss(Tensor([25, 1],"float32"), Tensor([25, 1],"float32"), "none", )
paddle.nn.functional.mse_loss(Tensor([5, 2],"float64"), label=Tensor([5, 2],"float64"), reduction="mean", name=None, )
paddle.nn.functional.mse_loss(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), reduction="mean", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), weight=Tensor([5, 5],"float64"), reduction="mean", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), reduction="none", weight=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), weight=None, reduction="none", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), weight=None, reduction="sum", name=None, )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), reduction="mean", weight=Tensor([5, 5],"float64"), )
paddle.nn.functional.multi_label_soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), reduction="sum", weight=None, )
paddle.nn.functional.multi_margin_loss(Tensor([5, 2],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="none", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([5, 2],"float64"), Tensor([5],"int64"), p=2, margin=1.0, weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_margin_loss(Tensor([5, 2],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="mean", name=None, )
paddle.nn.functional.multi_margin_loss(input=Tensor([5, 2],"float64"), label=Tensor([5],"int64"), p=2, margin=1.0, weight=None, reduction="mean", )
paddle.nn.functional.multi_margin_loss(Tensor([5, 2],"float64"), Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="sum", name=None, )
paddle.nn.functional.multi_margin_loss(input=Tensor([5, 2],"float64"), label=Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="sum", )
paddle.nn.functional.multi_margin_loss(input=Tensor([5, 2],"float64"), label=Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="mean", )
paddle.nn.functional.multi_margin_loss(input=Tensor([5, 2],"float64"), label=Tensor([5],"int64"), p=1, margin=1.0, weight=None, reduction="none", )
paddle.nn.functional.nll_loss(Tensor([10, 10],"float64"), Tensor([10],"int64"), weight=Tensor([10],"float64"), ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 3, 2, 4],"float32"), Tensor([5, 2, 4],"int64"), )
paddle.nn.functional.nll_loss(Tensor([5, 3, 5, 5],"float64"), Tensor([5, 5, 5],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([10, 10],"float64"), Tensor([10],"int64"), weight=Tensor([10],"float64"), ignore_index=-100, reduction="sum", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 3, 5, 5],"float64"), Tensor([5, 5, 5],"int64"), weight=None, ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([10, 10],"float64"), Tensor([10],"int64"), weight=None, ignore_index=-100, reduction="mean", name=None, )
paddle.nn.functional.nll_loss(Tensor([10, 10],"float64"), Tensor([10],"int64"), weight=None, ignore_index=-100, reduction="sum", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 3, 5, 5],"float64"), Tensor([5, 5, 5],"int64"), weight=Tensor([3],"float64"), ignore_index=-100, reduction="sum", name=None, )
paddle.nn.functional.nll_loss(Tensor([10, 10],"float64"), Tensor([10],"int64"), weight=Tensor([10],"float64"), ignore_index=-100, reduction="none", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 3, 5, 5],"float64"), Tensor([5, 5, 5],"int64"), weight=None, ignore_index=-100, reduction="sum", name=None, )
paddle.nn.functional.nll_loss(Tensor([5, 3],"float32"), Tensor([5],"int64"), )
paddle.nn.functional.nll_loss(Tensor([4, 4],"float32"), Tensor([4],"int64"), )
paddle.nn.functional.normalize(Tensor([60, 4],"float32"), axis=0, )
paddle.nn.functional.normalize(x=Tensor([4, 5, 6],"float64"), )
paddle.nn.functional.normalize(x=Tensor([4, 5, 6, 7],"float64"), )
paddle.nn.functional.npair_loss(Tensor([18, 6],"float32"), positive=Tensor([18, 6],"float32"), labels=Tensor([18],"float32"), l2_reg=0.002, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), 0, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), 1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), 0, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), -1, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), 2, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), 1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), -math.inf, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), -1, 1e-06, False, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), -math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float32"), Tensor([5],"float32"), math.inf, 1e-06, True, None, )
paddle.nn.functional.pairwise_distance(Tensor([5],"float64"), Tensor([5],"float64"), 2, 1e-06, False, None, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 4, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 4, 4],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_shuffle(Tensor([2, 9, 4, 4],"float32"), upscale_factor=3, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 4, 4, 9],"float64"), 3, "NHWC", )
paddle.nn.functional.pixel_shuffle(x=Tensor([4, 9, 4, 4],"float64"), upscale_factor=3, data_format="NCHW", )
paddle.nn.functional.pixel_shuffle(x=Tensor([2, 4, 4, 9],"float64"), upscale_factor=3, data_format="NHWC", )
paddle.nn.functional.pixel_shuffle(Tensor([4, 9, 4, 4],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_shuffle(Tensor([2, 4, 4, 9],"float64"), 3, "NHWC", None, )
paddle.nn.functional.pixel_shuffle(x=Tensor([2, 9, 4, 4],"float64"), upscale_factor=3, data_format="NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 12, 12, 1],"float64"), 3, "NHWC", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 12],"float64"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 12],"float32"), 3, "NCHW", )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 1, 12, 12],"float64"), 3, "NCHW", None, )
paddle.nn.functional.pixel_unshuffle(Tensor([2, 12, 12, 1],"float64"), 3, "NHWC", )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), log_input=False, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="sum", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float64"), Tensor([10, 2],"float64"), log_input=True, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"bfloat16"), )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="sum", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), log_input=True, full=True, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), log_input=True, full=True, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), log_input=True, full=False, epsilon=1e-08, reduction="mean", name=None, )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float32"), Tensor([10, 2],"float32"), log_input=False, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.poisson_nll_loss(Tensor([10, 2],"float64"), Tensor([10, 2],"float64"), log_input=True, full=False, epsilon=1e-08, reduction="mean", )
paddle.nn.functional.prelu(Tensor([2, 3, 3, 3],"float64"), Tensor([1],"float64"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([2, 3, 3, 3],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 4],"float32"), Tensor([1],"float32"), )
paddle.nn.functional.prelu(Tensor([],"float32"), Tensor([],"float32"), )
paddle.nn.functional.prelu(x=Tensor([1, 2, 3, 4],"float64"), weight=Tensor([1],"float64"), )
paddle.nn.functional.prelu(x=Tensor([1, 2, 3, 4],"float32"), weight=Tensor([1],"float32"), )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 4],"float32"), Tensor([1],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 4],"float32"), Tensor([2],"float32"), data_format="NCHW", )
paddle.nn.functional.prelu(x=Tensor([3, 3, 3],"float64"), weight=Tensor([3],"float64"), )
paddle.nn.functional.prelu(Tensor([1, 2, 3, 4],"float32"), Tensor([2],"float32"), )
paddle.nn.functional.relu6(x=Tensor([3],"float32"), )
paddle.nn.functional.relu6(x=Tensor([4],"float64"), )
paddle.nn.functional.relu6(Tensor([],"float32"), )
paddle.nn.functional.relu6(x=Tensor([3],"float64"), )
paddle.nn.functional.relu6(Tensor([3, 3, 3],"float64"), None, )
paddle.nn.functional.relu6(x=Tensor([3, 3, 3],"float64"), )
paddle.nn.functional.relu6(Tensor([3],"float32"), None, )
paddle.nn.functional.relu6(Tensor([4],"float64"), None, )
paddle.nn.functional.relu6(Tensor([3],"float64"), None, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 5],"float64"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([2, 3, 4, 5],"float32"), 0.1, 0.3, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 2, 3, 4],"float64"), 0.05, 0.25, training=False, )
paddle.nn.functional.rrelu(Tensor([1, 2, 3, 4],"float64"), 0.1, 0.33, training=False, )
paddle.nn.functional.selu(Tensor([3, 5, 5, 10],"float64"), 1.5, 2.0, None, )
paddle.nn.functional.selu(Tensor([3, 5, 5, 10],"float64"), 1.5, 2.0, )
paddle.nn.functional.selu(x=Tensor([2, 2],"float64"), )
paddle.nn.functional.selu(Tensor([3, 3, 3],"float64"), 1.0507009873554805, 0, None, )
paddle.nn.functional.selu(Tensor([2, 2],"float32"), 1.0507009873554805, 1.6732632423543772, None, )
paddle.nn.functional.selu(Tensor([],"float32"), )
paddle.nn.functional.selu(x=Tensor([2, 2],"float32"), )
paddle.nn.functional.selu(Tensor([3, 3, 3],"float64"), 1.0507009873554805, 1.6732632423543772, None, )
paddle.nn.functional.selu(x=Tensor([3, 3, 3],"float64"), alpha=0, scale=1.0507009873554805, )
paddle.nn.functional.selu(x=Tensor([3, 3, 3],"float64"), )
paddle.nn.functional.selu(Tensor([2, 2],"float64"), 1.0507009873554805, 1.6732632423543772, None, )
paddle.nn.functional.sequence_mask(Tensor([2, 2, 3, 3, 3],"float64"), maxlen=5, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([8],"int32"), maxlen=Tensor([],"int64"), dtype="float32", )
paddle.nn.functional.sequence_mask(Tensor([8],"int32"), )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=-1, dtype=VarType(int64), )
paddle.nn.functional.sequence_mask(Tensor([3],"int64"), )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(float64), )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(float32), )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=10, dtype=VarType(uint8), )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(uint8), )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=10, dtype=VarType(bool), )
paddle.nn.functional.sequence_mask(Tensor([3],"float32"), dtype=type(numpy.float64), )
paddle.nn.functional.sequence_mask(Tensor([8],"int32"), maxlen=4, dtype="float32", )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=10, dtype=VarType(int32), )
paddle.nn.functional.sequence_mask(Tensor([4],"int64"), 12, VarType(float64), None, )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=10, dtype=VarType(float64), )
paddle.nn.functional.sequence_mask(Tensor([4],"int64"), None, "float64", None, )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=10, dtype=VarType(float32), )
paddle.nn.functional.sequence_mask(Tensor([3],"int64"), dtype=type(numpy.float64), )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=10, dtype=VarType(int64), )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(int64), )
paddle.nn.functional.sequence_mask(Tensor([1],"int64"), 10, Dtype(float64), None, )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(bool), )
paddle.nn.functional.sequence_mask(Tensor([3],"float64"), maxlen=20, )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=Tensor([1],"int32"), dtype=VarType(int32), )
paddle.nn.functional.sequence_mask(Tensor([2, 3],"int64"), maxlen=30, dtype=type(numpy.int32), )
paddle.nn.functional.sequence_mask(Tensor([4],"int64"), 12, Dtype(float64), None, )
paddle.nn.functional.sequence_mask(Tensor([4],"int64"), 10, Dtype(float64), None, )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.25, gamma=3, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.25, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), Tensor([1],"float64"), alpha=0.5, gamma=0.0, reduction="mean", )
paddle.nn.functional.sigmoid_focal_loss(Tensor([2, 3, 4, 10],"float64"), Tensor([2, 3, 4, 10],"float64"), None, alpha=0.5, gamma=3, reduction="mean", )
paddle.nn.functional.silu(Tensor([8, 100],"float64"), )
paddle.nn.functional.silu(x=Tensor([3, 10, 3, 3],"float32"), )
paddle.nn.functional.silu(Tensor([4, 101],"float32"), )
paddle.nn.functional.silu(Tensor([8, 64],"float64"), )
paddle.nn.functional.silu(Tensor([3, 10, 3, 3],"float64"), None, )
paddle.nn.functional.silu(Tensor([8, 100],"float32"), )
paddle.nn.functional.silu(Tensor([5, 4, 8],"float32"), )
paddle.nn.functional.silu(Tensor([3, 10, 3, 3],"float32"), None, )
paddle.nn.functional.silu(Tensor([5, 6, 8],"float32"), )
paddle.nn.functional.silu(Tensor([10, 2, 8],"float32"), )
paddle.nn.functional.silu(Tensor([4, 101],"float64"), )
paddle.nn.functional.silu(x=Tensor([3, 10, 3, 3],"float64"), )
paddle.nn.functional.silu(Tensor([10, 10],"float32"), None, )
paddle.nn.functional.silu(Tensor([32, 20],"float32"), None, )
paddle.nn.functional.silu(Tensor([],"float32"), )
paddle.nn.functional.silu(Tensor([4, 1, 3, 3],"float64"), None, )
paddle.nn.functional.silu(x=Tensor([4, 1, 3, 3],"float64"), )
paddle.nn.functional.silu(Tensor([1, 2, 8],"float32"), )
paddle.nn.functional.silu(Tensor([1, 20],"float32"), None, )
paddle.nn.functional.silu(Tensor([1, 6, 8],"float32"), )
paddle.nn.functional.silu(Tensor([5, 2, 8],"float32"), )
paddle.nn.functional.silu(Tensor([1, 4, 8],"float32"), )
paddle.nn.functional.smooth_l1_loss(Tensor([110, 4],"float32"), Tensor([110, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([106, 4],"float32"), Tensor([106, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([40, 4],"float32"), Tensor([40, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([100, 4],"float32"), Tensor([100, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([39, 4],"float32"), Tensor([39, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([20, 4],"float32"), Tensor([20, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([118, 4],"float32"), Tensor([118, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([88, 4],"float32"), Tensor([88, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([48, 4],"float32"), Tensor([48, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([29, 4],"float32"), Tensor([29, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([75, 4],"float32"), Tensor([75, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([52, 4],"float32"), Tensor([52, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([14, 4],"float32"), Tensor([14, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([71, 4],"float32"), Tensor([71, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([59, 4],"float32"), Tensor([59, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([120, 4],"float32"), Tensor([120, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([37, 4],"float32"), Tensor([37, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([22, 4],"float32"), Tensor([22, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([94, 4],"float32"), Tensor([94, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.smooth_l1_loss(Tensor([78, 4],"float32"), Tensor([78, 4],"float32"), reduction="mean", delta=1.0, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"int64"), "mean", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"int64"), reduction="mean", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"int64"), reduction="none", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"int64"), reduction="sum", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), "none", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"int32"), "mean", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float32"), "none", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), reduction="none", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"int32"), "sum", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), "mean", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"int32"), reduction="none", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"int64"), "sum", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float32"), reduction="sum", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), reduction="sum", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float32"), reduction="none", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), "sum", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"int32"), reduction="mean", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float32"), "sum", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float32"), reduction="mean", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"int32"), reduction="sum", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"int32"), "none", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), reduction="mean", )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float32"), "mean", None, )
paddle.nn.functional.soft_margin_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"int64"), "none", None, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([12, 10],"float32"), label=Tensor([12, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([18, 32],"float32"), label=Tensor([18, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([8, 16],"float32"), label=Tensor([8, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([4, 128],"float32"), label=Tensor([4, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([100],"float32"), label=Tensor([1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([1, 10],"float32"), Tensor([1, 1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16],"float32"), Tensor([2, 1],"int64"), )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([2, 16],"float32"), Tensor([2, 1],"int64"), return_softmax=True, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([6, 10],"float32"), label=Tensor([6, 1],"int64"), soft_label=False, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([2, 4],"float64"), label=Tensor([2, 1],"int64"), return_softmax=True, )
paddle.nn.functional.softmax_with_cross_entropy(Tensor([5, 2],"float32"), label=Tensor([5, 1],"int64"), soft_label=False, ignore_index=-100, numeric_stable_mode=True, return_softmax=False, axis=-1, )
paddle.nn.functional.softmax_with_cross_entropy(logits=Tensor([2, 16],"float32"), label=Tensor([2, 1],"int64"), soft_label=False, )
paddle.nn.functional.softplus(x=Tensor([3, 3, 3],"float64"), beta=-1e-06, threshold=20, )
paddle.nn.functional.softplus(Tensor([3],"float64"), )
paddle.nn.functional.softplus(Tensor([4],"float64"), 1, 15, None, )
paddle.nn.functional.softplus(x=Tensor([4],"float32"), beta=1, threshold=15, )
paddle.nn.functional.softplus(x=Tensor([4],"float64"), beta=1, threshold=15, )
paddle.nn.functional.softplus(x=Tensor([3, 3, 3],"float64"), beta=1e-06, threshold=20, )
paddle.nn.functional.softplus(Tensor([10],"float64"), )
paddle.nn.functional.softplus(Tensor([2, 3, 2],"float64"), )
paddle.nn.functional.softplus(Tensor([1, 2, 3],"float64"), )
paddle.nn.functional.softplus(Tensor([],"float32"), )
paddle.nn.functional.softplus(Tensor([3, 3, 3],"float64"), 3, -5, None, )
paddle.nn.functional.softplus(x=Tensor([3, 3, 3],"float64"), beta=-3, threshold=20, )
paddle.nn.functional.softplus(x=Tensor([3, 3, 3],"float64"), beta=3, threshold=-5, )
paddle.nn.functional.softplus(Tensor([4],"float32"), 1, 15, None, )
paddle.nn.functional.softplus(Tensor([8, 1],"float32"), )
paddle.nn.functional.softplus(Tensor([2, 3],"float32"), )
paddle.nn.functional.softplus(Tensor([3],"float32"), )
paddle.nn.functional.softplus(Tensor([3, 3, 3],"float64"), 3, 5, None, )
paddle.nn.functional.softplus(Tensor([3, 3, 3],"float64"), -3, 20, None, )
paddle.nn.functional.softplus(Tensor([2, 3],"float64"), )
paddle.nn.functional.softplus(x=Tensor([3, 3, 3],"float64"), beta=2, threshold=20, )
paddle.nn.functional.softplus(x=Tensor([3, 3, 3],"float64"), beta=3, threshold=5, )
paddle.nn.functional.softplus(Tensor([3, 3, 3],"float64"), -1e-06, 20, None, )
paddle.nn.functional.softplus(Tensor([3, 3, 3],"float64"), 1e-06, 20, None, )
paddle.nn.functional.softplus(Tensor([1, 2, 3],"float32"), )
paddle.nn.functional.softplus(Tensor([3, 3, 3],"float64"), 2, 20, None, )
paddle.nn.functional.softshrink(Tensor([],"float32"), )
paddle.nn.functional.softshrink(Tensor([3, 3, 3],"float64"), 0, None, )
paddle.nn.functional.softshrink(x=Tensor([3, 3, 3],"float64"), threshold=0, )
paddle.nn.functional.softshrink(Tensor([3, 3, 3],"float64"), 5, None, )
paddle.nn.functional.softshrink(x=Tensor([3, 3, 3],"float64"), threshold=5, )
paddle.nn.functional.softshrink(Tensor([4],"float32"), 0.5, None, )
paddle.nn.functional.softshrink(x=Tensor([4],"float64"), threshold=0.5, )
paddle.nn.functional.softshrink(Tensor([4],"float64"), 0.5, None, )
paddle.nn.functional.softshrink(x=Tensor([4],"float32"), threshold=0.5, )
paddle.nn.functional.softsign(x=Tensor([3, 3, 3],"float64"), )
paddle.nn.functional.softsign(Tensor([],"float32"), )
paddle.nn.functional.softsign(x=Tensor([4],"float64"), )
paddle.nn.functional.softsign(x=Tensor([4],"float32"), )
paddle.nn.functional.softsign(Tensor([4],"float32"), None, )
paddle.nn.functional.softsign(Tensor([3, 3, 3],"float64"), None, )
paddle.nn.functional.softsign(Tensor([4],"float64"), None, )
paddle.nn.functional.square_error_cost(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.nn.functional.square_error_cost(input=Tensor([2, 1],"float32"), label=Tensor([2, 1],"float32"), )
paddle.nn.functional.square_error_cost(Tensor([3, 2, 1, 2],"float64"), label=Tensor([3, 2, 1, 2],"float64"), )
paddle.nn.functional.swish(Tensor([3, 10, 3, 3],"float64"), None, )
paddle.nn.functional.swish(Tensor([128, 6, 1, 1],"float32"), )
paddle.nn.functional.swish(x=Tensor([3, 10, 3, 3],"float32"), )
paddle.nn.functional.swish(Tensor([3, 10, 3, 3],"float32"), None, )
paddle.nn.functional.swish(x=Tensor([3, 10, 3, 3],"float64"), )
paddle.nn.functional.tanh(Tensor([13, 32],"float32"), )
paddle.nn.functional.tanh(Tensor([25, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([15, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([13, 64],"float32"), None, )
paddle.nn.functional.tanh(Tensor([13, 64],"float32"), )
paddle.nn.functional.tanh(Tensor([13, 16],"float32"), )
paddle.nn.functional.tanh(Tensor([13, 24],"float32"), None, )
paddle.nn.functional.tanh(Tensor([13, 32],"float32"), None, )
paddle.nn.functional.tanh(Tensor([13, 16],"float32"), None, )
paddle.nn.functional.tanh(Tensor([2, 60],"float32"), None, )
paddle.nn.functional.tanh(Tensor([16, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([4, 36],"float32"), None, )
paddle.nn.functional.tanh(Tensor([16, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([4, 50],"float32"), None, )
paddle.nn.functional.tanh(Tensor([13, 24],"float32"), )
paddle.nn.functional.tanh(Tensor([10, 32],"float32"), None, )
paddle.nn.functional.tanh(Tensor([5, 32],"float32"), None, )
paddle.nn.functional.tanh(Tensor([14, 32],"float32"), None, )
paddle.nn.functional.tanh(Tensor([7, 32],"float32"), None, )
paddle.nn.functional.tanh(Tensor([4, 32],"float32"), None, )
paddle.nn.functional.tanh(Tensor([13, 36],"float32"), None, )
paddle.nn.functional.tanh(Tensor([6, 36],"float32"), None, )
paddle.nn.functional.tanh(Tensor([48, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([36, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([40, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([12, 32],"float32"), None, )
paddle.nn.functional.tanh(Tensor([25, 20],"float32"), )
paddle.nn.functional.tanh(Tensor([11, 32],"float32"), None, )
paddle.nn.functional.tanh(Tensor([1, 4],"float32"), None, )
paddle.nn.functional.tanh(Tensor([2, 8],"float32"), None, )
paddle.nn.functional.tanh(Tensor([4, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([1, 64],"float32"), None, )
paddle.nn.functional.tanh(Tensor([1, 32],"float32"), None, )
paddle.nn.functional.tanh(Tensor([1, 16],"float32"), )
paddle.nn.functional.tanh(Tensor([1, 8],"float32"), None, )
paddle.nn.functional.tanh(Tensor([],"float32"), )
paddle.nn.functional.tanh(Tensor([1, 36],"float32"), None, )
paddle.nn.functional.tanh(Tensor([2, 36],"float32"), None, )
paddle.nn.functional.tanh(Tensor([1, 20],"float32"), None, )
paddle.nn.functional.tanh(Tensor([2, 32],"float32"), None, )
paddle.nn.functional.tanhshrink(x=Tensor([4],"float32"), )
paddle.nn.functional.tanhshrink(Tensor([3, 3, 3],"float64"), None, )
paddle.nn.functional.tanhshrink(x=Tensor([4],"float64"), )
paddle.nn.functional.tanhshrink(x=Tensor([3, 3, 3],"float64"), )
paddle.nn.functional.tanhshrink(Tensor([4],"float32"), None, )
paddle.nn.functional.tanhshrink(Tensor([],"float32"), )
paddle.nn.functional.tanhshrink(Tensor([4],"float64"), None, )
paddle.nn.functional.temporal_shift(x=Tensor([4, 4, 3, 3],"float64"), seg_num=4, )
paddle.nn.functional.temporal_shift(x=Tensor([2, 4, 3, 3],"float64"), seg_num=2, shift_ratio=0.4, data_format="NHWC", )
paddle.nn.functional.temporal_shift(x=Tensor([6, 4, 2, 2],"float64"), seg_num=2, )
paddle.nn.functional.thresholded_relu(Tensor([10, 1, 4, 3],"float64"), -1, 0.0, None, )
paddle.nn.functional.thresholded_relu(Tensor([10, 1, 4, 3],"float64"), 0, 0.0, None, )
paddle.nn.functional.thresholded_relu(x=Tensor([10, 1, 4, 3],"float64"), threshold=-1, )
paddle.nn.functional.thresholded_relu(x=Tensor([10, 1, 4, 3],"float64"), threshold=0, )
paddle.nn.functional.thresholded_relu(Tensor([10, 20, 1],"float32"), 1.0, )
paddle.nn.functional.thresholded_relu(Tensor([],"float32"), )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=False, reduction="sum", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=True, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=False, reduction="none", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="sum", )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=0.3, swap=True, reduction="mean", )
paddle.nn.functional.triplet_margin_with_distance_loss(Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), Tensor([5, 5],"float64"), margin=0.3, swap=False, reduction="mean", name=None, )
paddle.nn.functional.triplet_margin_with_distance_loss(input=Tensor([5, 5],"float64"), positive=Tensor([5, 5],"float64"), negative=Tensor([5, 5],"float64"), distance_function=None, margin=0.3, swap=False, reduction="none", )
paddle.nn.functional.unfold(x=Tensor([2, 3, 10, 10],"float64"), kernel_sizes=list[2,4,], paddings=1, strides=2, )
paddle.nn.functional.unfold(Tensor([2, 3, 10, 10],"float64"), kernel_sizes=list[3,3,], strides=1, paddings=0, dilations=1, name=None, )
paddle.nn.functional.unfold(x=Tensor([2, 3, 10, 10],"float64"), kernel_sizes=list[2,4,], paddings=1, )
paddle.nn.functional.unfold(Tensor([2, 3, 10, 10],"float64"), kernel_sizes=list[3,3,], strides=1, paddings=1, dilations=1, name=None, )
paddle.nn.functional.unfold(Tensor([2, 3, 10, 10],"float64"), kernel_sizes=3, strides=1, paddings=0, dilations=1, name=None, )
paddle.nn.functional.unfold(x=Tensor([2, 3, 10, 10],"float32"), kernel_sizes=3, )
paddle.nn.functional.unfold(x=Tensor([2, 3, 10, 10],"float64"), kernel_sizes=3, )
paddle.nn.functional.unfold(Tensor([2, 3, 10, 10],"float32"), kernel_sizes=3, strides=1, paddings=0, dilations=1, name=None, )
paddle.nn.functional.unfold(Tensor([2, 3, 10, 10],"float64"), kernel_sizes=list[2,4,], strides=1, paddings=1, dilations=1, name=None, )
paddle.nn.functional.unfold(Tensor([2, 3, 10, 10],"float64"), kernel_sizes=list[2,4,], strides=2, paddings=1, dilations=1, name=None, )
paddle.nn.functional.unfold(x=Tensor([2, 3, 10, 10],"float64"), kernel_sizes=list[3,3,], )
paddle.nn.functional.unfold(x=Tensor([2, 3, 10, 10],"float64"), kernel_sizes=list[3,3,], paddings=1, )
paddle.nn.utils.vector_to_parameters(Tensor([165],"float32"), list[Tensor([10, 15],"float32"),Tensor([15],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([99],"float32"), list[Tensor([3, 2, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([387],"float32"), list[Tensor([3, 2, 4, 4, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([6],"float32"), list[Tensor([2, 2],"float32"),Tensor([2],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([27],"float32"), list[Tensor([3, 2, 4],"float32"),Tensor([3],"float32"),], )
paddle.nn.utils.vector_to_parameters(Tensor([30],"float32"), list[Tensor([10, 3],"float32"),], )
paddle.not_equal(Tensor([14, 7],"int32"), Tensor([14, 7],"int32"), )
paddle.not_equal(Tensor([13, 7],"int64"), Tensor([13, 7],"int64"), )
paddle.not_equal(Tensor([52],"int64"), Tensor([52],"int64"), )
paddle.not_equal(Tensor([10, 20, 1],"float32"), Tensor([10, 20, 1],"float32"), )
paddle.not_equal(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.not_equal(Tensor([4],"int64"), Tensor([4],"int64"), )
paddle.not_equal(Tensor([20],"int64"), Tensor([20],"int64"), )
paddle.not_equal(Tensor([4],"float32"), Tensor([4],"float32"), )
paddle.not_equal(Tensor([4],"float16"), Tensor([4],"float16"), )
paddle.not_equal(Tensor([],"float32"), Tensor([],"float32"), )
paddle.not_equal(Tensor([],"float64"), Tensor([],"float64"), )
paddle.not_equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([1, 1, 1, 1, 3, 3],"float64"), )
paddle.not_equal(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.not_equal(x=Tensor([1, 2, 1, 3],"float64"), y=Tensor([1, 2, 3],"float64"), )
paddle.not_equal(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.not_equal(Tensor([2],"float32"), Tensor([],"float32"), )
paddle.not_equal(x=Tensor([1, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.not_equal(x=Tensor([1, 3],"float64"), y=Tensor([1, 1, 1, 3, 3],"float64"), )
paddle.not_equal(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.not_equal(x=Tensor([3, 3],"float64"), y=Tensor([3],"float64"), )
paddle.not_equal(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.not_equal(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.not_equal(Tensor([14, 7],"int64"), Tensor([],"int64"), )
paddle.not_equal(x=Tensor([3, 3],"float32"), y=Tensor([3, 3],"float32"), )
paddle.not_equal(x=Tensor([1, 1, 1, 1, 3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.not_equal(Tensor([1],"float64"), Tensor([],"float64"), )
paddle.not_equal(Tensor([6],"float32"), Tensor([6],"float32"), )
paddle.not_equal(x=Tensor([1],"float64"), y=Tensor([4],"float64"), )
paddle.not_equal(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.not_equal(x=Tensor([3, 3],"float64"), y=Tensor([1, 3],"float64"), )
paddle.not_equal(x=Tensor([3, 3],"float64"), y=Tensor([3, 3],"float64"), )
paddle.not_equal(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.numel(Tensor([4, 90, 1],"float32"), )
paddle.numel(Tensor([16, 22, 1],"float32"), )
paddle.numel(Tensor([4, 92, 1],"float32"), )
paddle.numel(Tensor([4, 211, 1],"float32"), )
paddle.numel(Tensor([4, 121, 1],"float32"), )
paddle.numel(Tensor([4, 64, 1],"float32"), )
paddle.numel(Tensor([4, 40, 1],"float32"), )
paddle.numel(Tensor([16, 38, 1],"float32"), )
paddle.numel(Tensor([16, 39, 1],"float32"), )
paddle.numel(Tensor([2, 3, 36],"float32"), )
paddle.numel(Tensor([5, 10, 15],"float32"), )
paddle.numel(Tensor([4, 77, 1],"float32"), )
paddle.numel(Tensor([2, 2, 36],"float32"), )
paddle.numel(Tensor([4, 50, 1],"float32"), )
paddle.numel(Tensor([16, 40, 1],"float32"), )
paddle.numel(Tensor([16, 19, 1],"float32"), )
paddle.numel(Tensor([4, 163, 1],"float32"), )
paddle.numel(Tensor([8, 52, 1],"float32"), )
paddle.numel(Tensor([4, 99, 1],"float32"), )
paddle.numel(Tensor([16, 37, 1],"float32"), )
paddle.numel(Tensor([1, 4, 36],"float32"), )
paddle.numel(Tensor([16, 16, 1],"float32"), )
paddle.numel(Tensor([16, 11, 1],"float32"), )
paddle.numel(Tensor([8, 44, 1],"float32"), )
paddle.numel(Tensor([16, 50, 1],"float32"), )
paddle.numel(Tensor([8, 32, 1, 1],"float32"), )
paddle.numel(Tensor([4, 26, 1],"float32"), )
paddle.numel(Tensor([384, 1, 1, 1],"float32"), )
paddle.numel(Tensor([1, 3, 4, 10],"float64"), )
paddle.numel(Tensor([8, 42, 1],"float32"), )
paddle.numel(Tensor([4, 65, 1],"float32"), )
paddle.numel(Tensor([4, 135, 1],"float32"), )
paddle.numel(Tensor([4, 53, 1],"float32"), )
paddle.numel(Tensor([4, 39, 1],"float32"), )
paddle.numel(Tensor([4, 234, 1],"float32"), )
paddle.numel(Tensor([4, 56, 1],"float32"), )
paddle.numel(Tensor([8, 16, 1, 1],"float32"), )
paddle.numel(Tensor([16, 12, 1],"float32"), )
paddle.numel(Tensor([4, 97, 1],"float32"), )
paddle.numel(Tensor([8, 48, 1],"float32"), )
paddle.numel(Tensor([16, 18, 1],"float32"), )
paddle.numel(Tensor([8, 28, 1],"float32"), )
paddle.numel(Tensor([8, 36, 1],"float32"), )
paddle.numel(Tensor([64, 13, 1],"float32"), )
paddle.numel(Tensor([2, 9, 36],"float32"), )
paddle.numel(Tensor([8, 19, 1],"float32"), )
paddle.numel(Tensor([8, 43, 1],"float32"), )
paddle.numel(Tensor([8, 8, 3, 3],"float32"), )
paddle.numel(Tensor([8, 54, 1],"float32"), )
paddle.numel(Tensor([64, 14, 1],"float32"), )
paddle.numel(Tensor([16, 45, 1],"float32"), )
paddle.numel(Tensor([2, 7, 36],"float32"), )
paddle.numel(Tensor([4, 43, 1],"float32"), )
paddle.numel(Tensor([8, 39, 1],"float32"), )
paddle.numel(Tensor([8, 23, 1],"float32"), )
paddle.numel(Tensor([4, 166, 1],"float32"), )
paddle.numel(Tensor([8, 14, 1],"float32"), )
paddle.numel(Tensor([1, 8, 36],"float32"), )
paddle.numel(Tensor([4, 176, 1],"float32"), )
paddle.numel(Tensor([16, 52, 1],"float32"), )
paddle.numel(Tensor([16, 34, 1],"float32"), )
paddle.numel(Tensor([4, 1, 36],"float32"), )
paddle.numel(Tensor([4, 2, 27],"float32"), )
paddle.numel(Tensor([8, 45, 1],"float32"), )
paddle.numel(Tensor([256],"float32"), )
paddle.numel(Tensor([2, 11, 36],"float32"), )
paddle.numel(Tensor([4, 83, 1],"float32"), )
paddle.numel(Tensor([8, 13, 1],"float32"), )
paddle.numel(Tensor([16, 36, 1],"float32"), )
paddle.numel(Tensor([1, 14, 36],"float32"), )
paddle.numel(Tensor([8, 30, 1],"float32"), )
paddle.numel(Tensor([1, 3, 36],"float32"), )
paddle.numel(Tensor([1, 9, 36],"float32"), )
paddle.numel(Tensor([4, 33, 1],"float32"), )
paddle.numel(Tensor([4, 45, 1],"float32"), )
paddle.numel(Tensor([16, 33, 1],"float32"), )
paddle.numel(Tensor([4, 78, 1],"float32"), )
paddle.numel(Tensor([8, 25, 1],"float32"), )
paddle.numel(Tensor([4, 48, 1],"float32"), )
paddle.numel(Tensor([8, 33, 1],"float32"), )
paddle.numel(Tensor([4, 2, 36],"float32"), )
paddle.numel(Tensor([4, 119, 1],"float32"), )
paddle.numel(Tensor([2, 12, 36],"float32"), )
paddle.ones(list[13,14,], )
paddle.ones(list[1,1,], dtype=Dtype(int64), )
paddle.ones(list[1,1,512,512,], dtype="int64", )
paddle.ones(tuple(30,17,), )
paddle.ones(list[3,4,], dtype=VarType(float16), )
paddle.ones(list[52,], dtype="float32", )
paddle.ones(list[16,], dtype="float32", )
paddle.ones(shape=list[1,2,3,4,], dtype=type(bool), )
paddle.ones(shape=list[3,2,2,], dtype=Dtype(float32), )
paddle.ones(shape=Tensor([0],"int32"), )
paddle.ones(tuple(2,1,), dtype=Dtype(int64), )
paddle.ones(shape=list[7,6,5,4,3,2,], dtype="float32", )
paddle.ones(list[1100,1100,], )
paddle.ones(list[1,100,], dtype=Dtype(float64), )
paddle.ones(list[2,1,52,52,], dtype="bool", )
paddle.ones(list[2,1,1,46,], dtype="bool", )
paddle.ones(shape=tuple(63,63,), dtype="float16", )
paddle.ones(list[15,], dtype="float32", )
paddle.ones(list[14,7,], dtype=Dtype(int64), )
paddle.ones(tuple(1,1,64,64,), dtype=Dtype(float32), )
paddle.ones(list[4,1,156,156,], dtype="bool", )
paddle.ones(list[499,499,], dtype=Dtype(float32), )
paddle.ones(tuple(1,11,), dtype=Dtype(bool), )
paddle.ones(list[119,], dtype="float32", )
paddle.ones(list[2,128,], dtype=Dtype(int64), )
paddle.ones(list[2,1,1,67,], dtype="bool", )
paddle.ones(shape=list[45,], )
paddle.ones(list[88,], dtype="float32", )
paddle.ones(tuple(3,3,3,), dtype="float64", )
paddle.ones(tuple(1,1,298,364,), dtype=Dtype(float32), )
paddle.ones(list[2,1,57,57,], )
paddle.ones(tuple(30,61,), )
paddle.ones(8, )
paddle.ones(list[1,1,2048,2048,], )
paddle.ones(tuple(4,1,), dtype=Dtype(float64), )
paddle.ones(tuple(2,81,), )
paddle.ones(tuple(1,169,), )
paddle.ones(list[3,2,], dtype="int32", )
paddle.ones(shape=Tensor([2],"int32"), dtype="int32", )
paddle.ones(shape=tuple(2,1,32768,32768,), dtype="float16", )
paddle.ones(tuple(3,3,), dtype="float64", )
paddle.ones(list[36,], dtype="float32", )
paddle.ones(tuple(1024,2,), )
paddle.ones(list[], dtype="float32", )
paddle.ones(list[71,], dtype="float32", )
paddle.ones(tuple(10,57,), )
paddle.ones(list[2,1,1,100,], dtype="bool", )
paddle.ones(shape=list[1,1,1,4096,], dtype="float16", )
paddle.ones(shape=list[2,3,3,2,], dtype=Dtype(float64), )
paddle.ones(tuple(30,97,), )
paddle.ones(tuple(1,20,), dtype=Dtype(bool), )
paddle.ones(tuple(2,4,3,2,), dtype="int64", )
paddle.ones(tuple(1,352,407,3,), dtype=Dtype(float32), )
paddle.ones(shape=tuple(112,112,), dtype="float16", )
paddle.ones(shape=list[3,4,5,], dtype="float32", )
paddle.ones(tuple(8,113,), )
paddle.ones(list[0,1,], )
paddle.ones(tuple(38,38,), dtype="bool", )
paddle.ones(list[476,476,], )
paddle.ones(shape=10, dtype="int64", )
paddle.ones(list[500,500,], )
paddle.ones(shape=list[30,30,], )
paddle.ones(list[1024,2048,], dtype="float32", name="data", )
paddle.ones(list[2,1,1,71,], dtype="bool", )
paddle.ones(list[1,20,2,], dtype=Dtype(float32), )
paddle.ones(tuple(10,33,), )
paddle.ones(shape=list[3,], dtype="float32", )
paddle.ones(shape=Tensor([1],"int32"), dtype=type(numpy.int64), )
paddle.ones(list[2,1,1,42,], dtype="bool", )
paddle.ones(list[9,], dtype="float32", )
paddle.ones(list[2,1,1,43,], dtype="bool", )
paddle.ones(list[12,10,], dtype="int64", )
paddle.ones(tuple(3,3,), dtype="int32", )
paddle.ones(tuple(1,69,), )
paddle.ones(list[1,18,], VarType(float32), )
paddle.ones(tuple(1,1,280,350,), dtype=Dtype(float32), )
paddle.ones(tuple(1007,1007,), dtype="bool", )
paddle.ones(list[13,7,], dtype=Dtype(int64), )
paddle.ones(tuple(302,302,), dtype="bool", )
paddle.ones(list[89,], dtype="float32", )
paddle.ones(list[2,1,1,75,], dtype="bool", )
paddle.ones(tuple(8,8,), dtype="float32", )
paddle.ones(list[4,2,], )
paddle.ones(list[2,1,39,39,], )
paddle.ones(list[51,], dtype="float32", )
paddle.ones(list[64,], dtype="float32", )
paddle.ones(list[6,1,3,1,], dtype=Dtype(int64), )
paddle.ones(list[4,1,], dtype="float32", )
paddle.ones(tuple(1,1024,), dtype=Dtype(bool), )
paddle.ones(tuple(14,1,), dtype="int64", )
paddle.ones(list[1,1,2048,2048,], dtype="bool", )
paddle.ones(tuple(1,28,28,3,), dtype=Dtype(float32), )
paddle.ones(tuple(2,3,40,1,), dtype=Dtype(float64), )
paddle.ones(list[1,1,20,2,], dtype=Dtype(float32), )
paddle.ones(200, dtype=VarType(float32), )
paddle.ones(list[106,], dtype="float32", )
paddle.ones(shape=list[1,], dtype="float32", )
paddle.ones(list[4,5,], Dtype(int32), )
paddle.ones(tuple(512,512,), dtype="float32", )
paddle.ones(list[13,9,], "int64", )
paddle.ones(list[2,1,1,74,], dtype="bool", )
paddle.ones(list[61,], dtype="float32", )
paddle.ones(4, dtype="float64", )
paddle.ones(tuple(1,217,), )
paddle.ones(tuple(2,85,), )
paddle.ones(list[112,128,], dtype="bool", )
paddle.ones(list[2,1,1,39,], dtype="bool", )
paddle.ones(list[45,], dtype="float32", )
paddle.ones(tuple(52,52,), dtype="bool", )
paddle.ones(list[4,1,], dtype=Dtype(int64), )
paddle.ones(list[6,6,], dtype=Dtype(float32), )
paddle.ones(list[13,7,], dtype=Dtype(int32), )
paddle.ones(list[2,], dtype="int64", )
paddle.ones(shape=list[2,4,3,3,], dtype=VarType(float64), )
paddle.ones(shape=tuple(30,30,), dtype="float16", )
paddle.ones(tuple(2,2,), )
paddle.ones(list[2,1,1,94,], dtype="bool", )
paddle.ones(tuple(30,5,), )
paddle.ones(shape=tuple(200,2,), dtype="float32", )
paddle.ones(list[78,], dtype="float32", )
paddle.ones(shape=list[324,], )
paddle.ones(list[74,], dtype="float32", )
paddle.ones(list[2,1,1,90,], dtype="bool", )
paddle.ones(list[2,1,45,45,], dtype="bool", )
paddle.ones(list[4,11,], dtype="bool", )
paddle.ones(shape=tuple(5,10,), )
paddle.ones(tuple(3,4,5,6,), dtype="float32", )
paddle.ones(16, dtype="float64", )
paddle.ones(tuple(4,4,16,), dtype="float32", )
paddle.ones(list[1,60,128,], dtype=Dtype(float16), )
paddle.ones(list[41,], dtype="float32", )
paddle.ones(shape=list[6,1,], )
paddle.ones(tuple(4,4,), dtype="bool", )
paddle.ones(list[13,1000,], dtype=Dtype(int32), )
paddle.ones(tuple(1,1,32,26,), dtype=Dtype(float32), )
paddle.ones(shape=list[3,4,5,], dtype=Dtype(float32), )
paddle.ones(tuple(1,73,), )
paddle.ones(tuple(4,61,), )
paddle.ones(list[14,7,], dtype="int64", )
paddle.ones(list[1,90,128,], dtype=Dtype(float16), )
paddle.ones(list[], Dtype(float16), )
paddle.ones(shape=list[2,3,4,], dtype="int64", )
paddle.ones(shape=list[58584,], )
paddle.ones(tuple(4,25,), )
paddle.ones(list[118,], dtype="float32", )
paddle.ones(list[80,128,], dtype="bool", )
paddle.ones(shape=tuple(74,74,), dtype=Dtype(float16), )
paddle.ones(list[2,1,57,57,], dtype="bool", )
paddle.ones(list[40,], dtype="float32", )
paddle.ones(list[2,1,1,91,], dtype="bool", )
paddle.ones(shape=list[2,3,3,2,], dtype=VarType(float64), )
paddle.ones(shape=list[2,1,1,4096,], dtype="float16", )
paddle.ones(shape=tuple(110,110,), dtype="float16", )
paddle.ones(tuple(10,2,), )
paddle.ones(list[3,3,3,3,], )
paddle.ones(tuple(2,), dtype="int32", )
paddle.ones(tuple(6,45,), )
paddle.ones(tuple(3,2,), )
paddle.ones(list[4,1,168,168,], )
paddle.ones(list[1,20,20,], )
paddle.ones(tuple(13,7,), dtype="int64", )
paddle.ones(list[2,1,1,80,], dtype="bool", )
paddle.ones(tuple(10,25,), )
paddle.ones(tuple(12,7,), )
paddle.ones(list[2,2,], )
paddle.ones(list[2,], dtype="int32", )
paddle.ones(shape=list[4,3,], )
paddle.ones(list[4,1,1,1,], dtype=Dtype(int64), )
paddle.ones(list[1,1,1,22,], dtype="bool", )
paddle.ones(tuple(8,33,), )
paddle.ones(shape=tuple(48,), dtype="int64", )
paddle.ones(tuple(8550,), dtype=VarType(float32), )
paddle.ones(shape=tuple(1000,1,), dtype=type(numpy.int8), )
paddle.ones(list[4,1,1,1,], )
paddle.ones(tuple(1,32,26,3,), dtype=Dtype(float32), )
paddle.ones(shape=tuple(43,43,), dtype="float16", )
paddle.ones(shape=list[38,10,], )
paddle.ones(list[2,1,1,99,], dtype="bool", )
paddle.ones(list[6,1,5,5,], )
paddle.ones(list[28,], dtype="float32", )
paddle.ones(tuple(2,1,10,10,), dtype="bool", )
paddle.ones(list[5,], dtype="float32", )
paddle.ones(1, dtype="float32", )
paddle.ones(list[1024,2048,], dtype="float32", name="bias", )
paddle.ones(shape=list[1,1,1,32768,], dtype="float16", )
paddle.ones(list[91,128,], dtype="bool", )
paddle.ones(list[95,], dtype="float32", )
paddle.ones(list[12,], dtype="float32", )
paddle.ones(shape=tuple(111,111,), dtype="float16", )
paddle.ones(tuple(2,20,20,), dtype=Dtype(int32), )
paddle.ones(shape=tuple(32,32,), dtype="float16", )
paddle.ones(list[2,1,38,38,], dtype="bool", )
paddle.ones(list[107,], dtype="float32", )
paddle.ones(shape=list[1,4,], )
paddle.ones(list[6,], Dtype(int32), )
paddle.ones(list[30,], dtype="float32", )
paddle.ones(list[1,17,], dtype=Dtype(float64), )
paddle.ones(shape=list[4,2,1,1,], dtype=Dtype(float64), )
paddle.ones(list[1024,], dtype="float32", )
paddle.ones(list[77,], dtype="float32", )
paddle.ones(list[31,], dtype="float32", )
paddle.ones(list[29,], dtype="float32", )
paddle.ones(list[2,1,35,35,], dtype="bool", )
paddle.ones(shape=list[2,3,4,], dtype="complex64", )
paddle.ones(list[3,3,], dtype="float32", )
paddle.ones(shape=list[3,3,], dtype="float32", )
paddle.ones(list[4,1,158,158,], )
paddle.ones(list[13,7,1,], )
paddle.ones(list[5,10,], )
paddle.ones(tuple(30,13,), )
paddle.ones(tuple(16,32,64,128,), )
paddle.ones(shape=tuple(64,64,), dtype="float16", )
paddle.ones(shape=list[3200,1,], )
paddle.ones(list[2,1,1,83,], dtype="bool", )
paddle.ones(list[13,2,], dtype="int32", )
paddle.ones(shape=list[2,3,4,], dtype="float64", )
paddle.ones(shape=tuple(1,), dtype="int64", )
paddle.ones(tuple(2,3,4,1,), dtype=Dtype(float64), )
paddle.ones(list[2,12,], dtype="bool", )
paddle.ones(shape=list[2,1,], )
paddle.ones(shape=list[2,2,1,1,], dtype=Dtype(float64), )
paddle.ones(list[3,3,], dtype="int32", )
paddle.ones(tuple(30,49,), )
paddle.ones(tuple(2,3,), )
paddle.ones(list[], VarType(float32), )
paddle.ones(list[109,], dtype="float32", )
paddle.ones(list[1,9,], VarType(float32), )
paddle.ones(tuple(13,1,1,1,), dtype="int64", )
paddle.ones(shape=tuple(46,46,), dtype="float16", )
paddle.ones(tuple(100,1,), dtype=Dtype(float64), )
paddle.ones(tuple(2,9,), )
paddle.ones(list[116,], dtype="float32", )
paddle.ones(list[2,1,37,37,], dtype="bool", )
paddle.ones(tuple(1,280,350,3,), dtype=Dtype(float32), )
paddle.ones(list[33,], dtype="float32", )
paddle.ones(tuple(12,226,), )
paddle.ones(tuple(3,), dtype="float64", )
paddle.ones(shape=list[768,768,], )
paddle.ones(list[12,7,], dtype="int64", )
paddle.ones(shape=list[1,], dtype="int64", )
paddle.ones(list[2,20,], dtype="float32", )
paddle.ones(tuple(7,3,), dtype="int32", )
paddle.ones(list[2,2,2,], dtype="int64", )
paddle.ones(shape=tuple(11,11,), dtype="float16", )
paddle.ones(list[1,1,1,], dtype=Dtype(float32), )
paddle.ones(tuple(0,0,0,), dtype=Dtype(bool), )
paddle.ones(list[2,1,1,59,], dtype="bool", )
paddle.ones(tuple(111,111,), dtype="bool", )
paddle.ones(tuple(82,82,), dtype="bool", )
paddle.ones(shape=list[1,2,], )
paddle.ones(shape=list[105344,], )
paddle.ones(tuple(13,7,), )
paddle.ones(tuple(1,1,400,300,), dtype=Dtype(float32), )
paddle.ones(tuple(1,298,364,3,), dtype=Dtype(float32), )
paddle.ones(shape=tuple(107,107,), dtype=Dtype(float16), )
paddle.ones(list[1,20,], dtype=Dtype(int64), )
paddle.ones(list[1,], Dtype(int64), )
paddle.ones(list[18,], )
paddle.ones(list[117,], dtype="float32", )
paddle.ones(list[2,1,1,103,], dtype="bool", )
paddle.ones(list[400,400,], )
paddle.ones(shape=tuple(35,35,), dtype="float16", )
paddle.ones(shape=list[1000,], )
paddle.ones(tuple(1,1,368,416,), dtype=Dtype(float32), )
paddle.ones(tuple(17,17,), dtype="bool", )
paddle.ones(shape=list[13,], dtype="int64", )
paddle.ones(list[13,7,], dtype="int32", )
paddle.ones(tuple(164,164,), dtype="bool", )
paddle.ones(shape=tuple(123,321,), dtype="float32", )
paddle.ones(list[512,512,], )
paddle.ones(list[6,11,], dtype="bool", )
paddle.ones(shape=list[4,2,3,], dtype="float32", )
paddle.ones(shape=tuple(31,31,), dtype="float16", )
paddle.ones(64, dtype="int8", )
paddle.ones(shape=list[7,5,5,], dtype="float32", )
paddle.ones(list[70,], dtype="float32", )
paddle.ones(shape=tuple(80,80,), dtype="float16", )
paddle.ones(list[2,1,1,1,], dtype="bool", )
paddle.ones(list[2,10,], dtype="int64", )
paddle.ones(shape=tuple(49,49,), dtype="float16", )
paddle.ones(list[2,3,], dtype="float64", )
paddle.ones(tuple(10,65,), )
paddle.ones(list[1,1,], dtype="int64", )
paddle.ones(shape=tuple(80,80,), dtype=Dtype(float16), )
paddle.ones(list[], Dtype(int64), )
paddle.ones(tuple(4,37,), )
paddle.ones(list[2,1,1,73,], dtype="bool", )
paddle.ones(tuple(36,36,), dtype="bool", )
paddle.ones(list[100,1,1,], dtype="float32", )
paddle.ones(list[2,1,1,55,], dtype="bool", )
paddle.ones(tuple(9,89,), )
paddle.ones(list[12,226,], dtype="int64", )
paddle.ones(list[2,1,1,41,], dtype="bool", )
paddle.ones(shape=list[1,2,3,4,5,], dtype="float64", )
paddle.ones(shape=list[1,20,], )
paddle.ones(list[3,4,], dtype=VarType(int32), )
paddle.ones(shape=list[2,], name=None, )
paddle.ones(shape=list[2,3,1,], dtype="float32", )
paddle.ones(tuple(1,90,90,3,), dtype=Dtype(float32), )
paddle.ones(list[2,1,1,], dtype=Dtype(float32), )
paddle.ones(shape=list[9,5,], )
paddle.ones(shape=list[2,2,1,1,], dtype=VarType(float64), )
paddle.ones(shape=list[4,1,], dtype="float32", )
paddle.ones(shape=tuple(38,38,), dtype="float16", )
paddle.ones(shape=list[1,], dtype="float64", )
paddle.ones(list[1,20,], )
paddle.ones(list[2,1,1,101,], dtype="bool", )
paddle.ones(list[498,80,], )
paddle.ones(shape=list[2,2,1,], dtype="int64", )
paddle.ones(list[2,47,32,], dtype="float16", )
paddle.ones(list[2,1,47,47,], )
paddle.ones(tuple(30,81,), )
paddle.ones(list[2,3,], dtype="float32", )
paddle.ones(tuple(3,17,1,), dtype=Dtype(float64), )
paddle.ones(tuple(40,1,), dtype=Dtype(float64), )
paddle.ones(list[2800,], )
paddle.ones(shape=list[1,10,], )
paddle.ones(tuple(5,33,), )
paddle.ones(tuple(3,3,3,), dtype="float32", )
paddle.ones(shape=list[2,1,2,3,], dtype="float32", )
paddle.ones(tuple(1,65,), )
paddle.ones(list[2,4,], )
paddle.ones(tuple(288,288,), dtype="bool", )
paddle.ones(list[108,], dtype="float32", )
paddle.ones(tuple(39,39,), dtype="bool", )
paddle.ones(list[112,], dtype="float32", )
paddle.ones(list[47,], dtype="float32", )
paddle.ones(list[2,1,1,68,], dtype="bool", )
paddle.ones(shape=list[4,2,], )
paddle.ones(list[91,], dtype="float32", )
paddle.ones(shape=tuple(74,74,), dtype="float16", )
paddle.ones(list[1,], "int32", )
paddle.ones(shape=list[2,], name="ones_name", )
paddle.ones(tuple(1,4,4,3,), dtype=Dtype(float32), )
paddle.ones(list[496,496,], )
paddle.ones(tuple(Tensor([],"int64"),Tensor([],"int64"),), dtype="bool", )
paddle.ones(list[2,4,5,], Dtype(int32), )
paddle.ones(list[4,6,], )
paddle.ones(tuple(2,), dtype="float32", )
paddle.ones(shape=list[1,], )
paddle.ones(list[2,1,1,51,], dtype="bool", )
paddle.ones(list[1,21,], VarType(float32), )
paddle.ones(tuple(30,25,), )
paddle.ones(list[63,], dtype="float32", )
paddle.ones(list[2,1,40,40,], )
paddle.ones(list[1,], dtype="int32", )
paddle.ones(tuple(30,37,), )
paddle.ones(list[3,5,], Dtype(int64), )
paddle.ones(tuple(1,100,1,), dtype=Dtype(float64), )
paddle.ones(tuple(7,3,), dtype="float64", )
paddle.ones(list[69,], dtype="float32", )
paddle.ones(shape=Tensor([2],"int32"), )
paddle.ones(tuple(1,17,1,), dtype=Dtype(float64), )
paddle.ones(tuple(14,8,), dtype=Dtype(bool), )
paddle.ones(list[2,1,3,], dtype=Dtype(float32), )
paddle.ones(shape=tuple(60,60,), dtype="float16", )
paddle.ones(list[87,], dtype="float32", )
paddle.ones(tuple(172,172,), dtype="bool", )
paddle.ones(shape=list[1,2,3,], dtype="bool", )
paddle.ones(list[1,63,128,], dtype=Dtype(float16), )
paddle.ones(tuple(2,129,), )
paddle.ones(list[53,], dtype="float32", )
paddle.ones(shape=tuple(1,), )
paddle.ones(list[2,20,], dtype="bool", )
paddle.ones(list[96,], dtype="float32", )
paddle.ones(tuple(10,105,), )
paddle.ones(list[], dtype="complex128", )
paddle.ones(shape=list[1,3,], )
paddle.ones(list[102,], dtype="float32", )
paddle.ones(tuple(5,145,), )
paddle.ones(shape=tuple(92,92,), dtype=Dtype(float16), )
paddle.ones(shape=tuple(1,1,32768,32768,), dtype="float16", )
paddle.ones(tuple(512,512,), dtype="bool", )
paddle.ones(shape=tuple(90,90,), dtype="float16", )
paddle.ones(list[1,21,128,], dtype=Dtype(float16), )
paddle.ones(list[], Dtype(int32), )
paddle.ones(shape=list[3,1,], dtype="float32", )
paddle.ones(shape=list[2,3,4,], dtype="float16", )
paddle.ones(tuple(10,29,), )
paddle.ones(tuple(2,57,), )
paddle.ones(list[111,128,], dtype="bool", )
paddle.ones(shape=tuple(82,82,), dtype="float16", )
paddle.ones(tuple(5,65,), )
paddle.ones(shape=tuple(2,1,4096,4096,), dtype="float16", )
paddle.ones(list[79,], dtype="float32", )
paddle.ones(list[110,], dtype="float32", )
paddle.ones(list[10,], )
paddle.ones(shape=tuple(29,29,), dtype="float16", )
paddle.ones(tuple(2,10,), dtype=Dtype(bool), )
paddle.ones(list[3,4,], dtype=VarType(float32), )
paddle.ones(tuple(1,22,), dtype=Dtype(bool), )
paddle.ones(list[35,], dtype="float32", )
paddle.ones(list[56,], dtype="float32", )
paddle.ones(tuple(2,10,10,), dtype=Dtype(int32), )
paddle.ones(tuple(3,100,1,), dtype=Dtype(float64), )
paddle.ones(list[2,2,], dtype="float32", )
paddle.ones(list[2,1,1,85,], dtype="bool", )
paddle.ones(shape=list[2,], dtype="float64", )
paddle.ones(shape=tuple(1,), dtype="float32", )
paddle.ones(shape=list[16,21,], dtype="float64", )
paddle.ones(list[2,10,], dtype=Dtype(int64), )
paddle.ones(tuple(2,20,), )
paddle.ones(list[83,], dtype="float32", )
paddle.ones(shape=tuple(45,45,), dtype="float16", )
paddle.ones(list[1,82,128,], dtype=Dtype(float16), )
paddle.ones(list[1,2,], dtype=Dtype(float32), )
paddle.ones(tuple(10,21,), )
paddle.ones(list[1,57,128,], dtype=Dtype(float16), )
paddle.ones(tuple(1,385,), )
paddle.ones(shape=tuple(26,26,), dtype="float16", )
paddle.ones(tuple(5,5,), dtype="bool", )
paddle.ones(list[2,1,1,97,], dtype="bool", )
paddle.ones(tuple(51,51,), dtype="bool", )
paddle.ones(shape=list[2,4,], dtype=type(numpy.float32), )
paddle.ones(list[], dtype="int64", )
paddle.ones(list[2,1,1,72,], dtype="bool", )
paddle.ones(shape=tuple(21,21,), dtype=Dtype(float16), )
paddle.ones(shape=list[6,4,], )
paddle.ones(list[4,], )
paddle.ones(shape=tuple(41,41,), dtype="float16", )
paddle.ones(tuple(30,65,), )
paddle.ones(tuple(17,1,), dtype=Dtype(float64), )
paddle.ones(list[], Dtype(float64), )
paddle.ones(list[2,1,1,78,], dtype="bool", )
paddle.ones(shape=list[2,1,1,32768,], dtype="float16", )
paddle.ones(shape=list[4,], dtype="float64", )
paddle.ones(tuple(1,1,512,512,), )
paddle.ones(tuple(1,3,3,1,1,), dtype="float32", )
paddle.ones(tuple(4,8,32,), dtype="float32", )
paddle.ones(shape=list[1,5,2,3,], dtype=None, )
paddle.ones(tuple(30,21,), )
paddle.ones(shape=list[32,32,], dtype="float32", )
paddle.ones(tuple(74,74,), dtype="bool", )
paddle.ones(list[4,1,10,1,], dtype=Dtype(int64), )
paddle.ones(tuple(13,1007,), dtype=Dtype(bool), )
paddle.ones(tuple(3,23,), dtype="bool", )
paddle.ones(shape=list[1,2,1,], dtype="int64", )
paddle.ones(shape=tuple(200,2,), dtype="int64", )
paddle.ones(list[6,1,1,1,], dtype=Dtype(int64), )
paddle.ones(list[109,128,], dtype="bool", )
paddle.ones(list[6,1,3,], dtype=Dtype(float32), )
paddle.ones(tuple(91,91,), dtype="bool", )
paddle.ones(tuple(3,), dtype="int64", )
paddle.ones(tuple(30,41,), )
paddle.ones(list[42,], dtype="float32", )
paddle.ones(shape=tuple(100,2,2,), dtype="float32", )
paddle.ones(tuple(1,391,436,3,), dtype=Dtype(float32), )
paddle.ones(list[1,1,1,24,], dtype="bool", )
paddle.ones(tuple(2,5,), )
paddle.ones(list[2,1,1,102,], dtype="bool", )
paddle.ones(tuple(10,10,), dtype="bool", )
paddle.ones(tuple(10,137,), )
paddle.ones(shape=tuple(1,1,), dtype="float32", )
paddle.ones(tuple(14,7,), dtype=Dtype(bool), )
paddle.ones(tuple(13,7,), dtype=Dtype(bool), )
paddle.ones(list[2,1,1,64,], dtype="bool", )
paddle.ones(list[25,], dtype="float32", )
paddle.ones(list[1,1,1,23,], dtype="bool", )
paddle.ones(list[1,79,128,], dtype=Dtype(float16), )
paddle.ones(list[123,], dtype="float32", )
paddle.ones(list[], Dtype(float32), )
paddle.ones(list[2,1,1,48,], dtype="bool", )
paddle.ones(list[84,], dtype="float32", )
paddle.ones(list[2,1,], dtype=Dtype(int64), )
paddle.ones(shape=list[64,32,], dtype="float32", )
paddle.ones(list[13,49,], )
paddle.ones(list[1,2048,], dtype="bool", )
paddle.ones(list[127,], dtype="float32", )
paddle.ones(list[2,1,1,93,], dtype="bool", )
paddle.ones(list[1,1,], )
paddle.ones(shape=list[14,Tensor([],"int64"),], )
paddle.ones(list[3,3,], dtype="float64", )
paddle.ones(tuple(10,97,), )
paddle.ones(tuple(5,), )
paddle.ones(tuple(30,161,), )
paddle.ones(shape=list[380,], )
paddle.ones(shape=tuple(111,111,), dtype=Dtype(float16), )
paddle.ones(list[3,4,], dtype=VarType(bool), )
paddle.ones(shape=list[2,2,], )
paddle.ones(list[13,1,7,], dtype=Dtype(float32), )
paddle.ones(list[2,1,1,40,], dtype="bool", )
paddle.ones(shape=list[6,3,], )
paddle.ones(list[90,], dtype="float32", )
paddle.ones(list[2,1,1,52,], dtype="bool", )
paddle.ones(list[2,1,1,6,], dtype="bool", )
paddle.ones(shape=list[2,3,4,], dtype="float32", )
paddle.ones(shape=tuple(102400,), dtype="float32", )
paddle.ones(list[2,1,1,45,], dtype="bool", )
paddle.ones(tuple(115,115,), dtype="bool", )
paddle.ones(list[11,], dtype="float32", )
paddle.ones(list[14,2,], )
paddle.ones(list[1,1,1,1,], dtype=Dtype(float32), )
paddle.ones(shape=list[2,], name="None", )
paddle.ones(list[1,1,20,2,], dtype="bool", )
paddle.ones(list[14,7,], dtype="float32", )
paddle.ones(list[2,1,1,92,], dtype="bool", )
paddle.ones(tuple(198,198,), dtype="bool", )
paddle.ones(list[26,], dtype="float32", )
paddle.ones(list[4,1,134,134,], )
paddle.ones(list[4,1,1,5,], dtype="bool", )
paddle.outer(Tensor([20, 10],"float32"), Tensor([],"float32"), )
paddle.outer(Tensor([5, 10, 10],"complex128"), Tensor([2, 10],"complex128"), )
paddle.outer(Tensor([142],"float32"), Tensor([32],"float32"), )
paddle.outer(Tensor([264],"float32"), Tensor([32],"float32"), )
paddle.outer(Tensor([5, 10, 10],"float64"), Tensor([2, 10],"float64"), )
paddle.outer(x=Tensor([4, 2, 5, 2],"float64"), y=Tensor([2, 3, 4, 4],"float64"), )
paddle.outer(Tensor([70],"float32"), Tensor([32],"float32"), )
paddle.outer(x=Tensor([4, 2, 3],"float64"), y=Tensor([4, 2, 3],"float64"), )
paddle.outer(x=Tensor([1, 4],"float64"), y=Tensor([1, 4],"float64"), )
paddle.outer(x=Tensor([4],"float64"), y=Tensor([4],"float64"), )
paddle.outer(Tensor([10],"float32"), Tensor([2],"float32"), )
paddle.outer(x=Tensor([4, 2],"float64"), y=Tensor([2, 3, 4],"float64"), )
paddle.outer(Tensor([16],"float32"), Tensor([4],"float32"), )
paddle.outer(x=Tensor([4, 1],"float64"), y=Tensor([4, 1],"float64"), )
paddle.outer(x=Tensor([1, 4],"float32"), y=Tensor([1, 4],"float32"), )
paddle.outer(Tensor([10],"float32"), Tensor([4],"float32"), )
paddle.outer(Tensor([58],"float32"), Tensor([4],"float32"), )
paddle.pdist(Tensor([10, 20],"float32"), 2.5, )
paddle.pdist(Tensor([10, 20],"float32"), math.inf, )
paddle.pdist(Tensor([10, 20],"float32"), 1.0, )
paddle.pdist(Tensor([10, 20],"float32"), 1.5, )
paddle.pdist(Tensor([10, 20],"float32"), 2.0, )
paddle.pdist(Tensor([10, 20],"float32"), 3.0, )
paddle.pdist(Tensor([10, 20],"float32"), 0, )
paddle.polar(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.polar(Tensor([],"float32"), Tensor([],"float32"), )
paddle.polar(Tensor([2],"float64"), Tensor([2],"float64"), )
paddle.polar(Tensor([2],"float32"), Tensor([2],"float32"), )
paddle.polar(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.polygamma(Tensor([10, 20, 1],"float32"), 1, )
paddle.polygamma(Tensor([2, 6],"float64"), 1, )
paddle.polygamma(Tensor([6],"float64"), 3, )
paddle.polygamma(Tensor([],"float32"), 2, )
paddle.polygamma(Tensor([6],"float64"), 2, )
paddle.polygamma(Tensor([6],"float32"), 2, )
paddle.polygamma(Tensor([6],"float32"), 1, )
paddle.polygamma(Tensor([6],"float64"), 1, )
paddle.polygamma(Tensor([2, 2, 6],"float64"), 2, )
paddle.polygamma(Tensor([6],"float32"), 3, )
paddle.positive(Tensor([2, 3, 4, 5],"float64"), )
paddle.positive(Tensor([2, 3, 4, 5],"int64"), )
paddle.positive(Tensor([2, 3, 4, 5],"float16"), )
paddle.positive(Tensor([2, 3, 4, 5],"float32"), )
paddle.positive(Tensor([2, 3, 4, 5],"int16"), )
paddle.positive(Tensor([2, 3, 4, 5],"int32"), )
paddle.pow(Tensor([304],"float32"), 2, )
paddle.pow(Tensor([2, 1, 128],"float32"), 3.0, )
paddle.pow(Tensor([2, 13, 36],"float32"), 2, )
paddle.pow(Tensor([8, 8, 3, 3],"float32"), 2, )
paddle.pow(Tensor([13, 2, 32],"float32"), 3.0, )
paddle.pow(Tensor([13, 1, 32],"float32"), 2, )
paddle.pow(Tensor([16, 32, 1, 1],"float32"), 2, )
paddle.pow(Tensor([2, 9, 36],"float32"), 2, )
paddle.pow(Tensor([],"float32"), Tensor([207],"float32"), )
paddle.pow(Tensor([10, 10],"float32"), 2, )
paddle.pow(Tensor([4, 3, 27],"float32"), 2, )
paddle.pow(Tensor([10, 16],"float32"), 2, )
paddle.pow(Tensor([1, 12, 36],"float32"), 2, )
paddle.pow(Tensor([32, 8, 1, 1],"float32"), 2, )
paddle.pow(Tensor([4, 7, 27],"float32"), 2, )
paddle.pow(Tensor([2, 6, 36],"float32"), 2, )
paddle.pow(Tensor([1, 7, 36],"float32"), 2, )
paddle.pow(Tensor([1, 10, 36],"float32"), 2, )
paddle.pow(Tensor([2, 8, 36],"float32"), 2, )
paddle.pow(Tensor([13, 32],"float32"), 3.0, )
paddle.pow(Tensor([3, 96, 1],"float32"), 2, )
paddle.pow(Tensor([1, 8, 36],"float32"), 2, )
paddle.pow(Tensor([1, 5, 36],"float32"), 2, )
paddle.pow(Tensor([1, 16, 36],"float32"), 2, )
paddle.pow(Tensor([6, 1, 32],"float32"), 2, )
paddle.pow(Tensor([2, 11, 36],"float32"), 2, )
paddle.pow(Tensor([4, 2, 27],"float32"), 2, )
paddle.pow(Tensor([4, 4, 27],"float32"), 2, )
paddle.pow(Tensor([4, 5, 27],"float32"), 2, )
paddle.pow(Tensor([8, 32, 1, 1],"float32"), 2, )
paddle.pow(Tensor([237],"int64"), 6, )
paddle.pow(Tensor([],"float64"), Tensor([247],"float64"), )
paddle.pow(Tensor([1, 13, 36],"float32"), 2, )
paddle.pow(Tensor([8, 3, 27],"float32"), 2, )
paddle.pow(Tensor([13, 1, 37],"float32"), 3.0, )
paddle.pow(Tensor([16, 8, 1, 1],"float32"), 2, )
paddle.pow(Tensor([1, 4, 36],"float32"), 2, )
paddle.pow(Tensor([10, 20],"float32"), 2, )
paddle.pow(Tensor([4, 3, 36],"float32"), 2, )
paddle.pow(Tensor([1, 3, 36],"float32"), 2, )
paddle.pow(Tensor([1, 20, 32],"float32"), 2, )
paddle.pow(Tensor([2, 12, 36],"float32"), 2, )
paddle.pow(Tensor([10, 20, 1],"float32"), 2, )
paddle.pow(Tensor([2, 5, 36],"float32"), 2, )
paddle.pow(Tensor([4, 6, 27],"float32"), 2, )
paddle.pow(Tensor([8, 64, 1, 1],"float32"), 2, )
paddle.pow(Tensor([1, 14, 36],"float32"), 2, )
paddle.pow(Tensor([2, 4, 36],"float32"), 2, )
paddle.pow(Tensor([8, 2, 27],"float32"), 2, )
paddle.pow(Tensor([4, 2, 36],"float32"), 2, )
paddle.pow(Tensor([6, 1, 37],"float32"), 3.0, )
paddle.pow(Tensor([2, 3, 37],"float32"), 3.0, )
paddle.pow(Tensor([8, 16, 1, 1],"float32"), 2, )
paddle.pow(Tensor([1, 7, 32],"float32"), 2, )
paddle.pow(x=Tensor([],"float32"), y=Tensor([128],"float32"), )
paddle.pow(Tensor([1, 11, 36],"float32"), 2, )
paddle.pow(Tensor([4, 1, 128],"float32"), 3.0, )
paddle.pow(Tensor([8, 1, 27],"float32"), 2, )
paddle.pow(Tensor([4, 1, 27],"float32"), 2, )
paddle.pow(Tensor([1, 3, 4, 10],"float32"), 2, )
paddle.pow(Tensor([],"float32"), Tensor([209],"float32"), )
paddle.pow(Tensor([2, 3, 32],"float32"), 2, )
paddle.pow(Tensor([32, 16, 1, 1],"float32"), 2, )
paddle.pow(Tensor([1, 9, 36],"float32"), 2, )
paddle.pow(Tensor([247],"float64"), 8.902181874411676, )
paddle.pow(Tensor([2, 3, 36],"float32"), 2, )
paddle.pow(Tensor([384],"float64"), 2, )
paddle.pow(Tensor([2, 7, 36],"float32"), 2, )
paddle.pow(Tensor([304],"float32"), 2.0, )
paddle.pow(Tensor([237],"float64"), 3, )
paddle.pow(Tensor([5, 9, 7],"float64"), Tensor([7],"float64"), )
paddle.pow(Tensor([2, 3, 128],"float32"), 3.0, )
paddle.pow(Tensor([],"float32"), Tensor([210],"float32"), )
paddle.pow(Tensor([1, 6, 36],"float32"), 2, )
paddle.pow(Tensor([6, 1, 128],"float32"), 3.0, )
paddle.pow(Tensor([4, 5, 36],"float32"), 2, )
paddle.pow(Tensor([8, 4, 27],"float32"), 2, )
paddle.pow(Tensor([1, 3, 4, 10],"float64"), 2, )
paddle.pow(Tensor([4, 1, 37],"float32"), 3.0, )
paddle.pow(Tensor([8, 1, 36],"float32"), 2, )
paddle.pow(Tensor([280],"float32"), Tensor([280],"float32"), )
paddle.pow(Tensor([2, 2, 36],"float32"), 2, )
paddle.pow(Tensor([4, 1, 32],"float32"), 2, )
paddle.pow(Tensor([1, 7, 37],"float32"), 3.0, )
paddle.pow(Tensor([1, 10, 32],"float32"), 2, )
paddle.pow(Tensor([267],"float64"), Tensor([267],"float64"), )
paddle.pow(Tensor([2, 96, 2],"float32"), 2, )
paddle.pow(Tensor([4, 1, 36],"float32"), 2, )
paddle.pow(Tensor([1, 1, 128],"float32"), 3.0, )
paddle.pow(Tensor([8, 3, 36],"float32"), 2, )
paddle.pow(Tensor([2, 10, 36],"float32"), 2, )
paddle.pow(Tensor([10, 10],"float32"), 2.7, )
paddle.pow(Tensor([8, 2, 36],"float32"), 2, )
paddle.pow(Tensor([],"float64"), Tensor([6],"float64"), )
paddle.pow(Tensor([],"float32"), Tensor([1],"float32"), )
paddle.pow(Tensor([10],"float32"), 2, )
paddle.pow(Tensor([2, 3],"float64"), 2, )
paddle.pow(Tensor([3, 3, 3],"float64"), 2, )
paddle.pow(Tensor([1, 1, 32],"float32"), 2, )
paddle.pow(Tensor([17],"float32"), 2, )
paddle.pow(Tensor([1, 1, 45],"float32"), 2, )
paddle.pow(Tensor([1, 1, 37],"float32"), 3.0, )
paddle.pow(Tensor([],"float32"), 2.0, )
paddle.pow(Tensor([2],"float32"), 5, )
paddle.pow(Tensor([12],"float32"), 2, )
paddle.pow(Tensor([2, 3],"float32"), 2, )
paddle.pow(Tensor([8, 8, 1, 1],"float32"), 2, )
paddle.pow(Tensor([11],"float32"), 2, )
paddle.pow(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.pow(Tensor([],"float32"), Tensor([4],"float32"), )
paddle.pow(Tensor([2, 2],"float32"), 6, )
paddle.pow(Tensor([1],"float32"), 2, )
paddle.pow(Tensor([2, 2],"float32"), 2, )
paddle.pow(x=Tensor([2, 2, 2],"float64"), y=Tensor([2],"float64"), )
paddle.pow(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.pow(Tensor([],"float32"), -1, )
paddle.pow(Tensor([8],"float32"), 2, )
paddle.pow(Tensor([9, 1],"float32"), 2, )
paddle.pow(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.pow(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.pow(Tensor([2],"float32"), 2, )
paddle.pow(Tensor([8, 1],"float32"), 2, )
paddle.pow(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.pow(Tensor([3, 3],"float32"), 2, )
paddle.pow(Tensor([20, 1],"float32"), Tensor([],"float32"), )
paddle.pow(Tensor([13],"float32"), 2, )
paddle.pow(Tensor([7, 7],"float32"), 2, )
paddle.pow(Tensor([2, 2],"float32"), 5, )
paddle.pow(Tensor([64],"float64"), 2, )
paddle.pow(Tensor([2, 2, 2],"float32"), 5, )
paddle.pow(Tensor([4],"float32"), 2, )
paddle.pow(Tensor([2, 1, 36],"float32"), 2, )
paddle.pow(Tensor([10, 1],"float32"), 2, )
paddle.pow(Tensor([2, 1, 32],"float32"), 2, )
paddle.pow(Tensor([3],"float32"), -1, )
paddle.pow(Tensor([6, 9],"float32"), 2, )
paddle.pow(Tensor([7],"float32"), 2, )
paddle.pow(Tensor([4],"float64"), 2, )
paddle.pow(Tensor([9],"float32"), 2, )
paddle.pow(Tensor([11, 1],"float32"), 2, )
paddle.pow(Tensor([3, 5],"float32"), 2, )
paddle.pow(Tensor([2, 1, 37],"float32"), 3.0, )
paddle.pow(Tensor([],"float64"), 2, )
paddle.prod(Tensor([10, 10, 5],"float32"), axis=-1, )
paddle.prod(Tensor([10, 10, 5],"complex64"), axis=list[0,1,], )
paddle.prod(Tensor([10, 10, 5],"complex64"), axis=1, keepdim=True, )
paddle.prod(Tensor([10, 10, 5],"complex64"), )
paddle.prod(Tensor([10, 10, 5],"complex64"), axis=1, )
paddle.prod(Tensor([5, 6, 10],"float32"), list[0,], False, )
paddle.prod(Tensor([10, 10, 5],"float32"), )
paddle.prod(Tensor([10, 10, 5],"float32"), axis=list[0,1,], )
paddle.prod(Tensor([5, 6, 10],"float64"), list[0,], False, )
paddle.prod(Tensor([10, 10, 5],"float32"), axis=1, keepdim=True, )
paddle.prod(Tensor([10, 10, 5],"float32"), axis=1, )
paddle.prod(Tensor([3, 5],"float32"), axis=None, )
paddle.prod(x=Tensor([2, 2],"int32"), )
paddle.prod(x=Tensor([2, 2],"float32"), )
paddle.prod(Tensor([],"float32"), axis=0, )
paddle.prod(Tensor([],"float32"), axis=None, )
paddle.prod(x=Tensor([2, 2],"float64"), axis=-1, )
paddle.prod(x=Tensor([2, 2],"float64"), )
paddle.prod(x=Tensor([2, 2],"float64"), axis=list[0,1,], )
paddle.prod(x=Tensor([2, 2],"float32"), dtype="float32", )
paddle.prod(x=Tensor([2, 2],"float64"), axis=Tensor([1],"int64"), )
paddle.prod(Tensor([2, 2],"float64"), axis=Tensor([1],"int64"), )
paddle.prod(Tensor([],"float32"), axis=-1, )
paddle.prod(x=Tensor([2, 2],"float64"), axis=0, keepdim=True, )
paddle.prod(x=Tensor([2, 2],"float32"), axis=0, keepdim=True, )
paddle.prod(x=Tensor([2, 2],"float64"), axis=1, )
paddle.prod(x=Tensor([2, 2],"float64"), axis=tuple(0,1,), )
paddle.prod(x=Tensor([2, 2],"float64"), dtype="float32", )
paddle.prod(x=Tensor([2, 2],"int64"), dtype="int64", )
paddle.prod(Tensor([],"float32"), axis=list[], )
paddle.prod(x=Tensor([2, 2],"int32"), dtype="int64", )
paddle.prod(Tensor([5],"float32"), axis=0, )
paddle.prod(Tensor([],"float64"), list[], False, )
paddle.put_along_axis(Tensor([3, 5],"float32"), Tensor([2, 3],"int64"), Tensor([2, 5],"float32"), 1, "add", True, False, )
paddle.put_along_axis(Tensor([2, 2],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 1, "mul", )
paddle.put_along_axis(Tensor([2, 2],"float64"), Tensor([1, 1],"int64"), Tensor([1],"float64"), 1, "add", )
paddle.put_along_axis(Tensor([2, 2],"float32"), Tensor([4, 2],"int64"), Tensor([],"float32"), 0, "add", )
paddle.put_along_axis(Tensor([2, 2],"float32"), Tensor([2, 2],"int64"), Tensor([],"float32"), 0, "mul", )
paddle.put_along_axis(Tensor([3, 5],"float32"), Tensor([1, 4],"int64"), Tensor([2, 5],"float32"), 0, "mul", True, False, )
paddle.put_along_axis(Tensor([2, 2],"float32"), Tensor([2, 2],"int64"), Tensor([],"float32"), 0, "add", )
paddle.put_along_axis(Tensor([2, 2],"float32"), Tensor([4, 2],"int64"), Tensor([],"float32"), 0, "mul", )
paddle.put_along_axis(Tensor([1, 3],"float32"), Tensor([1, 1],"int64"), Tensor([],"float32"), 0, "mul", )
paddle.put_along_axis(Tensor([3, 5],"float32"), Tensor([2, 3],"int64"), Tensor([2, 5],"float32"), 1, "mul", True, False, )
paddle.put_along_axis(Tensor([1, 3],"float32"), Tensor([1, 1],"int64"), Tensor([],"float32"), 0, "add", )
paddle.put_along_axis(Tensor([3, 5],"float32"), Tensor([1, 4],"int64"), Tensor([2, 5],"float32"), 0, "add", True, False, )
paddle.quantile(Tensor([4, 7, 6],"float64"), q=0.35, )
paddle.quantile(Tensor([4, 7, 6],"float64"), q=0.1, axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([4, 7, 6],"float64"), q=0.35, axis=2, keepdim=True, )
paddle.quantile(Tensor([4, 7, 6],"float64"), q=0, axis=1, )
paddle.quantile(Tensor([16, 32],"float32"), 0.30000000000000004, )
paddle.quantile(Tensor([4, 7, 6],"float64"), q=0.5, axis=2, )
paddle.quantile(Tensor([4, 7, 6],"float64"), q=0.75, axis=list[0,2,], )
paddle.quantile(Tensor([2, 3],"float32"), 0.5, axis=None, )
paddle.quantile(Tensor([5, 3, 4],"float64"), q=Tensor([],"float32"), axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([4, 7],"float32"), q=0.5, axis=1, )
paddle.quantile(Tensor([4, 7],"float64"), q=0.5, axis=1, )
paddle.quantile(Tensor([5, 3, 4],"float64"), q=Tensor([2],"float32"), axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([5, 3, 4],"float64"), q=list[0.1,0.2,0.3,], axis=list[1,2,], keepdim=True, )
paddle.quantile(Tensor([32],"float32"), 0.30000000000000004, )
paddle.quantile(Tensor([2, 3, 4],"float64"), q=0.35, axis=0, interpolation="midpoint", )
paddle.quantile(x=Tensor([3, 3, 3],"float32"), q=0.5, axis=0, )
paddle.quantile(Tensor([2, 3, 4],"float64"), q=0.35, axis=0, interpolation="lower", )
paddle.quantile(Tensor([2, 3],"float32"), list[0.3,0.7,], 1, )
paddle.quantile(Tensor([5, 3, 4],"float64"), q=list[0.3,0.44,], axis=-2, )
paddle.quantile(Tensor([8],"float32"), list[0.55,0.7,], 0, )
paddle.quantile(Tensor([2, 3, 4],"float64"), q=0.35, axis=0, interpolation="nearest", )
paddle.quantile(Tensor([5, 3, 4],"float64"), q=list[0.2,0.67,], axis=list[1,-1,], )
paddle.quantile(x=Tensor([3, 3, 3],"float64"), q=0.5, axis=0, )
paddle.quantile(Tensor([3],"float32"), 0.5, 0, )
paddle.quantile(Tensor([],"float32"), 0.5, axis=list[], )
paddle.quantile(Tensor([37],"float32"), 0.30000000000000004, )
paddle.quantile(Tensor([2, 3, 4],"float64"), q=0.35, axis=0, )
paddle.quantile(Tensor([4, 5],"float32"), 0.30000000000000004, )
paddle.quantile(Tensor([],"float32"), 0.5, axis=None, )
paddle.quantile(Tensor([2, 3, 4],"float64"), q=0.35, axis=0, interpolation="higher", )
paddle.rad2deg(x=Tensor([4, 4, 4, 4],"float64"), )
paddle.rad2deg(Tensor([1],"int64"), )
paddle.rad2deg(x=Tensor([10],"int32"), )
paddle.rad2deg(Tensor([],"float32"), )
paddle.rad2deg(x=Tensor([10],"int64"), )
paddle.rad2deg(Tensor([6],"float32"), )
paddle.rad2deg(x=Tensor([1],"float64"), )
paddle.rad2deg(Tensor([1],"float32"), )
paddle.rad2deg(x=Tensor([10],"float32"), )
paddle.rad2deg(x=Tensor([10],"float64"), )
paddle.rad2deg(x=Tensor([4, 4, 4],"float64"), )
paddle.rad2deg(x=Tensor([4, 4],"float64"), )
paddle.real(x=Tensor([20, 10],"complex128"), )
paddle.real(Tensor([2, 20, 2, 3],"complex128"), )
paddle.real(x=Tensor([20, 10],"complex64"), )
paddle.real(Tensor([2, 20, 2, 3],"complex64"), )
paddle.real(Tensor([],"complex64"), )
paddle.real(x=Tensor([1, 10],"complex64"), )
paddle.reciprocal(x=Tensor([3, 3, 3],"float32"), )
paddle.reciprocal(x=Tensor([3, 3, 3],"float64"), )
paddle.reciprocal(Tensor([],"float32"), )
paddle.remainder(Tensor([1, 1, 5],"int32"), Tensor([2, 3, 4, 5],"int32"), )
paddle.remainder(Tensor([2, 3, 4, 5],"float32"), Tensor([1, 1, 5],"float32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"float32"), Tensor([1, 2, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 1, 5],"int64"), Tensor([2, 3, 4, 5],"int64"), )
paddle.remainder(Tensor([1, 1, 5],"float32"), Tensor([2, 3, 4, 5],"float32"), )
paddle.remainder(Tensor([1, 1, 5],"float64"), Tensor([2, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([2, 3, 4, 5],"float64"), Tensor([1, 1, 5],"float64"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"float64"), Tensor([1, 2, 3, 4, 5],"float64"), )
paddle.remainder(Tensor([2, 3, 4, 5],"int32"), Tensor([1, 1, 5],"int32"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"int64"), Tensor([1, 2, 3, 4, 5],"int64"), )
paddle.remainder(Tensor([1, 2, 3, 4, 5],"int32"), Tensor([1, 2, 3, 4, 5],"int32"), )
paddle.remainder(Tensor([2, 3, 4, 5],"int64"), Tensor([1, 1, 5],"int64"), )
paddle.remainder(Tensor([1, 3, 1, 5],"int32"), Tensor([2, 1, 4, 1],"int32"), )
paddle.remainder(Tensor([4, 8],"int64"), Tensor([1],"int64"), )
paddle.remainder(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.remainder(Tensor([2, 1, 4, 1],"float32"), Tensor([1, 3, 1, 5],"float32"), )
paddle.remainder(Tensor([4],"int64"), Tensor([4],"int64"), None, )
paddle.remainder(Tensor([2, 1, 4, 1],"int32"), Tensor([1, 3, 1, 5],"int32"), )
paddle.remainder(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.remainder(Tensor([1, 3, 1, 5],"int64"), Tensor([2, 1, 4, 1],"int64"), )
paddle.remainder(Tensor([],"float32"), Tensor([],"float32"), )
paddle.remainder(Tensor([2, 1, 4, 1],"float64"), Tensor([1, 3, 1, 5],"float64"), )
paddle.remainder(Tensor([1],"int32"), Tensor([1],"int32"), )
paddle.remainder(Tensor([2, 1, 4, 1],"int64"), Tensor([1, 3, 1, 5],"int64"), )
paddle.remainder(Tensor([1, 3, 1, 5],"float64"), Tensor([2, 1, 4, 1],"float64"), )
paddle.remainder(Tensor([4, 4],"int64"), Tensor([1],"int64"), )
paddle.remainder(Tensor([8, 4],"int64"), Tensor([1],"int64"), )
paddle.remainder(Tensor([1, 3, 1, 5],"float32"), Tensor([2, 1, 4, 1],"float32"), )
paddle.renorm(Tensor([10, 20, 1],"float32"), 1.0, -1, 2.05, )
paddle.renorm(x=Tensor([3, 2, 3],"float64"), p=1.5, axis=2, max_norm=20, )
paddle.renorm(x=Tensor([3, 2, 3],"float64"), p=2, axis=1, max_norm=50, )
paddle.renorm(x=Tensor([3, 2, 3],"float64"), p=2, axis=1, max_norm=20, )
paddle.renorm(x=Tensor([3, 2, 3],"float64"), p=1, axis=0, max_norm=5, )
paddle.renorm(Tensor([2, 2, 3],"float32"), 1.0, 2, 2.05, )
paddle.renorm(x=Tensor([3, 2, 3],"float64"), p=2, axis=1, max_norm=40, )
paddle.renorm(Tensor([2, 2, 3],"float32"), 1.0, -1, 2.05, )
paddle.renorm(x=Tensor([3, 2, 3],"float64"), p=1.2, axis=2, max_norm=6.5, )
paddle.renorm(x=Tensor([3, 2, 3],"float32"), p=1, axis=0, max_norm=5, )
paddle.repeat_interleave(Tensor([16, 16],"float32"), repeats=2, axis=Tensor([],"int32"), name=None, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 5],"float64"), repeats=2, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 4, 5],"int32"), repeats=2, axis=3, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 4, 5],"float64"), repeats=2, axis=1, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 4, 5],"float64"), repeats=2, )
paddle.repeat_interleave(Tensor([1, 128],"float32"), 128, 0, )
paddle.repeat_interleave(Tensor([1, 458, 2],"float32"), 3029, axis=0, )
paddle.repeat_interleave(Tensor([24, 16],"float32"), repeats=2, axis=Tensor([],"int32"), name=None, )
paddle.repeat_interleave(x=Tensor([4, 2, 4, 4, 5],"int32"), repeats=Tensor([2],"int32"), axis=1, )
paddle.repeat_interleave(Tensor([2, 1],"int64"), Tensor([],"int64"), axis=1, )
paddle.repeat_interleave(Tensor([2, 2],"float32"), 2, axis=1, )
paddle.repeat_interleave(Tensor([1, 3],"int64"), 5, axis=0, )
paddle.repeat_interleave(x=Tensor([4],"float32"), repeats=3, )
paddle.repeat_interleave(Tensor([2, 3],"int32"), Tensor([6],"int32"), None, )
paddle.repeat_interleave(Tensor([1, 1],"int64"), 8192, 1, )
paddle.repeat_interleave(Tensor([],"float32"), Tensor([],"int64"), None, )
paddle.repeat_interleave(Tensor([10, 1],"int64"), Tensor([],"int64"), axis=1, )
paddle.repeat_interleave(Tensor([12, 1],"int64"), Tensor([],"int64"), axis=1, )
paddle.repeat_interleave(Tensor([3, 4],"float32"), Tensor([3],"int32"), axis=0, )
paddle.repeat_interleave(Tensor([2, 3],"bfloat16"), Tensor([6],"int32"), None, )
paddle.repeat_interleave(x=Tensor([4, 2, 4],"float64"), repeats=2, )
paddle.repeat_interleave(x=Tensor([4],"float64"), repeats=3, )
paddle.repeat_interleave(Tensor([3, 2],"float32"), 2, axis=1, )
paddle.repeat_interleave(Tensor([1, 2],"int64"), 2, axis=0, )
paddle.repeat_interleave(Tensor([1, 70],"int64"), 3, 1, )
paddle.repeat_interleave(Tensor([4, 2],"float32"), 2, axis=1, )
paddle.repeat_interleave(Tensor([2, 3],"int32"), 2, None, )
paddle.repeat_interleave(Tensor([1, 2],"int64"), 1, axis=0, )
paddle.repeat_interleave(Tensor([5, 2],"float32"), 2, axis=1, )
paddle.repeat_interleave(Tensor([2, 3],"bfloat16"), 2, None, )
paddle.repeat_interleave(Tensor([],"float32"), Tensor([1],"int32"), None, )
paddle.repeat_interleave(Tensor([8, 1],"int64"), Tensor([],"int64"), axis=1, )
paddle.repeat_interleave(Tensor([3, 4],"float32"), Tensor([4],"int32"), 1, )
paddle.repeat_interleave(Tensor([],"float32"), 2, None, )
paddle.repeat_interleave(Tensor([10, 2],"float32"), 2, axis=1, )
paddle.repeat_interleave(Tensor([8, 2],"float32"), 2, axis=1, )
paddle.repeat_interleave(Tensor([7, 2],"float32"), 2, axis=1, )
paddle.repeat_interleave(Tensor([1, 2],"float32"), 2, axis=1, )
paddle.repeat_interleave(Tensor([3, 4],"float32"), Tensor([4],"int32"), -1, )
paddle.repeat_interleave(Tensor([6, 1],"int64"), Tensor([],"int64"), axis=1, )
paddle.repeat_interleave(Tensor([4, 1],"int64"), Tensor([],"int64"), axis=1, )
paddle.repeat_interleave(x=Tensor([4, 2],"float64"), repeats=2, )
paddle.reverse(Tensor([12, 4, 16],"float64"), axis=list[0,], )
paddle.reverse(Tensor([12, 4, 8],"float64"), axis=0, )
paddle.reverse(Tensor([6, 13, 3],"int64"), list[0,], )
paddle.reverse(Tensor([4, 12, 8],"float64"), axis=1, )
paddle.reverse(Tensor([2, 1, 2],"float32"), axis=list[0,], )
paddle.reverse(Tensor([1, 1, 4],"float32"), axis=1, )
paddle.reverse(Tensor([1, 1, 2],"float32"), axis=list[0,], )
paddle.reverse(Tensor([2, 1, 4],"float32"), axis=0, )
paddle.reverse(Tensor([2, 1, 3],"float32"), axis=0, )
paddle.reverse(Tensor([],"float32"), axis=list[], )
paddle.reverse(Tensor([13, 7],"int64"), list[1,], )
paddle.reverse(Tensor([12, 4],"float64"), axis=list[0,], )
paddle.roll(Tensor([4, 5, 4, 4],"complex128"), Tensor([1],"int64"), 3, name=None, )
paddle.roll(Tensor([4, 5, 4, 4],"complex128"), Tensor([2],"int64"), tuple(1,3,), name=None, )
paddle.roll(Tensor([4, 5, 4, 4],"float64"), Tensor([4],"int64"), list[0,1,2,3,], name=None, )
paddle.roll(Tensor([4, 5, 4, 4],"complex128"), Tensor([4],"int64"), list[0,1,2,3,], name=None, )
paddle.roll(Tensor([4, 5, 4, 4],"complex128"), Tensor([2],"int64"), tuple(0,3,), name=None, )
paddle.roll(Tensor([5],"float32"), Tensor([1],"int64"), list[0,], name=None, )
paddle.roll(x=Tensor([3, 3],"float64"), shifts=0, axis=None, )
paddle.roll(Tensor([3, 3],"bool"), shifts=1, axis=0, )
paddle.roll(Tensor([39],"float32"), -19, name=None, )
paddle.roll(x=Tensor([3, 3],"float64"), shifts=list[-1,1,], axis=list[0,1,], )
paddle.roll(x=Tensor([3, 3],"float32"), shifts=0, axis=None, )
paddle.roll(x=Tensor([3, 3],"float64"), shifts=1, axis=None, )
paddle.roll(x=Tensor([3, 3],"int64"), shifts=0, axis=None, )
paddle.roll(x=Tensor([3, 3],"int32"), shifts=0, axis=None, )
paddle.roll(Tensor([4, 5, 4],"float64"), Tensor([3],"int64"), list[0,1,2,], name=None, )
paddle.roll(Tensor([3, 3],"float64"), shifts=1, )
paddle.roll(Tensor([5],"float64"), Tensor([1],"int64"), list[0,], name=None, )
paddle.roll(Tensor([2, 4, 2],"float64"), Tensor([3],"int64"), list[0,1,2,], name=None, )
paddle.roll(Tensor([10],"float32"), Tensor([1],"int64"), list[0,], name=None, )
paddle.roll(Tensor([3, 3],"int64"), shifts=Tensor([2],"int64"), axis=list[0,1,], )
paddle.roll(x=Tensor([3, 3],"float64"), shifts=tuple(-1,1,), axis=tuple(0,1,), )
paddle.roll(Tensor([4],"float32"), -2, name=None, )
paddle.roll(x=Tensor([3, 3],"float64"), shifts=-1, axis=0, )
paddle.roll(Tensor([10],"float32"), -5, name=None, )
paddle.roll(Tensor([10],"float64"), Tensor([1],"int64"), list[0,], name=None, )
paddle.roll(Tensor([3, 3],"bool"), shifts=1, )
paddle.roll(Tensor([14],"float32"), -7, name=None, )
paddle.roll(Tensor([3, 3],"float64"), shifts=1, axis=0, )
paddle.rot90(x=Tensor([4, 4, 4, 4],"float64"), k=-1, axes=list[1,2,], )
paddle.rot90(x=Tensor([4, 4, 4, 4],"float64"), )
paddle.rot90(x=Tensor([4, 4, 4, 4],"float64"), k=-1, axes=tuple(2,3,), )
paddle.rot90(x=Tensor([2, 2],"float64"), k=-4, )
paddle.rot90(x=Tensor([4, 4],"float32"), )
paddle.rot90(x=Tensor([4, 4],"int64"), )
paddle.rot90(x=Tensor([3, 4],"float64"), )
paddle.rot90(x=Tensor([4, 4, 4],"float64"), )
paddle.rot90(Tensor([2, 3],"float32"), k=1, axes=list[0,1,], )
paddle.rot90(x=Tensor([4, 4],"float64"), k=-1, )
paddle.rot90(x=Tensor([4, 4],"int32"), )
paddle.rot90(x=Tensor([4, 4],"float64"), )
paddle.rot90(x=Tensor([4, 4],"float64"), k=4, )
paddle.round(x=Tensor([3, 3, 3],"float32"), )
paddle.round(Tensor([10],"float64"), )
paddle.round(Tensor([1, 3, 4],"float64"), )
paddle.round(Tensor([3],"float32"), )
paddle.round(x=Tensor([3, 3, 3],"float64"), )
paddle.round(Tensor([],"float32"), )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.row_stack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.row_stack(list[Tensor([2],"float64"),Tensor([1, 2],"float64"),], )
paddle.row_stack(list[Tensor([],"float32"),], )
paddle.row_stack(list[Tensor([],"float64"),Tensor([],"float64"),Tensor([],"float64"),], )
paddle.row_stack(list[Tensor([],"int64"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([],"float16"),], )
paddle.row_stack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.row_stack(list[Tensor([1],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),], )
paddle.row_stack(list[Tensor([3, 2],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([],"float64"),], )
paddle.row_stack(list[Tensor([5],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),], )
paddle.row_stack(list[Tensor([1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1],"float64"),], )
paddle.row_stack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.row_stack(list[Tensor([],"int32"),], )
paddle.row_stack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.row_stack(list[Tensor([1, 1],"float64"),], )
paddle.row_stack(list[Tensor([3, 4, 2],"float64"),], )
paddle.rsqrt(Tensor([4, 128],"float32"), )
paddle.rsqrt(Tensor([13, 10, 1],"float32"), )
paddle.rsqrt(Tensor([134, 4, 1],"float32"), )
paddle.rsqrt(Tensor([4, 172, 1],"float32"), )
paddle.rsqrt(Tensor([168, 4, 1],"float32"), )
paddle.rsqrt(Tensor([13, 8, 1],"float32"), )
paddle.rsqrt(Tensor([158, 4, 1],"float32"), )
paddle.rsqrt(Tensor([2, 80, 1],"float32"), )
paddle.rsqrt(Tensor([8, 63, 1],"float32"), )
paddle.rsqrt(Tensor([4, 156, 1],"float32"), )
paddle.rsqrt(Tensor([54, 2, 1],"float32"), )
paddle.rsqrt(Tensor([2, 114, 1],"float32"), )
paddle.rsqrt(Tensor([4, 132, 1],"float32"), )
paddle.rsqrt(Tensor([4, 164, 1],"float32"), )
paddle.rsqrt(Tensor([13, 9, 1],"float32"), )
paddle.rsqrt(Tensor([2, 82, 1],"float32"), )
paddle.rsqrt(Tensor([53, 2, 1],"float32"), )
paddle.rsqrt(Tensor([4, 182, 1],"float32"), )
paddle.rsqrt(Tensor([4, 198, 1],"float32"), )
paddle.rsqrt(Tensor([12, 9, 1],"float32"), )
paddle.rsqrt(Tensor([1, 300, 1],"float32"), )
paddle.rsqrt(Tensor([4, 148, 1],"float32"), )
paddle.rsqrt(Tensor([2, 52, 1],"float32"), )
paddle.rsqrt(Tensor([2, 50, 1],"float32"), )
paddle.rsqrt(Tensor([2, 109, 1],"float32"), )
paddle.rsqrt(Tensor([12, 24, 1],"float32"), )
paddle.rsqrt(Tensor([2, 57, 1],"float32"), )
paddle.rsqrt(Tensor([4, 147, 1],"float32"), )
paddle.rsqrt(Tensor([2, 346, 1],"float32"), )
paddle.rsqrt(Tensor([1, 512],"float32"), )
paddle.rsqrt(Tensor([2, 302, 1],"float32"), )
paddle.rsqrt(Tensor([1, 128],"float32"), )
paddle.rsqrt(Tensor([2, 288, 1],"float32"), )
paddle.rsqrt(Tensor([2, 111, 1],"float32"), )
paddle.rsqrt(Tensor([2, 110, 1],"float32"), )
paddle.rsqrt(Tensor([145, 4, 1],"float32"), )
paddle.rsqrt(Tensor([2, 79, 1],"float32"), )
paddle.rsqrt(Tensor([4, 152, 1],"float32"), )
paddle.rsqrt(Tensor([2, 51, 1],"float32"), )
paddle.rsqrt(Tensor([2, 112, 1],"float32"), )
paddle.rsqrt(Tensor([2, 304, 1],"float32"), )
paddle.rsqrt(Tensor([2, 74, 1],"float32"), )
paddle.rsqrt(Tensor([1, 256],"float32"), )
paddle.rsqrt(Tensor([51, 2, 1],"float32"), )
paddle.rsqrt(Tensor([2, 91, 1],"float32"), )
paddle.rsqrt(Tensor([4, 115, 1],"float32"), )
paddle.rsqrt(Tensor([2, 107, 1],"float32"), )
paddle.rsqrt(Tensor([4, 127, 1],"float32"), )
paddle.rsqrt(Tensor([12, 17, 1],"float32"), )
paddle.rsqrt(Tensor([57, 2, 1],"float32"), )
paddle.rsqrt(Tensor([5, 4, 1],"float32"), )
paddle.rsqrt(Tensor([32, 1],"float32"), )
paddle.rsqrt(Tensor([16, 1],"float32"), )
paddle.rsqrt(Tensor([2, 1],"float32"), )
paddle.rsqrt(Tensor([13, 3, 1],"float32"), )
paddle.rsqrt(Tensor([10, 2, 1],"float32"), )
paddle.rsqrt(Tensor([5, 2, 1],"float32"), )
paddle.rsqrt(Tensor([1, 4, 1],"float32"), )
paddle.rsqrt(Tensor([16, 1],"float64"), )
paddle.rsqrt(Tensor([4, 1],"float32"), )
paddle.rsqrt(Tensor([1, 6, 1],"float32"), )
paddle.rsqrt(Tensor([],"float32"), )
paddle.rsqrt(Tensor([39, 2, 1],"float32"), )
paddle.rsqrt(Tensor([47, 2, 1],"float32"), )
paddle.rsqrt(Tensor([1, 10, 1],"float32"), )
paddle.rsqrt(Tensor([1, 58, 1],"float32"), )
paddle.rsqrt(Tensor([5, 6, 1],"float32"), )
paddle.rsqrt(Tensor([2, 1, 1],"float32"), )
paddle.rsqrt(Tensor([1, 5, 1],"float32"), )
paddle.rsqrt(x=Tensor([2, 3, 2],"float32"), )
paddle.rsqrt(Tensor([41, 2, 1],"float32"), )
paddle.rsqrt(Tensor([4, 5, 1],"float32"), )
paddle.rsqrt(Tensor([8, 1],"float32"), )
paddle.rsqrt(Tensor([40, 2, 1],"float32"), )
paddle.rsqrt(Tensor([2, 3, 1],"float32"), )
paddle.rsqrt(Tensor([1, 8, 1],"float32"), )
paddle.rsqrt(Tensor([2, 5, 1],"float32"), )
paddle.rsqrt(Tensor([2, 37, 1],"float32"), )
paddle.rsqrt(Tensor([13, 7, 1],"float32"), )
paddle.rsqrt(Tensor([6, 3, 1],"float32"), )
paddle.rsqrt(x=Tensor([],"float64"), )
paddle.rsqrt(Tensor([6, 1, 1],"float32"), )
paddle.rsqrt(Tensor([2, 10, 1],"float32"), )
paddle.rsqrt(Tensor([6, 5, 1],"float32"), )
paddle.rsqrt(Tensor([2, 3],"float32"), )
paddle.rsqrt(Tensor([2, 3],"float64"), )
paddle.rsqrt(Tensor([20, 1, 1],"float32"), )
paddle.rsqrt(Tensor([1, 1, 1],"float32"), )
paddle.rsqrt(Tensor([1, 2, 1],"float32"), )
paddle.rsqrt(x=Tensor([2, 3, 2],"float64"), )
paddle.rsqrt(Tensor([2, 38, 1],"float32"), )
paddle.rsqrt(Tensor([38, 2, 1],"float32"), )
paddle.rsqrt(Tensor([4, 1, 1],"float32"), )
paddle.rsqrt(Tensor([1, 20, 1],"float32"), )
paddle.rsqrt(Tensor([2, 35, 1],"float32"), )
paddle.rsqrt(Tensor([1, 1],"float32"), )
paddle.rsqrt(Tensor([1, 11, 1],"float32"), )
paddle.rsqrt(Tensor([1, 17, 1],"float32"), )
paddle.rsqrt(Tensor([14, 7, 1],"float32"), )
paddle.rsqrt(Tensor([2, 45, 1],"float32"), )
paddle.rsqrt(Tensor([2, 6, 1],"float32"), )
paddle.rsqrt(Tensor([1, 7, 1],"float32"), )
paddle.rsqrt(Tensor([4, 3, 1],"float32"), )
paddle.rsqrt(x=Tensor([2, 3, 3],"float64"), )
paddle.rsqrt(Tensor([58, 1, 1],"float32"), )
paddle.rsqrt(Tensor([2, 39, 1],"float32"), )
paddle.rsqrt(Tensor([5, 10, 1],"float32"), )
paddle.rsqrt(Tensor([13, 1, 1],"float32"), )
paddle.scale(Tensor([2, 8, 8],"float32"), scale=0.25, )
paddle.scale(Tensor([2, 1],"float32"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([2, 3],"float32"), scale=0.0, )
paddle.scale(Tensor([3],"float32"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([3, 2],"float32"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([2, 1, 2, 3],"float32"), scale=2.0, )
paddle.scale(Tensor([2, 3],"float32"), scale=1.0, )
paddle.scale(x=Tensor([3, 3, 3],"int32"), scale=1.0, bias=0.0, bias_after_scale=True, act=None, )
paddle.scale(Tensor([],"float32"), scale=2.0, bias=1.0, )
paddle.scale(Tensor([2, 3],"float32"), scale=2.0, )
paddle.scale(Tensor([2, 1, 1, 2, 3],"float32"), scale=2.0, )
paddle.scale(Tensor([2],"float32"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([],"float32"), scale=-1.7580993408473766, )
paddle.scale(Tensor([2, 3],"float32"), scale=-1.7580993408473766, )
paddle.scale(Tensor([3],"float64"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([2, 1, 1, 2, 3],"float64"), scale=2.0, )
paddle.scale(x=Tensor([3, 3, 3],"float32"), scale=1.0, bias=0.0, bias_after_scale=True, act=None, )
paddle.scale(Tensor([],"float32"), scale=0.5, )
paddle.scale(Tensor([],"float32"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([2, 25],"float32"), 2.0, 3.0, )
paddle.scale(Tensor([2, 3],"float32"), scale=0.886404894665932, )
paddle.scale(Tensor([],"float64"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(Tensor([],"float16"), scale=0.5, )
paddle.scale(x=Tensor([3, 3, 3],"float64"), scale=2.0, bias=4.0, bias_after_scale=False, act=None, )
paddle.scale(Tensor([],"complex64"), scale=0.5, )
paddle.scale(Tensor([],"float32"), scale=0.886404894665932, )
paddle.scale(x=Tensor([],"float32"), scale=0.16666666666666666, )
paddle.scale(Tensor([],"float64"), scale=0.3333333333333333, )
paddle.scale(x=Tensor([3, 3, 3],"float64"), scale=2.0, bias=4.0, bias_after_scale=True, act=None, )
paddle.scale(x=Tensor([3, 3, 3],"float64"), scale=1.0, bias=0.0, bias_after_scale=True, act=None, )
paddle.scale(Tensor([10],"float64"), scale=-1.0, name="Categorical_entropy", )
paddle.scale(x=Tensor([3, 3, 3],"int64"), scale=1.0, bias=0.0, bias_after_scale=True, act=None, )
paddle.scale(Tensor([],"complex128"), scale=0.5, )
paddle.scale(Tensor([2, 1, 2, 3],"float64"), scale=2.0, )
paddle.scale(Tensor([],"float64"), scale=0.5, )
paddle.scatter_nd(Tensor([3, 2],"int64"), Tensor([3, 9, 10],"float32"), list[3,5,9,10,], )
paddle.scatter_nd(Tensor([3, 1],"int64"), Tensor([3],"int64"), list[8,], )
paddle.scatter_nd(Tensor([4, 1],"int64"), Tensor([4],"int64"), list[4,], )
paddle.scatter_nd(Tensor([5, 1],"int64"), Tensor([5],"float32"), list[8,], )
paddle.scatter_nd(Tensor([30, 1],"int64"), Tensor([30],"float32"), list[128,], )
paddle.scatter_nd(Tensor([38, 1],"int64"), Tensor([38],"float32"), list[128,], )
paddle.scatter_nd(Tensor([4, 1],"int64"), Tensor([4],"float32"), list[4,], )
paddle.scatter_nd(Tensor([1],"int64"), Tensor([],"float32"), list[5,], )
paddle.scatter_nd(Tensor([28, 1],"int64"), Tensor([28],"float32"), list[128,], )
paddle.scatter_nd(Tensor([32, 1],"int64"), Tensor([32],"int64"), list[128,], )
paddle.scatter_nd_add(x=Tensor([2, 3, 4, 2, 4],"float64"), index=Tensor([2, 3],"int64"), updates=Tensor([2, 2, 4],"float64"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 4],"int64"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"int64"), )
paddle.scatter_nd_add(Tensor([2, 3, 4],"int64"), Tensor([2, 3],"int64"), Tensor([2],"int64"), )
paddle.scatter_nd_add(Tensor([2, 2, 2],"float32"), Tensor([2, 3],"int64"), Tensor([2],"float32"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 4],"int32"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"int32"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 4],"float64"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"float64"), )
paddle.scatter_nd_add(x=Tensor([2, 3, 4],"float32"), index=Tensor([2, 3],"int64"), updates=Tensor([2],"float32"), )
paddle.scatter_nd_add(Tensor([1, 2, 2],"float32"), Tensor([1, 3],"int64"), Tensor([1],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float64"), values=Tensor([2, 3],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int64"), values=Tensor([2, 3],"int64"), )
paddle.searchsorted(sorted_sequence=Tensor([7],"float64"), values=Tensor([2, 2, 2],"float64"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([5],"int64"), values=Tensor([2],"int64"), )
paddle.searchsorted(sorted_sequence=Tensor([7],"float32"), values=Tensor([2, 2, 2],"float32"), right=True, )
paddle.searchsorted(Tensor([4],"float64"), Tensor([8],"float64"), right=True, )
paddle.searchsorted(Tensor([3],"float32"), Tensor([4],"float32"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([5],"int32"), values=Tensor([3],"int32"), )
paddle.searchsorted(sorted_sequence=Tensor([7],"int32"), values=Tensor([2, 2, 2],"int32"), right=True, )
paddle.searchsorted(Tensor([5],"int64"), Tensor([],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([2, 5],"float64"), values=Tensor([2, 3],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float32"), values=Tensor([3],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float32"), values=Tensor([4, 2],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int64"), values=Tensor([4, 2],"int64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float64"), values=Tensor([4, 2],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([7],"int64"), values=Tensor([2, 2, 2],"int64"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([5],"int32"), values=Tensor([2],"int32"), )
paddle.searchsorted(Tensor([6],"float64"), Tensor([8],"float64"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([5],"int32"), values=Tensor([4, 2],"int32"), )
paddle.searchsorted(Tensor([3],"float64"), Tensor([8],"float64"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([5],"int64"), values=Tensor([3],"int64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float32"), values=Tensor([2],"float32"), )
paddle.searchsorted(Tensor([5],"float64"), Tensor([2, 3],"float64"), out_int32=True, )
paddle.searchsorted(Tensor([3],"float64"), Tensor([4],"float64"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([2, 5],"float32"), values=Tensor([2, 3],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([2, 5],"int32"), values=Tensor([2, 3],"int32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float64"), values=Tensor([2],"float64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float32"), values=Tensor([2, 3],"float32"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"int32"), values=Tensor([2, 3],"int32"), )
paddle.searchsorted(Tensor([2],"float64"), Tensor([8],"float64"), right=True, )
paddle.searchsorted(sorted_sequence=Tensor([2, 5],"int64"), values=Tensor([2, 3],"int64"), )
paddle.searchsorted(sorted_sequence=Tensor([5],"float64"), values=Tensor([3],"float64"), )
paddle.searchsorted(Tensor([5],"float64"), Tensor([2, 3],"float64"), right=True, )
paddle.searchsorted(Tensor([4],"float64"), Tensor([4],"float64"), right=True, )
paddle.searchsorted(Tensor([5],"float64"), Tensor([8],"float64"), right=True, )
paddle.select_scatter(Tensor([2, 3, 4, 5],"float64"), Tensor([2, 3, 5],"float64"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4, 5, 6],"int32"), Tensor([2, 3, 5, 6],"int32"), 2, 1, )
paddle.select_scatter(Tensor([2, 3, 4],"float32"), Tensor([2, 4],"float32"), 1, 1, )
paddle.sgn(Tensor([12, 20, 2],"float32"), )
paddle.sgn(Tensor([12, 20, 2],"float64"), )
paddle.sgn(Tensor([2, 4],"complex64"), )
paddle.sgn(Tensor([],"float32"), )
paddle.sgn(Tensor([2, 4],"complex128"), )
paddle.shard_index(input=Tensor([2, 1],"int64"), index_num=6, nshards=40, shard_id=4, )
paddle.shard_index(input=Tensor([4, 2, 1],"int64"), index_num=20, nshards=4, shard_id=1, )
paddle.shard_index(input=Tensor([4, 1],"int64"), index_num=13, nshards=3, shard_id=0, )
paddle.shard_index(input=Tensor([4, 2, 1],"int64"), index_num=20, nshards=4, shard_id=1, ignore_value=16, )
paddle.shard_index(input=Tensor([2, 1],"int64"), index_num=20, nshards=2, shard_id=1, )
paddle.sign(Tensor([2, 3, 4, 5],"int8"), )
paddle.sign(Tensor([12, 20, 2],"float64"), )
paddle.sign(Tensor([12, 20, 2],"uint8"), )
paddle.sign(Tensor([12, 20, 2],"int64"), )
paddle.sign(Tensor([11, 17],"float32"), )
paddle.sign(Tensor([132],"uint8"), )
paddle.sign(Tensor([12, 20, 2],"int32"), )
paddle.sign(Tensor([12, 20, 2],"int16"), )
paddle.sign(Tensor([3, 1, 64],"int64"), )
paddle.sign(Tensor([12, 20, 2],"int8"), )
paddle.sign(Tensor([12, 20, 2],"float32"), )
paddle.sign(Tensor([2, 3, 4, 5],"float64"), )
paddle.sign(Tensor([132],"int64"), )
paddle.sign(x=Tensor([4],"float32"), )
paddle.sign(Tensor([1, 4],"float32"), )
paddle.sign(Tensor([5],"float64"), )
paddle.sign(Tensor([],"float32"), )
paddle.sign(Tensor([9, 6],"float32"), )
paddle.sign(x=Tensor([36],"float32"), )
paddle.sign(x=Tensor([4],"float64"), )
paddle.sign(Tensor([5],"complex64"), )
paddle.signbit(Tensor([132],"uint8"), )
paddle.signbit(Tensor([132],"int64"), )
paddle.signbit(Tensor([12, 20, 2],"int16"), )
paddle.signbit(Tensor([12, 20, 2],"int32"), )
paddle.signbit(Tensor([12, 20, 2],"int8"), )
paddle.signbit(Tensor([11, 17],"float32"), )
paddle.signbit(Tensor([12, 20, 2],"float64"), )
paddle.signbit(Tensor([2, 3, 4, 5],"float64"), )
paddle.signbit(Tensor([2, 3, 4, 5],"int8"), )
paddle.signbit(Tensor([12, 20, 2],"uint8"), )
paddle.signbit(Tensor([12, 20, 2],"int64"), )
paddle.signbit(Tensor([12, 20, 2],"float32"), )
paddle.sin(Tensor([511],"float64"), )
paddle.sin(Tensor([8, 40],"float32"), )
paddle.sin(Tensor([16, 16],"float32"), )
paddle.sin(Tensor([11, 50],"float32"), )
paddle.sin(Tensor([28, 16],"float32"), )
paddle.sin(Tensor([512, 1],"float32"), )
paddle.sin(Tensor([10, 10],"float32"), )
paddle.sin(Tensor([7, 110],"float32"), )
paddle.sin(Tensor([14, 16],"float32"), )
paddle.sin(Tensor([128, 1],"float32"), )
paddle.sin(Tensor([304],"float32"), )
paddle.sin(Tensor([10, 20, 1],"float32"), )
paddle.sin(Tensor([513],"float64"), )
paddle.sin(Tensor([3, 306],"float32"), )
paddle.sin(Tensor([7, 2],"float32"), )
paddle.sin(Tensor([4, 2],"float32"), )
paddle.sin(x=Tensor([2, 2, 3],"float64"), )
paddle.sin(Tensor([2],"float32"), )
paddle.sin(Tensor([8, 2],"float32"), )
paddle.sin(Tensor([2, 32],"float32"), )
paddle.sin(Tensor([64, 1],"float32"), )
paddle.sin(Tensor([10, 2],"float32"), )
paddle.sin(Tensor([2, 16],"float32"), )
paddle.sin(Tensor([1, 2],"float32"), )
paddle.sin(Tensor([2, 14],"float32"), )
paddle.sin(x=Tensor([4],"float64"), )
paddle.sin(Tensor([2, 3, 4],"float32"), )
paddle.sin(x=Tensor([3],"float64"), )
paddle.sin(x=Tensor([2, 2, 3],"float64"), name="test_sin", )
paddle.sin(Tensor([2, 3],"float32"), )
paddle.sin(Tensor([1, 25, 1],"float32"), )
paddle.sin(Tensor([2, 2],"float32"), )
paddle.sin(Tensor([2, 44],"float32"), )
paddle.sin(Tensor([2, 28],"float32"), )
paddle.sin(Tensor([2, 10],"float32"), )
paddle.sin(Tensor([5, 2],"float32"), )
paddle.sin(Tensor([15, 1],"float32"), )
paddle.sin(Tensor([3, 28],"float32"), )
paddle.sin(Tensor([],"float32"), )
paddle.sin(Tensor([25, 1],"float32"), )
paddle.sin(Tensor([3, 2],"float32"), )
paddle.sin(x=Tensor([4],"float32"), )
paddle.sin(Tensor([2],"float64"), )
paddle.sinc(Tensor([6],"float64"), )
paddle.sinc(Tensor([6],"float32"), )
paddle.sinh(Tensor([10, 20, 1],"float32"), )
paddle.sinh(x=Tensor([1, 2],"float32"), )
paddle.sinh(x=Tensor([1, 2],"float64"), )
paddle.sinh(x=Tensor([2, 2],"float64"), )
paddle.sinh(Tensor([],"float32"), )
paddle.sinh(x=Tensor([1],"float64"), )
paddle.sinh(x=Tensor([2, 3, 2, 2],"float64"), )
paddle.slice_scatter(Tensor([8, 6, 3],"float32"), Tensor([8, 2, 3],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 5],"float32"), Tensor([8, 2, 3, 5],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3, 5],"float64"), Tensor([8, 2, 3, 5],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6, 3],"float64"), Tensor([8, 2, 3],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 9, 6],"float64"), Tensor([1, 9, 1],"float64"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.slice_scatter(Tensor([8, 9, 6],"float32"), Tensor([1, 9, 1],"float32"), axes=list[0,2,], starts=list[2,3,], ends=list[7,5,], strides=list[3,2,], )
paddle.slice_scatter(Tensor([8, 6],"float32"), Tensor([8, 2],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6],"bool"), Tensor([8, 2],"bool"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6],"int64"), Tensor([8, 2],"int64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 9],"float64"), Tensor([8, 1],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6],"int32"), Tensor([8, 2],"int32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6],"float64"), Tensor([8, 2],"float64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6],"bfloat16"), Tensor([8, 2],"bfloat16"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6],"uint8"), Tensor([8, 2],"uint8"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6],"complex128"), Tensor([8, 2],"complex128"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6],"int16"), Tensor([8, 2],"int16"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 9],"float32"), Tensor([8, 1],"float32"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6],"int8"), Tensor([8, 2],"int8"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6],"float16"), Tensor([8, 2],"float16"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.slice_scatter(Tensor([8, 6],"complex64"), Tensor([8, 2],"complex64"), axes=list[1,], starts=list[2,], ends=list[6,], strides=list[2,], )
paddle.sqrt(Tensor([4, 39, 1],"float32"), )
paddle.sqrt(Tensor([4, 63, 1],"float32"), )
paddle.sqrt(Tensor([8, 27, 1],"float32"), )
paddle.sqrt(Tensor([4, 234, 1],"float32"), )
paddle.sqrt(Tensor([16, 55, 1],"float32"), )
paddle.sqrt(Tensor([4, 163, 1],"float32"), )
paddle.sqrt(Tensor([8, 18, 1],"float32"), )
paddle.sqrt(Tensor([16, 45, 1],"float32"), )
paddle.sqrt(Tensor([16, 28, 1],"float32"), )
paddle.sqrt(Tensor([16, 12, 1],"float32"), )
paddle.sqrt(Tensor([104, 1],"float32"), )
paddle.sqrt(Tensor([8, 15, 1],"float32"), )
paddle.sqrt(Tensor([4, 180, 1],"float32"), )
paddle.sqrt(Tensor([4, 62, 1],"float32"), )
paddle.sqrt(Tensor([8, 44, 1],"float32"), )
paddle.sqrt(Tensor([4, 45, 1],"float32"), )
paddle.sqrt(Tensor([16, 36, 1],"float32"), )
paddle.sqrt(Tensor([103, 1],"float32"), )
paddle.sqrt(Tensor([8, 19, 1],"float32"), )
paddle.sqrt(Tensor([8, 26, 1],"float32"), )
paddle.sqrt(Tensor([16, 17, 1],"float32"), )
paddle.sqrt(Tensor([4, 83, 1],"float32"), )
paddle.sqrt(Tensor([4, 65, 1],"float32"), )
paddle.sqrt(Tensor([8, 41, 1],"float32"), )
paddle.sqrt(Tensor([8, 14, 1],"float32"), )
paddle.sqrt(Tensor([64, 13, 1],"float32"), )
paddle.sqrt(Tensor([8, 43, 1],"float32"), )
paddle.sqrt(Tensor([16, 16, 1],"float32"), )
paddle.sqrt(Tensor([8, 24, 1],"float32"), )
paddle.sqrt(Tensor([4, 77, 1],"float32"), )
paddle.sqrt(Tensor([64, 15, 1],"float32"), )
paddle.sqrt(Tensor([4, 35, 1],"float32"), )
paddle.sqrt(Tensor([4, 26, 1],"float32"), )
paddle.sqrt(Tensor([16, 34, 1],"float32"), )
paddle.sqrt(Tensor([304],"float32"), )
paddle.sqrt(Tensor([4, 89, 1],"float32"), )
paddle.sqrt(Tensor([4, 29, 1],"float32"), )
paddle.sqrt(Tensor([16, 33, 1],"float32"), )
paddle.sqrt(Tensor([8, 50, 1],"float32"), )
paddle.sqrt(Tensor([4, 174, 1],"float32"), )
paddle.sqrt(Tensor([1, 995],"float32"), )
paddle.sqrt(Tensor([108, 1],"float32"), )
paddle.sqrt(Tensor([4, 47, 1],"float32"), )
paddle.sqrt(Tensor([4, 58, 1],"float32"), )
paddle.sqrt(Tensor([4, 176, 1],"float32"), )
paddle.sqrt(Tensor([8, 21, 1],"float32"), )
paddle.sqrt(Tensor([4, 173, 1],"float32"), )
paddle.sqrt(Tensor([192, 1, 1, 1],"float32"), )
paddle.sqrt(Tensor([16, 14, 1],"float32"), )
paddle.sqrt(Tensor([8, 33, 1],"float32"), )
paddle.sqrt(Tensor([8, 54, 1],"float32"), )
paddle.sqrt(Tensor([4, 31, 1],"float32"), )
paddle.sqrt(Tensor([4, 43, 1],"float32"), )
paddle.sqrt(Tensor([16, 49, 1],"float32"), )
paddle.sqrt(Tensor([4, 98, 1],"float32"), )
paddle.sqrt(Tensor([16, 29, 1],"float32"), )
paddle.sqrt(Tensor([8, 35, 1],"float32"), )
paddle.sqrt(Tensor([8, 30, 1],"float32"), )
paddle.sqrt(Tensor([8, 37, 1],"float32"), )
paddle.sqrt(Tensor([16, 40, 1],"float32"), )
paddle.sqrt(Tensor([26, 7, 1],"float32"), )
paddle.sqrt(Tensor([100, 1],"float32"), )
paddle.sqrt(Tensor([4, 37, 1],"float32"), )
paddle.sqrt(Tensor([16, 15, 1],"float32"), )
paddle.sqrt(Tensor([4, 64, 1],"float32"), )
paddle.sqrt(Tensor([4, 27, 1],"float32"), )
paddle.sqrt(Tensor([16, 22, 1],"float32"), )
paddle.sqrt(Tensor([8, 20, 1],"float32"), )
paddle.sqrt(Tensor([4, 90, 1],"float32"), )
paddle.sqrt(Tensor([16, 20, 1],"float32"), )
paddle.sqrt(Tensor([16, 54, 1],"float32"), )
paddle.sqrt(Tensor([4, 97, 1],"float32"), )
paddle.sqrt(Tensor([4, 36, 1],"float32"), )
paddle.sqrt(Tensor([16, 42, 1],"float32"), )
paddle.sqrt(Tensor([16, 24, 1],"float32"), )
paddle.sqrt(Tensor([8, 13, 1],"float32"), )
paddle.sqrt(Tensor([4, 51, 1],"float32"), )
paddle.sqrt(Tensor([8, 16, 1],"float32"), )
paddle.sqrt(Tensor([16, 21, 1],"float32"), )
paddle.sqrt(Tensor([513],"float64"), )
paddle.sqrt(Tensor([128, 1],"float32"), )
paddle.sqrt(Tensor([384, 1, 1, 1],"float32"), )
paddle.sqrt(Tensor([8, 23, 1],"float32"), )
paddle.sqrt(Tensor([4, 167, 1],"float32"), )
paddle.sqrt(Tensor([16, 23, 1],"float32"), )
paddle.sqrt(Tensor([4, 95, 1],"float32"), )
paddle.sqrt(Tensor([4, 130, 1],"float32"), )
paddle.sqrt(Tensor([16, 37, 1],"float32"), )
paddle.sqrt(Tensor([16, 39, 1],"float32"), )
paddle.sqrt(Tensor([8, 38, 1],"float32"), )
paddle.sqrt(Tensor([4, 119, 1],"float32"), )
paddle.sqrt(Tensor([4, 41, 1],"float32"), )
paddle.sqrt(Tensor([8, 53, 1],"float32"), )
paddle.sqrt(Tensor([16, 11, 1],"float32"), )
paddle.sqrt(Tensor([4, 30, 1],"float32"), )
paddle.sqrt(Tensor([64, 14, 1],"float32"), )
paddle.sqrt(Tensor([4, 113, 1],"float32"), )
paddle.sqrt(Tensor([16, 10, 1],"float32"), )
paddle.sqrt(Tensor([4, 99, 1],"float32"), )
paddle.sqrt(Tensor([4, 80, 1],"float32"), )
paddle.sqrt(Tensor([16, 50, 1],"float32"), )
paddle.sqrt(Tensor([16, 27, 1],"float32"), )
paddle.sqrt(Tensor([8, 52, 1],"float32"), )
paddle.sqrt(Tensor([52, 7, 1],"float32"), )
paddle.sqrt(Tensor([4, 34, 1],"float32"), )
paddle.sqrt(Tensor([4, 171, 1],"float32"), )
paddle.sqrt(Tensor([16, 31, 1],"float32"), )
paddle.sqrt(Tensor([8, 29, 1],"float32"), )
paddle.sqrt(Tensor([16, 48, 1],"float32"), )
paddle.sqrt(Tensor([4, 40, 1],"float32"), )
paddle.sqrt(Tensor([4, 46, 1],"float32"), )
paddle.sqrt(Tensor([8, 32, 1],"float32"), )
paddle.sqrt(Tensor([8, 47, 1],"float32"), )
paddle.sqrt(Tensor([1, 159],"float32"), )
paddle.sqrt(Tensor([16, 43, 1],"float32"), )
paddle.sqrt(Tensor([8, 45, 1],"float32"), )
paddle.sqrt(Tensor([16, 7, 1],"float32"), )
paddle.sqrt(Tensor([8, 48, 1],"float32"), )
paddle.sqrt(Tensor([8, 34, 1],"float32"), )
paddle.sqrt(Tensor([8, 39, 1],"float32"), )
paddle.sqrt(Tensor([4, 28, 1],"float32"), )
paddle.sqrt(Tensor([16, 19, 1],"float32"), )
paddle.sqrt(Tensor([16, 13, 1],"float32"), )
paddle.sqrt(Tensor([4, 53, 1],"float32"), )
paddle.sqrt(Tensor([8, 25, 1],"float32"), )
paddle.sqrt(Tensor([8, 17, 1],"float32"), )
paddle.sqrt(Tensor([4, 135, 1],"float32"), )
paddle.sqrt(Tensor([16, 26, 1],"float32"), )
paddle.sqrt(Tensor([4, 78, 1],"float32"), )
paddle.sqrt(Tensor([4, 121, 1],"float32"), )
paddle.sqrt(Tensor([8, 22, 1],"float32"), )
paddle.sqrt(Tensor([16, 9, 1],"float32"), )
paddle.sqrt(Tensor([8, 46, 1],"float32"), )
paddle.sqrt(Tensor([4, 33, 1],"float32"), )
paddle.sqrt(Tensor([16, 18, 1],"float32"), )
paddle.sqrt(Tensor([4, 56, 1],"float32"), )
paddle.sqrt(Tensor([4, 166, 1],"float32"), )
paddle.sqrt(Tensor([111, 1],"float32"), )
paddle.sqrt(Tensor([4, 50, 1],"float32"), )
paddle.sqrt(Tensor([16, 38, 1],"float32"), )
paddle.sqrt(Tensor([8, 36, 1],"float32"), )
paddle.sqrt(Tensor([8, 40, 1],"float32"), )
paddle.sqrt(Tensor([4, 120, 1],"float32"), )
paddle.sqrt(Tensor([16, 8, 1],"float32"), )
paddle.sqrt(Tensor([4, 52, 1],"float32"), )
paddle.sqrt(Tensor([8, 28, 1],"float32"), )
paddle.sqrt(Tensor([16, 52, 1],"float32"), )
paddle.sqrt(Tensor([4, 92, 1],"float32"), )
paddle.sqrt(Tensor([16, 32, 1],"float32"), )
paddle.sqrt(Tensor([4, 73, 1],"float32"), )
paddle.sqrt(Tensor([4, 127, 1],"float32"), )
paddle.sqrt(Tensor([4, 25, 1],"float32"), )
paddle.sqrt(Tensor([8, 42, 1],"float32"), )
paddle.sqrt(Tensor([16, 35, 1],"float32"), )
paddle.sqrt(Tensor([4, 211, 1],"float32"), )
paddle.sqrt(Tensor([4, 48, 1],"float32"), )
paddle.sqrt(Tensor([16, 30, 1],"float32"), )
paddle.sqrt(Tensor([8, 31, 1],"float32"), )
paddle.sqrt(Tensor([16, 25, 1],"float32"), )
paddle.sqrt(Tensor([4, 7, 1],"float32"), )
paddle.sqrt(Tensor([2, 5, 1],"float32"), )
paddle.sqrt(Tensor([11, 1],"float32"), )
paddle.sqrt(Tensor([],"float32"), )
paddle.sqrt(Tensor([4, 2, 1],"float32"), )
paddle.sqrt(Tensor([24, 1, 1, 1],"float32"), )
paddle.sqrt(Tensor([1, 2, 2],"float32"), )
paddle.sqrt(Tensor([1, 6, 1],"float32"), )
paddle.sqrt(Tensor([79, 1],"float32"), )
paddle.sqrt(Tensor([8, 5, 1],"float32"), )
paddle.sqrt(Tensor([2, 25, 1],"float32"), )
paddle.sqrt(Tensor([74, 1],"float32"), )
paddle.sqrt(Tensor([3, 1],"float32"), )
paddle.sqrt(x=Tensor([3, 3],"float64"), )
paddle.sqrt(Tensor([68, 1],"float32"), )
paddle.sqrt(Tensor([2, 2, 1],"float32"), )
paddle.sqrt(Tensor([1, 8, 1],"float32"), )
paddle.sqrt(Tensor([35, 1],"float32"), )
paddle.sqrt(Tensor([38, 1],"float32"), )
paddle.sqrt(Tensor([2, 20, 1],"float32"), )
paddle.sqrt(Tensor([4, 12, 1],"float32"), )
paddle.sqrt(Tensor([8, 11, 1],"float32"), )
paddle.sqrt(Tensor([14, 1],"float32"), )
paddle.sqrt(Tensor([2, 13, 1],"float32"), )
paddle.sqrt(Tensor([2, 21, 1],"float32"), )
paddle.sqrt(Tensor([1, 1],"float32"), )
paddle.sqrt(Tensor([1, 14, 1],"float32"), )
paddle.sqrt(Tensor([48, 1, 1, 1],"float32"), )
paddle.sqrt(Tensor([23, 1],"float32"), )
paddle.sqrt(Tensor([1, 3, 1],"float32"), )
paddle.sqrt(Tensor([89, 1],"float32"), )
paddle.sqrt(Tensor([16, 3, 1],"float32"), )
paddle.sqrt(Tensor([96, 1, 1, 1],"float32"), )
paddle.sqrt(Tensor([8, 10, 1],"float32"), )
paddle.sqrt(Tensor([72, 1],"float32"), )
paddle.sqrt(Tensor([9],"float32"), )
paddle.sqrt(Tensor([8, 1],"float32"), )
paddle.sqrt(Tensor([90, 1],"float32"), )
paddle.sqrt(Tensor([2, 8, 1],"float32"), )
paddle.sqrt(Tensor([2, 9, 1],"float32"), )
paddle.sqrt(Tensor([1, 12, 1],"float32"), )
paddle.sqrt(x=Tensor([1],"float64"), )
paddle.sqrt(Tensor([57, 1],"float32"), )
paddle.sqrt(Tensor([10],"float32"), )
paddle.sqrt(Tensor([65, 1],"float32"), )
paddle.sqrt(Tensor([39, 1],"float32"), )
paddle.sqrt(Tensor([17, 1],"float32"), )
paddle.sqrt(x=Tensor([2, 1, 2],"float32"), )
paddle.sqrt(Tensor([8],"float32"), )
paddle.sqrt(Tensor([8, 9, 1],"float32"), )
paddle.sqrt(Tensor([8, 1, 1, 1],"float32"), )
paddle.sqrt(Tensor([47, 1],"float32"), )
paddle.sqrt(Tensor([2, 3, 1],"float32"), )
paddle.sqrt(Tensor([5],"float64"), )
paddle.sqrt(Tensor([4, 10, 1],"float32"), )
paddle.sqrt(Tensor([4, 3, 1],"float32"), )
paddle.sqrt(Tensor([16, 5, 1],"float32"), )
paddle.sqrt(Tensor([2, 30, 1],"float32"), )
paddle.sqrt(Tensor([88, 1],"float32"), )
paddle.sqrt(Tensor([83, 1],"float32"), )
paddle.sqrt(Tensor([96, 1],"float32"), )
paddle.sqrt(Tensor([66, 1],"float32"), )
paddle.sqrt(Tensor([2, 15, 1],"float32"), )
paddle.sqrt(Tensor([55, 1],"float32"), )
paddle.sqrt(Tensor([81, 1],"float32"), )
paddle.sqrt(Tensor([8, 1, 1],"float32"), )
paddle.sqrt(Tensor([1, 4],"float32"), )
paddle.sqrt(Tensor([8, 2, 1],"float32"), )
paddle.sqrt(Tensor([2, 28, 1],"float32"), )
paddle.sqrt(Tensor([1],"float32"), )
paddle.sqrt(Tensor([95, 1],"float32"), )
paddle.sqrt(Tensor([21, 1],"float32"), )
paddle.sqrt(Tensor([94, 1],"float32"), )
paddle.sqrt(Tensor([19, 1],"float32"), )
paddle.sqrt(Tensor([2, 2, 2],"float32"), )
paddle.sqrt(Tensor([3],"float64"), )
paddle.sqrt(Tensor([6],"float32"), )
paddle.sqrt(Tensor([4, 17, 1],"float32"), )
paddle.sqrt(Tensor([8, 4, 1],"float32"), )
paddle.sqrt(Tensor([2, 1],"float32"), )
paddle.sqrt(Tensor([54, 1],"float32"), )
paddle.sqrt(x=Tensor([16, 1, 1],"float32"), )
paddle.sqrt(Tensor([5, 1],"float32"), )
paddle.sqrt(Tensor([4, 1],"float32"), )
paddle.sqrt(Tensor([1],"float32"), )
paddle.sqrt(Tensor([2],"float32"), )
paddle.sqrt(Tensor([13, 1],"float32"), )
paddle.sqrt(Tensor([2, 16, 1],"float32"), )
paddle.sqrt(Tensor([48, 1],"float32"), )
paddle.sqrt(Tensor([44, 1],"float32"), )
paddle.sqrt(Tensor([1, 13, 1],"float32"), )
paddle.sqrt(Tensor([52, 1],"float32"), )
paddle.sqrt(Tensor([18, 1],"float32"), )
paddle.sqrt(Tensor([42, 1],"float32"), )
paddle.sqrt(Tensor([38],"float32"), )
paddle.sqrt(Tensor([1, 3, 10],"float64"), )
paddle.sqrt(Tensor([9, 1],"float32"), )
paddle.sqrt(Tensor([2, 14, 1],"float32"), )
paddle.sqrt(Tensor([29, 1],"float32"), )
paddle.sqrt(x=Tensor([3],"float64"), name=None, )
paddle.sqrt(Tensor([98, 1],"float32"), )
paddle.sqrt(Tensor([2, 1, 1],"float32"), )
paddle.sqrt(Tensor([32, 1],"float32"), )
paddle.sqrt(x=Tensor([2],"float64"), )
paddle.sqrt(Tensor([56, 1],"float32"), )
paddle.sqrt(x=Tensor([13, 1, 1],"float32"), )
paddle.sqrt(Tensor([51, 1],"float32"), )
paddle.sqrt(Tensor([8, 8, 1],"float32"), )
paddle.sqrt(Tensor([60, 1],"float32"), )
paddle.sqrt(Tensor([4, 4, 1],"float32"), )
paddle.sqrt(Tensor([2, 12, 1],"float32"), )
paddle.sqrt(Tensor([37, 1],"float32"), )
paddle.sqrt(Tensor([16, 6, 1],"float32"), )
paddle.sqrt(Tensor([50, 1],"float32"), )
paddle.sqrt(x=Tensor([4],"float64"), )
paddle.sqrt(Tensor([4, 5, 1],"float32"), )
paddle.sqrt(Tensor([4, 19, 1],"float32"), )
paddle.sqrt(Tensor([4],"float64"), )
paddle.sqrt(Tensor([7, 1],"float32"), )
paddle.sqrt(Tensor([49, 1],"float32"), )
paddle.sqrt(Tensor([64, 1, 1, 1],"float32"), )
paddle.sqrt(Tensor([2, 7, 1],"float32"), )
paddle.sqrt(Tensor([1, 20, 1],"float32"), )
paddle.sqrt(x=Tensor([3, 1, 1],"float32"), )
paddle.sqrt(Tensor([69, 1],"float32"), )
paddle.sqrt(Tensor([4, 23, 1],"float32"), )
paddle.sqrt(Tensor([6, 1],"float32"), )
paddle.sqrt(Tensor([30, 1],"float32"), )
paddle.sqrt(Tensor([46, 1],"float32"), )
paddle.sqrt(Tensor([5, 3],"float64"), )
paddle.sqrt(Tensor([5],"float32"), )
paddle.sqrt(Tensor([85, 1],"float32"), )
paddle.sqrt(Tensor([45, 1],"float32"), )
paddle.sqrt(Tensor([75, 1],"float32"), )
paddle.sqrt(Tensor([1, 11, 1],"float32"), )
paddle.sqrt(Tensor([40, 1],"float32"), )
paddle.sqrt(Tensor([4, 24, 1],"float32"), )
paddle.sqrt(Tensor([41, 1],"float32"), )
paddle.sqrt(Tensor([2, 19, 1],"float32"), )
paddle.sqrt(Tensor([4, 20, 1],"float32"), )
paddle.sqrt(Tensor([25, 1],"float32"), )
paddle.sqrt(Tensor([12, 1],"float32"), )
paddle.sqrt(Tensor([36, 1],"float32"), )
paddle.sqrt(Tensor([24, 1],"float32"), )
paddle.sqrt(Tensor([10, 1],"float32"), )
paddle.sqrt(Tensor([33, 1],"float32"), )
paddle.sqrt(Tensor([91, 1],"float32"), )
paddle.sqrt(Tensor([15, 1],"float32"), )
paddle.sqrt(Tensor([63, 1],"float32"), )
paddle.sqrt(Tensor([1, 10],"float64"), )
paddle.sqrt(Tensor([8, 12, 1],"float32"), )
paddle.sqrt(Tensor([22, 1],"float32"), )
paddle.sqrt(Tensor([2, 11, 1],"float32"), )
paddle.sqrt(Tensor([1, 1, 1],"float32"), )
paddle.sqrt(Tensor([76, 1],"float32"), )
paddle.sqrt(Tensor([59, 1],"float32"), )
paddle.sqrt(Tensor([87, 1],"float32"), )
paddle.sqrt(Tensor([67, 1],"float32"), )
paddle.square(Tensor([18, 6],"float32"), )
paddle.square(Tensor([101, 1],"float32"), )
paddle.square(Tensor([200, 1],"float32"), )
paddle.square(Tensor([125, 1],"float32"), name=None, )
paddle.square(Tensor([2, 96, 2],"float32"), name=None, )
paddle.square(Tensor([3, 3, 10, 10],"float32"), )
paddle.square(Tensor([600, 1],"float32"), name=None, )
paddle.square(Tensor([2, 10, 10],"float32"), )
paddle.square(Tensor([100, 1],"float32"), name=None, )
paddle.square(Tensor([10, 10],"float32"), )
paddle.square(Tensor([201, 1],"float32"), )
paddle.square(Tensor([128, 1],"float32"), name=None, )
paddle.square(Tensor([400, 1],"float32"), name=None, )
paddle.square(Tensor([3, 96, 1],"float32"), )
paddle.square(Tensor([100, 1],"float32"), )
paddle.square(Tensor([10, 10],"float32"), name=None, )
paddle.square(Tensor([251, 1],"float32"), )
paddle.square(Tensor([544, 1],"float32"), name=None, )
paddle.square(Tensor([256, 1],"float32"), name=None, )
paddle.square(Tensor([501, 1],"float32"), )
paddle.square(Tensor([3, 3, 10, 10],"float32"), name=None, )
paddle.square(Tensor([101, 1],"float32"), name=None, )
paddle.square(Tensor([2, 96, 2],"float32"), )
paddle.square(Tensor([512, 1],"float32"), name=None, )
paddle.square(Tensor([2, 10, 10],"float32"), name=None, )
paddle.square(Tensor([992, 1],"float32"), name=None, )
paddle.square(Tensor([600, 1],"float64"), name=None, )
paddle.square(Tensor([650, 1],"float32"), name=None, )
paddle.square(Tensor([],"float32"), )
paddle.square(Tensor([1, 1],"float32"), )
paddle.square(Tensor([10],"float32"), )
paddle.square(Tensor([],"float64"), )
paddle.square(Tensor([5, 2],"float64"), )
paddle.square(Tensor([10, 2],"float32"), )
paddle.square(Tensor([10, 2, 3],"float32"), )
paddle.square(Tensor([3, 2, 3, 3],"float32"), )
paddle.square(Tensor([2, 2],"float32"), )
paddle.square(Tensor([3, 8],"float32"), )
paddle.square(Tensor([5, 3],"float64"), )
paddle.square(Tensor([0, 0, 0],"float32"), )
paddle.square(Tensor([4, 4],"float64"), )
paddle.square(x=Tensor([2],"int64"), )
paddle.square(Tensor([2, 3],"float32"), )
paddle.square(Tensor([2, 3],"float64"), )
paddle.square(Tensor([10, 3],"float32"), )
paddle.square(Tensor([10, 2],"float64"), )
paddle.square(Tensor([15, 1],"float32"), name=None, )
paddle.square(x=Tensor([2],"int32"), )
paddle.square(Tensor([8],"float32"), )
paddle.square(Tensor([4, 1],"float32"), name=None, )
paddle.square(Tensor([0],"float32"), )
paddle.square(Tensor([3, 4],"float32"), )
paddle.square(x=Tensor([2],"float32"), )
paddle.square(Tensor([4, 3, 2],"float64"), )
paddle.square(x=Tensor([2],"float64"), )
paddle.square(Tensor([32, 1],"float32"), name=None, )
paddle.square(Tensor([99, 1],"float32"), name=None, )
paddle.square(Tensor([1],"float64"), )
paddle.square(Tensor([25, 1],"float32"), name=None, )
paddle.square(Tensor([3, 3],"float64"), )
paddle.square(Tensor([20, 1],"float32"), name=None, )
paddle.square(Tensor([1],"float32"), )
paddle.square(Tensor([2, 1],"float32"), )
paddle.square(Tensor([89, 1],"float32"), name=None, )
paddle.square(Tensor([3],"float32"), )
paddle.square(Tensor([2, 4],"float64"), )
paddle.square(Tensor([1, 1, 1],"float32"), )
paddle.square(Tensor([1, 1],"float32"), name=None, )
paddle.square(Tensor([50, 1],"float32"), name=None, )
paddle.square(Tensor([2, 42],"float32"), )
paddle.stanh(Tensor([],"float32"), )
paddle.stanh(x=Tensor([2, 2],"float32"), scale_a=6.42, scale_b=3.58, )
paddle.stanh(x=Tensor([2, 3, 2, 2],"float64"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([1, 2],"float32"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([1, 2],"float64"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([2, 2],"float64"), scale_a=6.42, scale_b=3.58, )
paddle.stanh(x=Tensor([1, 2],"float32"), scale_a=1.43, scale_b=4.56, )
paddle.stanh(x=Tensor([1],"float64"), scale_a=0.67, scale_b=1.72, )
paddle.stanh(x=Tensor([1, 2],"float64"), scale_a=1.43, scale_b=4.56, )
paddle.stanh(x=Tensor([1],"float32"), scale_a=0.67, scale_b=1.72, )
paddle.std(Tensor([1, 3, 4, 10],"float32"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 4, 10],"float64"), list[1,3,], True, False, )
paddle.std(Tensor([1, 3, 4, 10],"float64"), list[1,2,], True, False, )
paddle.std(Tensor([1, 3, 4, 10],"float64"), list[1,3,], False, False, )
paddle.std(Tensor([1, 3, 4, 10],"float64"), 2, True, False, )
paddle.std(Tensor([1, 3, 4, 10],"float64"), tuple(1,3,), True, False, )
paddle.std(x=Tensor([3, 3, 3],"float64"), axis=list[0,1,], )
paddle.std(x=Tensor([3, 3, 3],"float64"), axis=0, )
paddle.std(Tensor([3, 5],"float32"), )
paddle.std(x=Tensor([3, 3, 3],"float64"), axis=0, unbiased=False, )
paddle.std(x=Tensor([3, 3, 3],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.std(x=Tensor([3, 3, 3],"float64"), axis=tuple(0,1,), )
paddle.std(x=Tensor([2, 3],"float64"), )
paddle.std(x=Tensor([2, 3],"float32"), )
paddle.std(Tensor([2],"float32"), )
paddle.std(Tensor([6, 9],"float32"), axis=1, )
paddle.std(x=Tensor([3, 3, 3],"float64"), )
paddle.strided_slice(x=Tensor([3, 4, 5, 6],"int64"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 4, 5, 6],"float32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 4, 5, 6],"int32"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(x=Tensor([3, 4, 5, 6],"float64"), axes=list[1,2,3,], starts=list[-3,0,2,], ends=list[3,2,4,], strides=list[1,1,1,], )
paddle.strided_slice(Tensor([5, 5, 5],"float32"), list[1,2,], list[Tensor([],"int32"),Tensor([],"int32"),], list[Tensor([],"int32"),Tensor([],"int32"),], list[Tensor([],"int32"),Tensor([],"int32"),], )
paddle.strided_slice(x=Tensor([6, 6],"float32"), axes=list[0,1,], starts=list[3,4,], ends=list[5,2,], strides=list[1,-2,], )
paddle.strided_slice(x=Tensor([6],"float32"), axes=list[0,], starts=list[3,], ends=list[1,], strides=list[-2,], )
paddle.strided_slice(x=Tensor([6, 6],"float32"), axes=list[0,1,], starts=list[3,4,], ends=list[5,2,], strides=list[4,-2,], )
paddle.strided_slice(Tensor([5],"int64"), axes=list[0,], starts=list[3,], ends=list[1,], strides=list[-2,], )
paddle.subtract(Tensor([125, 1],"float32"), Tensor([125, 1],"float32"), )
paddle.subtract(Tensor([10, 15],"float32"), Tensor([15],"float32"), )
paddle.subtract(Tensor([2, 10, 10],"float32"), Tensor([2, 10, 10],"float32"), )
paddle.subtract(Tensor([39, 1, 1, 1],"complex64"), Tensor([8, 8, 4],"complex64"), )
paddle.subtract(Tensor([99, 1],"float32"), Tensor([99, 1],"float32"), )
paddle.subtract(Tensor([14, 1, 1, 1],"complex64"), Tensor([8, 8, 4],"complex64"), )
paddle.subtract(Tensor([100, 1],"float32"), Tensor([100, 1],"float32"), )
paddle.subtract(Tensor([2, 3, 4, 5],"complex128"), Tensor([4, 5],"float64"), )
paddle.subtract(Tensor([100],"float32"), Tensor([100, 1],"float32"), )
paddle.subtract(Tensor([400, 1],"float32"), Tensor([400, 1],"float32"), )
paddle.subtract(Tensor([2, 3, 4, 5],"float32"), Tensor([5],"complex64"), )
paddle.subtract(Tensor([10, 15],"float32"), Tensor([10, 15],"float32"), )
paddle.subtract(Tensor([201, 1],"float32"), Tensor([201, 1],"float32"), )
paddle.subtract(Tensor([64, 10],"float32"), Tensor([64, 1],"float32"), )
paddle.subtract(Tensor([32, 10],"float32"), Tensor([32, 1],"float32"), )
paddle.subtract(Tensor([101, 1],"float32"), Tensor([101, 1],"float32"), )
paddle.subtract(Tensor([10, 10],"float32"), Tensor([10, 10],"float32"), )
paddle.subtract(Tensor([251, 1],"float32"), Tensor([251, 1],"float32"), )
paddle.subtract(Tensor([89, 1],"float32"), Tensor([89, 1],"float32"), )
paddle.subtract(Tensor([128, 1],"float32"), Tensor([128, 1],"float32"), )
paddle.subtract(Tensor([3, 96, 1],"float32"), Tensor([3, 96, 1],"float32"), )
paddle.subtract(Tensor([50, 1],"float32"), Tensor([50, 1],"float32"), )
paddle.subtract(Tensor([2, 3, 4, 5],"complex128"), Tensor([2, 3, 4, 5],"complex128"), )
paddle.subtract(Tensor([2, 3, 4, 5],"complex64"), Tensor([2, 3, 4, 5],"complex64"), )
paddle.subtract(Tensor([256, 1],"float32"), Tensor([256, 1],"float32"), )
paddle.subtract(Tensor([2, 3, 4, 5],"float64"), Tensor([5],"complex128"), )
paddle.subtract(Tensor([2, 96, 2],"float32"), Tensor([2, 96, 2],"float32"), )
paddle.subtract(Tensor([2, 3, 4, 5],"complex64"), Tensor([4, 5],"float32"), )
paddle.subtract(Tensor([2, 3],"complex128"), Tensor([2, 3],"float64"), name="Normal_log_prob", )
paddle.subtract(Tensor([],"float32"), Tensor([],"float32"), name="Cauchy_log_prob", )
paddle.subtract(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int8"), )
paddle.subtract(x=Tensor([2, 2],"int64"), y=Tensor([2, 2],"int64"), )
paddle.subtract(Tensor([1],"float32"), Tensor([],"float32"), )
paddle.subtract(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), name="Normal_log_prob", )
paddle.subtract(Tensor([2, 3, 3, 4],"float32"), Tensor([2, 3, 1, 4],"float32"), )
paddle.subtract(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"complex64"), )
paddle.subtract(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"bool"), )
paddle.subtract(Tensor([2, 3, 4],"float32"), Tensor([],"float32"), )
paddle.subtract(Tensor([1, 1],"float32"), Tensor([4, 1],"float32"), )
paddle.subtract(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float64"), )
paddle.subtract(Tensor([],"float32"), Tensor([],"float32"), name="Normal_log_prob", )
paddle.subtract(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"float32"), )
paddle.subtract(Tensor([],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.subtract(Tensor([4, 3, 2],"uint8"), Tensor([4, 3, 2],"complex128"), )
paddle.subtract(Tensor([15, 1],"float32"), Tensor([15, 1],"float32"), )
paddle.subtract(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float32"), )
paddle.subtract(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float16"), )
paddle.subtract(Tensor([32],"float32"), Tensor([32],"float32"), )
paddle.subtract(Tensor([1],"float32"), Tensor([1, 1],"float32"), )
paddle.subtract(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int32"), )
paddle.subtract(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex128"), )
paddle.subtract(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"uint8"), )
paddle.subtract(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float32"), )
paddle.subtract(x=Tensor([2, 2],"float32"), y=Tensor([2, 2],"float32"), )
paddle.subtract(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int32"), )
paddle.subtract(Tensor([1],"float32"), Tensor([1],"float32"), name="Cauchy_log_prob", )
paddle.subtract(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float64"), )
paddle.subtract(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"bfloat16"), )
paddle.subtract(Tensor([3],"float32"), Tensor([],"float32"), )
paddle.subtract(Tensor([1],"float64"), Tensor([1],"float64"), name="Cauchy_log_prob", )
paddle.subtract(x=Tensor([2, 2],"int32"), y=Tensor([2, 2],"int32"), )
paddle.subtract(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float32"), )
paddle.subtract(Tensor([],"float64"), Tensor([],"float64"), name="Cauchy_kl_divergence", )
paddle.subtract(Tensor([25, 1],"float32"), Tensor([25, 1],"float32"), )
paddle.subtract(Tensor([20, 1],"float32"), Tensor([20, 1],"float32"), )
paddle.subtract(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float16"), )
paddle.subtract(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"bfloat16"), )
paddle.subtract(Tensor([8],"float32"), Tensor([8],"float32"), )
paddle.subtract(x=Tensor([3],"float64"), y=Tensor([3],"float64"), )
paddle.subtract(Tensor([4, 3, 2],"uint8"), Tensor([4, 3, 2],"complex64"), )
paddle.subtract(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float64"), )
paddle.subtract(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"complex128"), )
paddle.subtract(Tensor([],"float64"), Tensor([],"float64"), name="Cauchy_log_prob", )
paddle.subtract(Tensor([5, 2],"float64"), Tensor([5, 2],"float64"), )
paddle.subtract(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"float16"), )
paddle.subtract(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"complex64"), )
paddle.subtract(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int64"), )
paddle.subtract(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"complex64"), )
paddle.subtract(Tensor([],"float32"), Tensor([],"float32"), )
paddle.subtract(Tensor([2, 1],"float32"), Tensor([2, 1],"float32"), )
paddle.subtract(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"float64"), )
paddle.subtract(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"bool"), )
paddle.subtract(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float64"), )
paddle.subtract(Tensor([1, 1],"float32"), Tensor([1, 1],"float32"), )
paddle.subtract(Tensor([3],"float32"), Tensor([3],"float32"), name="Cauchy_log_prob", )
paddle.subtract(Tensor([3, 3],"float32"), Tensor([3, 3],"float32"), )
paddle.subtract(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex64"), )
paddle.subtract(Tensor([2, 3],"float32"), Tensor([2, 3],"float32"), )
paddle.subtract(Tensor([2, 3, 4],"float32"), Tensor([2, 3, 4],"float32"), )
paddle.subtract(Tensor([3],"float32"), Tensor([3],"float32"), name="Cauchy_kl_divergence", )
paddle.subtract(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"complex64"), )
paddle.subtract(Tensor([4, 3, 2],"float16"), Tensor([4, 3, 2],"bfloat16"), )
paddle.subtract(Tensor([4, 1],"float32"), Tensor([4, 1],"float32"), )
paddle.subtract(Tensor([2, 3, 3, 4],"float32"), Tensor([2, 3, 1, 1],"float32"), )
paddle.subtract(Tensor([2],"float64"), Tensor([2],"float64"), name="Normal_log_prob", )
paddle.subtract(Tensor([2, 3, 3, 4],"float32"), Tensor([3, 1, 4],"float32"), )
paddle.subtract(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int16"), )
paddle.subtract(Tensor([1],"complex64"), Tensor([],"float32"), name="Normal_log_prob", )
paddle.subtract(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex128"), )
paddle.subtract(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"complex128"), )
paddle.subtract(Tensor([4],"float32"), Tensor([4, 1],"float32"), )
paddle.subtract(x=Tensor([2, 2],"float64"), y=Tensor([2, 2],"float64"), )
paddle.subtract(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex128"), )
paddle.subtract(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"int8"), )
paddle.subtract(Tensor([4, 3, 2],"float64"), Tensor([4, 3, 2],"bfloat16"), )
paddle.subtract(Tensor([3, 3],"float64"), Tensor([3, 3],"float64"), name="Normal_log_prob", )
paddle.subtract(Tensor([2, 3],"complex64"), Tensor([2, 3],"float32"), name="Normal_log_prob", )
paddle.subtract(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int64"), )
paddle.subtract(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"float16"), )
paddle.subtract(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"complex64"), )
paddle.subtract(Tensor([],"float64"), Tensor([],"float64"), )
paddle.subtract(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex64"), )
paddle.subtract(Tensor([1],"float64"), Tensor([1],"float64"), )
paddle.subtract(Tensor([],"float32"), Tensor([],"float32"), name="Cauchy_kl_divergence", )
paddle.subtract(Tensor([3],"float32"), Tensor([3],"float32"), )
paddle.subtract(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"complex128"), )
paddle.subtract(Tensor([4, 3, 2],"int64"), Tensor([4, 3, 2],"complex128"), )
paddle.subtract(Tensor([1],"float32"), Tensor([1],"float32"), name="Cauchy_kl_divergence", )
paddle.subtract(Tensor([1],"float32"), Tensor([],"float32"), name="Normal_log_prob", )
paddle.subtract(Tensor([1],"float32"), Tensor([1],"float32"), )
paddle.subtract(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"int16"), )
paddle.subtract(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex64"), )
paddle.subtract(Tensor([4, 3, 2],"int32"), Tensor([4, 3, 2],"complex64"), )
paddle.subtract(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"bfloat16"), )
paddle.subtract(Tensor([4, 3, 2],"float32"), Tensor([4, 3, 2],"float16"), )
paddle.subtract(Tensor([32, 1],"float32"), Tensor([32, 1],"float32"), )
paddle.subtract(Tensor([4, 3, 2],"int16"), Tensor([4, 3, 2],"complex128"), )
paddle.subtract(Tensor([4, 3, 2],"complex128"), Tensor([4, 3, 2],"float32"), )
paddle.subtract(Tensor([3],"int64"), Tensor([3],"int64"), )
paddle.subtract(Tensor([2, 3],"float64"), Tensor([2, 3],"float64"), name="Normal_log_prob", )
paddle.subtract(Tensor([4, 3, 2],"bool"), Tensor([4, 3, 2],"complex64"), )
paddle.subtract(Tensor([4, 3, 2],"int8"), Tensor([4, 3, 2],"complex128"), )
paddle.subtract(Tensor([4, 3, 2],"complex64"), Tensor([4, 3, 2],"uint8"), )
paddle.subtract(Tensor([10, 1],"float32"), Tensor([10, 1],"float32"), )
paddle.subtract(Tensor([4, 3, 2],"bfloat16"), Tensor([4, 3, 2],"complex128"), )
paddle.t(Tensor([10, 20],"float32"), )
paddle.t(Tensor([20, 10],"float32"), )
paddle.t(Tensor([10, 5],"float64"), )
paddle.t(Tensor([1, 5],"float64"), )
paddle.t(Tensor([10],"float64"), )
paddle.t(Tensor([],"float32"), )
paddle.take(Tensor([3, 4],"float64"), Tensor([5, 8],"int64"), mode="wrap", )
paddle.take(Tensor([],"float32"), Tensor([],"int64"), )
paddle.take(Tensor([3, 4],"float64"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"float64"), Tensor([5, 8],"int64"), mode="clip", )
paddle.take(Tensor([3, 4],"int32"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"int64"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take(Tensor([3, 4],"float32"), Tensor([2, 3],"int64"), mode="raise", )
paddle.take_along_axis(Tensor([38, 5],"float32"), Tensor([38, 1],"int64"), axis=1, )
paddle.take_along_axis(Tensor([4, 7, 6],"float64"), Tensor([4, 1, 6],"int32"), axis=1, )
paddle.take_along_axis(Tensor([28, 5],"float32"), Tensor([28, 1],"int64"), axis=1, )
paddle.take_along_axis(Tensor([4, 42],"float64"), Tensor([4, 1],"int32"), axis=1, )
paddle.take_along_axis(Tensor([7, 24],"float64"), Tensor([7, 1],"int32"), axis=1, )
paddle.take_along_axis(Tensor([168],"float64"), Tensor([1],"int32"), axis=0, )
paddle.take_along_axis(Tensor([30, 5],"float32"), Tensor([30, 1],"int64"), axis=1, )
paddle.take_along_axis(Tensor([512],"float32"), Tensor([1],"int32"), axis=0, )
paddle.take_along_axis(Tensor([4, 4, 4, 2],"float64"), Tensor([1, 1, 1, 1],"int64"), 0, )
paddle.take_along_axis(Tensor([4, 7, 6],"float64"), Tensor([4, 7, 1],"int32"), axis=2, )
paddle.take_along_axis(Tensor([8],"float32"), Tensor([1],"int32"), axis=0, )
paddle.take_along_axis(Tensor([3, 5],"float64"), Tensor([1, 3],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([4, 7],"float32"), Tensor([4, 1],"int32"), axis=1, )
paddle.take_along_axis(Tensor([2, 3],"float64"), Tensor([1, 3],"int32"), axis=0, )
paddle.take_along_axis(Tensor([3, 3],"float32"), Tensor([1, 3],"int64"), 0, )
paddle.take_along_axis(Tensor([5, 2],"float32"), Tensor([5, 1],"int64"), axis=1, )
paddle.take_along_axis(Tensor([2, 3, 4],"float64"), Tensor([1, 3, 4],"int32"), axis=0, )
paddle.take_along_axis(Tensor([4, 2],"float32"), Tensor([4, 1],"int64"), axis=1, )
paddle.take_along_axis(Tensor([6],"float32"), Tensor([1],"int32"), axis=0, )
paddle.take_along_axis(Tensor([2, 2],"float32"), Tensor([4, 2],"int64"), 0, )
paddle.take_along_axis(Tensor([4, 3],"float32"), Tensor([4, 1],"int64"), axis=1, )
paddle.take_along_axis(Tensor([5, 3, 4],"float64"), Tensor([5, 1, 4],"int32"), axis=1, )
paddle.take_along_axis(Tensor([3, 2, 5],"float32"), Tensor([1, 1, 3],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([3, 3, 3],"float64"), Tensor([1, 3, 3],"int32"), axis=0, )
paddle.take_along_axis(Tensor([5, 12],"float64"), Tensor([5, 1],"int32"), axis=1, )
paddle.take_along_axis(Tensor([1],"float32"), Tensor([1],"int32"), axis=0, )
paddle.take_along_axis(Tensor([20],"float32"), Tensor([1],"int32"), axis=0, )
paddle.take_along_axis(Tensor([8, 3],"float32"), Tensor([8, 1],"int64"), axis=1, )
paddle.take_along_axis(Tensor([4, 3, 2],"float32"), Tensor([1, 3, 2],"int64"), axis=1, )
paddle.take_along_axis(Tensor([4, 4],"float64"), Tensor([1, 1],"int64"), 0, )
paddle.take_along_axis(Tensor([4, 2],"float64"), Tensor([1, 1],"int64"), 1, )
paddle.take_along_axis(Tensor([4],"float64"), Tensor([1],"int64"), 0, )
paddle.take_along_axis(Tensor([32],"float32"), Tensor([1],"int32"), axis=0, )
paddle.take_along_axis(Tensor([37],"float32"), Tensor([1],"int32"), axis=0, )
paddle.take_along_axis(Tensor([2, 3],"float32"), Tensor([2, 1],"int32"), axis=1, )
paddle.take_along_axis(Tensor([4, 4, 4],"float64"), Tensor([1, 1, 1],"int64"), 0, )
paddle.take_along_axis(Tensor([4, 7],"float64"), Tensor([4, 1],"int32"), axis=1, )
paddle.take_along_axis(Tensor([4],"float32"), Tensor([1],"int64"), 0, )
paddle.take_along_axis(Tensor([3, 5],"float32"), Tensor([1, 3],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([3, 5],"float32"), Tensor([3, 2],"int64"), axis=-1, )
paddle.take_along_axis(Tensor([3, 3],"float32"), Tensor([1, 3],"int64"), 0, False, )
paddle.take_along_axis(Tensor([3, 3, 3],"float32"), Tensor([1, 3, 3],"int32"), axis=0, )
paddle.take_along_axis(Tensor([3],"float32"), Tensor([1],"int32"), axis=0, )
paddle.tan(Tensor([100, 2, 3],"float32"), )
paddle.tan(Tensor([100, 2],"float32"), )
paddle.tan(Tensor([100, 1, 2, 2],"float32"), )
paddle.tan(Tensor([100, 1],"float64"), )
paddle.tan(Tensor([100],"float32"), )
paddle.tan(Tensor([10, 20, 1],"float32"), )
paddle.tan(Tensor([100, 1, 2],"float32"), )
paddle.tan(Tensor([100, 1],"float32"), )
paddle.tan(Tensor([100, 2, 3, 1],"float32"), )
paddle.tan(Tensor([100, 2, 1],"float32"), )
paddle.tan(Tensor([],"float32"), )
paddle.tan(x=Tensor([3, 3, 3],"float32"), )
paddle.tan(x=Tensor([3, 3, 3],"float64"), )
paddle.tanh(Tensor([10, 20, 1],"float32"), )
paddle.tanh(Tensor([13, 1, 37],"float32"), )
paddle.tanh(Tensor([2, 4, 8, 8],"float32"), )
paddle.tanh(Tensor([13, 32],"float32"), )
paddle.tanh(Tensor([12, 10],"float32"), )
paddle.tanh(Tensor([2, 3, 37],"float32"), )
paddle.tanh(Tensor([13, 2, 32],"float32"), )
paddle.tanh(x=Tensor([2, 8, 8],"float32"), )
paddle.tanh(Tensor([6, 1, 37],"float32"), )
paddle.tanh(Tensor([6, 1, 128],"float32"), )
paddle.tanh(Tensor([1, 7, 37],"float32"), )
paddle.tanh(Tensor([4, 1, 128],"float32"), )
paddle.tanh(Tensor([58, 1, 2],"float32"), )
paddle.tanh(Tensor([16, 32],"float32"), )
paddle.tanh(Tensor([4, 32],"float32"), )
paddle.tanh(Tensor([2, 3, 128],"float32"), )
paddle.tanh(Tensor([100, 1],"float32"), )
paddle.tanh(Tensor([1, 1, 128],"float32"), )
paddle.tanh(Tensor([4, 1, 37],"float32"), )
paddle.tanh(Tensor([10, 16],"float32"), )
paddle.tanh(Tensor([4, 32],"float64"), )
paddle.tanh(Tensor([2, 1, 128],"float32"), )
paddle.tanh(Tensor([10, 10],"float32"), )
paddle.tanh(Tensor([16, 16],"float32"), )
paddle.tanh(Tensor([3, 3],"float64"), )
paddle.tanh(Tensor([3, 4],"float32"), )
paddle.tanh(Tensor([2, 2],"float32"), )
paddle.tanh(Tensor([1, 32],"float32"), )
paddle.tanh(Tensor([8, 8],"float32"), )
paddle.tanh(Tensor([1, 32],"float64"), )
paddle.tanh(Tensor([15, 1],"float32"), )
paddle.tanh(Tensor([1],"float64"), )
paddle.tanh(Tensor([4, 10],"float32"), )
paddle.tanh(x=Tensor([2, 3, 4],"float64"), )
paddle.tanh(Tensor([1, 7],"float32"), )
paddle.tanh(Tensor([2, 3, 4],"float32"), )
paddle.tanh(x=Tensor([3, 3, 3],"float64"), )
paddle.tanh(Tensor([2, 3],"float64"), )
paddle.tanh(x=Tensor([2, 3, 4],"float64"), name="test name", )
paddle.tanh(Tensor([2, 1, 37],"float32"), )
paddle.tanh(Tensor([1, 4],"float32"), )
paddle.tanh(Tensor([4, 16],"float64"), )
paddle.tanh(Tensor([2, 3],"float32"), )
paddle.tanh(Tensor([4, 3],"float32"), )
paddle.tanh(Tensor([1, 3],"float32"), )
paddle.tanh(x=Tensor([2],"float64"), )
paddle.tanh(x=Tensor([3],"float32"), )
paddle.tanh(Tensor([4, 4],"float64"), )
paddle.tanh(Tensor([4, 4],"float32"), )
paddle.tanh(Tensor([1],"float32"), )
paddle.tanh(Tensor([1, 7],"float64"), )
paddle.tanh(Tensor([1, 3],"float64"), )
paddle.tanh(x=Tensor([1],"float64"), )
paddle.tanh(Tensor([2, 42],"float32"), )
paddle.tanh(Tensor([2, 3, 3, 4],"float32"), )
paddle.tanh(Tensor([1, 1, 37],"float32"), )
paddle.tanh(Tensor([],"float32"), )
paddle.tanh(Tensor([4, 8],"float64"), )
paddle.tanh(Tensor([64, 1],"float32"), )
paddle.tanh(Tensor([4, 3, 2],"float32"), )
paddle.tanh(Tensor([4, 6],"float32"), )
paddle.tanh(Tensor([3, 8],"float32"), )
paddle.tanh(Tensor([40, 1],"float32"), )
paddle.tanh(x=Tensor([3],"float64"), )
paddle.tanh(Tensor([4, 16],"float32"), )
paddle.tanh(Tensor([2, 3, 4],"float64"), )
paddle.tanh(Tensor([2, 8],"float32"), )
paddle.tanh(x=Tensor([3, 5],"float64"), )
paddle.tanh(Tensor([4, 8],"float32"), )
paddle.tensor_split(Tensor([4, 4, 7, 4],"int64"), 2, axis=-2, )
paddle.tensor_split(Tensor([4, 4, 7],"int64"), list[2,3,], axis=2, )
paddle.tensor_split(Tensor([4, 4, 7, 4],"int64"), list[2,4,6,], axis=-2, )
paddle.tensor_split(Tensor([4, 4, 4, 7],"int64"), 3, axis=3, )
paddle.tensor_split(Tensor([4, 4, 4, 7],"int64"), 2, axis=3, )
paddle.tensor_split(Tensor([4, 4, 4, 7],"int64"), list[2,4,6,], axis=3, )
paddle.tensor_split(Tensor([4, 4, 7],"int64"), 2, axis=2, )
paddle.tensor_split(Tensor([4, 4, 7],"int64"), list[2,4,6,], axis=2, )
paddle.tensor_split(Tensor([4, 4, 7],"int64"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 4, 4, 7],"int64"), tuple(2,6,), axis=3, )
paddle.tensor_split(Tensor([4, 4, 7],"int64"), tuple(2,6,), axis=2, )
paddle.tensor_split(Tensor([4, 4, 4, 7],"int64"), list[2,3,], axis=3, )
paddle.tensor_split(Tensor([4, 4, 7, 4],"int64"), 3, axis=-2, )
paddle.tensor_split(Tensor([4, 4, 7, 4],"int64"), list[2,3,], axis=-2, )
paddle.tensor_split(Tensor([4, 4, 7, 4],"int64"), tuple(2,6,), axis=-2, )
paddle.tensor_split(Tensor([6],"int64"), list[2,4,], )
paddle.tensor_split(Tensor([7, 4, 3],"int64"), 3, )
paddle.tensor_split(Tensor([6],"int64"), 3, )
paddle.tensor_split(Tensor([7, 4],"int64"), 2, )
paddle.tensor_split(Tensor([6],"float64"), 3, axis=0, )
paddle.tensor_split(Tensor([7],"int64"), list[2,4,], )
paddle.tensor_split(Tensor([7],"int64"), list[2,3,], axis=0, )
paddle.tensor_split(Tensor([4, 6],"float16"), 3, axis=1, )
paddle.tensor_split(Tensor([7, 4],"int64"), 3, )
paddle.tensor_split(Tensor([6],"int64"), 2, )
paddle.tensor_split(Tensor([4, 6],"float64"), 3, axis=1, )
paddle.tensor_split(Tensor([7],"int64"), tuple(2,6,), )
paddle.tensor_split(Tensor([4, 6],"int64"), 3, axis=1, )
paddle.tensor_split(Tensor([4, 4, 6],"int64"), 3, axis=2, )
paddle.tensor_split(Tensor([6],"float16"), 3, axis=0, )
paddle.tensor_split(Tensor([4, 4, 6],"bool"), 3, axis=2, )
paddle.tensor_split(Tensor([7],"int64"), list[3,-1,5,2,16,], axis=0, )
paddle.tensor_split(Tensor([4, 7],"int64"), 2, axis=1, )
paddle.tensor_split(Tensor([6],"uint8"), 3, axis=0, )
paddle.tensor_split(Tensor([7, 4],"int64"), list[2,4,6,], )
paddle.tensor_split(Tensor([7, 4],"int64"), list[2,4,], )
paddle.tensor_split(Tensor([4, 7],"int64"), tuple(2,6,), axis=1, )
paddle.tensor_split(Tensor([4, 4, 6],"int32"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 4, 6],"uint8"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 7],"int64"), list[2,4,6,], axis=1, )
paddle.tensor_split(Tensor([7],"int64"), tuple(2,6,), axis=0, )
paddle.tensor_split(Tensor([7, 4],"int64"), tuple(2,6,), )
paddle.tensor_split(Tensor([4, 7],"int64"), list[2,3,], axis=1, )
paddle.tensor_split(Tensor([6],"float32"), 3, axis=0, )
paddle.tensor_split(Tensor([7],"int64"), 2, )
paddle.tensor_split(Tensor([7, 4, 3],"int64"), list[2,4,], )
paddle.tensor_split(Tensor([4, 4, 6],"float64"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 7],"int64"), 3, axis=1, )
paddle.tensor_split(Tensor([7, 4, 3],"int64"), list[2,4,6,], )
paddle.tensor_split(Tensor([7],"int64"), 2, axis=0, )
paddle.tensor_split(Tensor([7, 4, 3],"int64"), 2, )
paddle.tensor_split(Tensor([4, 6],"int32"), 3, axis=1, )
paddle.tensor_split(Tensor([7],"int64"), list[2,4,6,], )
paddle.tensor_split(Tensor([7, 4, 3],"int64"), tuple(2,6,), )
paddle.tensor_split(Tensor([7],"int64"), list[2,4,6,], axis=0, )
paddle.tensor_split(Tensor([7, 4, 3],"int64"), list[2,3,], )
paddle.tensor_split(Tensor([4, 4, 6],"float16"), 3, axis=2, )
paddle.tensor_split(Tensor([4, 6],"uint8"), 3, axis=1, )
paddle.tensor_split(Tensor([7],"int64"), 3, axis=0, )
paddle.tensor_split(Tensor([4, 4, 6],"float32"), 3, axis=2, )
paddle.tensor_split(Tensor([6],"int32"), 3, axis=0, )
paddle.tensor_split(Tensor([7],"int64"), list[2,1,3,], axis=0, )
paddle.tensor_split(Tensor([7],"int64"), 3, )
paddle.tensor_split(Tensor([6],"int64"), list[2,3,], )
paddle.tensor_split(Tensor([7],"int64"), list[2,3,], )
paddle.tensor_split(Tensor([6],"bool"), 3, axis=0, )
paddle.tensor_split(Tensor([6],"int64"), 3, axis=0, )
paddle.tensor_split(Tensor([7, 4],"int64"), list[2,3,], )
paddle.tensor_split(Tensor([4, 6],"float32"), 3, axis=1, )
paddle.tensor_split(Tensor([6],"int64"), list[2,4,5,], )
paddle.tensor_split(Tensor([4, 6],"bool"), 3, axis=1, )
paddle.tensor_split(Tensor([6],"int64"), tuple(2,5,), )
paddle.tensor_split(Tensor([7],"int64"), list[3,-1,16,], axis=0, )
paddle.tensor_split(Tensor([7],"int64"), list[2,3,16,], axis=0, )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,0,],list[1,2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), 0, )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(tuple(2,1,),tuple(0,),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), Tensor([1],"int64"), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[3,1,2,],], )
paddle.tensordot(x=Tensor([2, 7, 4, 2],"float64"), y=Tensor([8, 7, 4, 2],"float64"), axes=list[tuple(1,2,3,),], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,1,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,2,1,],list[2,1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(1,), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), 2, )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,],list[1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[1,3,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[3,1,0,],], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(x=Tensor([2, 7, 4, 2],"float64"), y=Tensor([7, 7, 4, 2],"float64"), axes=tuple(list[1,2,3,],list[0,2,3,],list[4,5,6,],), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,],list[1,3,2,],], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(tuple(1,2,),tuple(0,1,),), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), 1, )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,],list[2,1,3,],], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(list[1,2,],list[0,1,],), )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,0,3,],list[2,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,],list[3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[2,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,3,],list[2,0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,],list[1,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,2,0,1,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,3,0,],list[3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,],list[3,1,0,],], )
paddle.tensordot(Tensor([3, 4, 4],"float64"), Tensor([4, 4, 5],"float64"), list[1,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[3,1,2,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([3, 4, 3, 4],"float64"), )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[1,3,2,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[3,0,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,2,],list[0,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,1,0,3,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,3,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,1,3,0,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,2,0,],list[2,1,0,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,],list[],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,0,],list[3,2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,2,1,],list[0,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,2,3,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(x=Tensor([2, 4, 3, 5],"float64"), y=Tensor([2, 4, 1, 5],"float64"), axes=list[0,2,], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,2,3,],list[],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[2,3,0,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,2,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,],list[3,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,0,3,],list[2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[3,1,2,], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), 0, )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,0,3,],list[0,2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,0,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[2,0,1,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,0,],list[3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[1,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,0,3,],list[2,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,3,1,2,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,0,],list[1,3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,],list[2,1,0,],], )
paddle.tensordot(Tensor([3, 4, 4],"float32"), Tensor([4, 4, 5],"float32"), tuple(tuple(1,),), )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,1,2,],list[1,2,3,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,2,],list[2,0,3,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[0,], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,2,0,],list[3,1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,],list[],], )
paddle.tensordot(x=Tensor([2, 3, 4, 2],"float64"), y=Tensor([8, 7, 4, 2],"float64"), axes=list[2,3,], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,2,],list[3,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[2,3,1,0,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,],list[1,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,],list[0,1,3,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[3,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,0,1,],list[0,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,],list[2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[3,0,], )
paddle.tensordot(x=Tensor([2, 3, 3, 4],"float64"), y=Tensor([3, 4, 3, 4],"float64"), axes=0, )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,0,2,],list[3,1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,2,3,],list[3,2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,0,3,2,],list[3,0,1,2,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[0,1,3,],list[0,3,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,2,3,0,],list[3,2,1,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,1,0,],list[2,1,],], )
paddle.tensordot(Tensor([1, 5, 5, 5],"float64"), Tensor([1, 1, 1, 5],"float64"), list[list[1,3,0,],list[3,0,2,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[1,2,3,0,],list[],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,1,2,],list[1,3,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[2,3,],list[1,3,0,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,3,],list[0,3,2,1,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[3,1,2,],list[3,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([1, 1, 1, 1],"float64"), list[list[2,3,1,],list[1,0,2,],], )
paddle.tensordot(Tensor([5, 5, 5, 1],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[0,1,2,],list[2,0,1,],], )
paddle.tensordot(Tensor([1, 1, 5, 5],"float64"), Tensor([5, 5, 1, 5],"float64"), list[list[3,],list[],], )
paddle.tile(Tensor([494, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([595, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([553, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([470, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([1, 200, 2],"float32"), list[1,1,2,], )
paddle.tile(Tensor([213, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([342, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([13, 7, 7],"int32"), repeat_times=list[1,4,1,], )
paddle.tile(Tensor([400, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([523, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([620, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([590, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([205, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([261, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([451, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([737, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([644, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([551, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([398, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([309, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([268, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([582, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([788, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([128, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([407, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([110, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([536, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([517, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([108, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([706, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([627, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([426, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([311, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([817, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([538, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([230, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([613, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([498, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([469, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([438, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([485, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([518, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([834, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([497, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([141, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([491, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([623, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([207, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([307, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([625, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([216, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([371, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([289, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([281, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([244, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([302, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([787, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([529, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([731, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([363, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([165, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([708, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([150, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([403, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([153, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([160, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([301, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([629, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([168, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([622, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([690, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([391, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([746, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([543, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([226, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([173, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([427, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([218, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([163, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([127, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([273, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([344, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([742, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([395, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([251, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([522, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([631, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([351, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([589, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([174, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([511, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([599, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([433, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([390, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([256, 1],"float32"), list[1,256,], )
paddle.tile(Tensor([591, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([883, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([633, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([556, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([624, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([657, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([661, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([225, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([460, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([193, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([101, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([638, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([888, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([665, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([617, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([506, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([500, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([823, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([537, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([365, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([557, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([628, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([258, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([237, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([321, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([671, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([761, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([359, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([233, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([573, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([348, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([114, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([155, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([199, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([374, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([728, 1],"int64"), repeat_times=list[1,14,], )
paddle.tile(Tensor([389, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([650, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([2, 192, 2],"float32"), list[1,1,2,], )
paddle.tile(Tensor([489, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([394, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([467, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([736, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([503, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([180, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([367, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([878, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([126, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([350, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([530, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([600, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([656, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([332, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([387, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([154, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([450, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([368, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([457, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([201, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([355, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([565, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([533, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([463, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([204, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([396, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([415, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([283, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([410, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([190, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([248, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([841, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([566, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([632, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([327, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([461, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([4, 1, 32],"float32"), list[1,8,1,], )
paddle.tile(Tensor([496, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([455, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([192, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([125, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([241, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([558, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([418, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([202, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([340, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([246, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([210, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([279, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([441, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([219, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([376, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([397, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([140, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([117, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([532, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([103, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([609, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([691, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([236, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([113, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([501, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([658, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([111, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([646, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([138, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([578, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([136, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([640, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([459, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([200, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([516, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([772, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([676, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([366, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([420, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([786, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([564, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([256, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([719, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([527, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([540, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([575, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([434, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([310, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([512],"int64"), repeat_times=list[512,], )
paddle.tile(Tensor([583, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([250, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([674, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([435, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([488, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([252, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([214, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([605, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([606, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([1, 196, 2],"float32"), list[1,1,2,], )
paddle.tile(Tensor([341, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([615, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([833, 1],"int64"), list[1,4,], )
paddle.tile(x=Tensor([1, 512],"float64"), repeat_times=list[471,1,], )
paddle.tile(Tensor([264, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([487, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([445, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([275, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([611, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([134, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([436, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([318, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([234, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([382, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([195, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([471, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([509, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([132, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([406, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([349, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([352, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([329, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([419, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([164, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([429, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([1, 256],"float32"), list[256,1,], )
paddle.tile(Tensor([473, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([317, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([228, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([326, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([448, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([767, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([771, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([109, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([372, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([815, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([209, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([555, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([137, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([222, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([293, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([697, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([276, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([325, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([253, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([428, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([752, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([402, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([262, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([106, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([421, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([499, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([440, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([686, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([288, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([304, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([296, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([663, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([215, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([563, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([439, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([361, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([577, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([102, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([474, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([670, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([476, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([184, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([194, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([649, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([505, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([116, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([668, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([580, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([354, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([423, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([130, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([147, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([198, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([377, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([442, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([339, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([524, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([320, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([680, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([684, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([122, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([300, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([702, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([379, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([614, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([648, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([142, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([547, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([814, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([483, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([829, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([392, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([743, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([386, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([544, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([176, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([217, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([337, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([612, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([385, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([642, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([695, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([597, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([637, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([515, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([571, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([413, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([257, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([167, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([454, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([393, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([602, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([212, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([357, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([383, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([345, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([322, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([330, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([594, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([748, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([2, 200, 2],"float32"), list[1,1,2,], )
paddle.tile(Tensor([598, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([314, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([331, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([700, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([188, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([306, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([534, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([449, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([588, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([2, 198, 2],"float32"), list[1,1,2,], )
paddle.tile(Tensor([728, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([364, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([189, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([755, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([549, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([313, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([220, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([316, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([161, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([567, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([135, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([278, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([711, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([572, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([319, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([364, 1],"int64"), repeat_times=list[1,7,], )
paddle.tile(Tensor([677, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([493, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([133, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([172, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([645, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([647, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([535, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([224, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([175, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([432, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([338, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([305, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([245, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([514, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([692, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([170, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([472, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([660, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([727, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([889, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([444, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([187, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([552, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([521, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([1, 1, 13, 13],"float32"), list[3,1,1,1,], )
paddle.tile(Tensor([414, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([596, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([280, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([269, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([666, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([481, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([143, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([129, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([197, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([607, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([462, 1],"int64"), list[1,4,], )
paddle.tile(Tensor([265, 1],"int64"), list[1,4,], )
paddle.tolist(Tensor([2, 5],"float32"), )
paddle.tolist(Tensor([2, 3],"int64"), )
paddle.tolist(Tensor([5],"float32"), )
paddle.trace(Tensor([5, 0, 0, 0],"float32"), offset=0, axis1=1, axis2=2, )
paddle.trace(Tensor([5, 0, 0, 0],"float32"), offset=-1, axis1=2, axis2=0, )
paddle.trace(x=Tensor([2, 3, 2],"float64"), offset=0, axis1=-3, axis2=-2, )
paddle.trace(Tensor([5, 0, 0, 0],"float32"), offset=2, axis1=1, axis2=2, )
paddle.trace(x=Tensor([3, 4],"float64"), offset=1, axis1=0, axis2=1, )
paddle.trace(Tensor([5, 0, 0, 0],"float32"), offset=0, axis1=-1, axis2=-2, )
paddle.trace(Tensor([5, 0, 0, 0],"float32"), offset=1, axis1=0, axis2=1, )
paddle.trace(Tensor([2, 2],"float32"), )
paddle.trace(x=Tensor([2, 3, 2],"float64"), offset=1, axis1=0, axis2=2, )
paddle.trace(x=Tensor([3, 4],"float64"), offset=-1, axis1=0, axis2=1, )
paddle.trace(Tensor([5, 0, 0, 0],"float32"), offset=-5, axis1=2, axis2=0, )
paddle.trace(x=Tensor([3, 4],"float64"), offset=0, axis1=0, axis2=1, )
paddle.trace(Tensor([5, 0, 0, 0],"float32"), offset=5, axis1=1, axis2=2, )
paddle.trapezoid(y=Tensor([3, 3, 4],"float32"), x=None, dx=Tensor([],"float32"), axis=1, )
paddle.trapezoid(y=Tensor([2, 3],"float32"), x=None, dx=Tensor([],"float32"), axis=0, )
paddle.trapezoid(Tensor([5],"float32"), dx=2.0, )
paddle.trapezoid(y=Tensor([2, 3],"float32"), x=None, dx=Tensor([],"float32"), axis=-1, )
paddle.tril(Tensor([30, 30],"float16"), )
paddle.tril(Tensor([31, 31],"float16"), )
paddle.tril(Tensor([11, 11],"float16"), )
paddle.tril(Tensor([28, 28],"float16"), )
paddle.tril(Tensor([2, 1, 10, 10],"float32"), )
paddle.tril(Tensor([4, 1, 5, 5],"float32"), )
paddle.tril(Tensor([29, 29],"float16"), )
paddle.tril(Tensor([10, 10],"bool"), )
paddle.tril(Tensor([10, 10],"float32"), diagonal=0, )
paddle.tril(Tensor([1, 1, 20, 20],"float32"), )
paddle.tril(Tensor([26, 26],"float16"), )
paddle.tril(Tensor([13, 9],"float32"), )
paddle.tril(Tensor([2, 20, 20],"int32"), )
paddle.tril(Tensor([21, 21],"float16"), )
paddle.tril(Tensor([6, 1, 5, 5],"float32"), )
paddle.tril(Tensor([2, 10, 10],"int32"), )
paddle.tril(Tensor([1, 20, 20],"float32"), )
paddle.tril(Tensor([10, 20, 1],"float32"), 0, )
paddle.tril(Tensor([23, 23],"float16"), )
paddle.tril(Tensor([2, 1, 1, 1],"float32"), )
paddle.tril(Tensor([7, 7],"bool"), )
paddle.tril(Tensor([4, 1, 1, 1],"float32"), )
paddle.tril(Tensor([3, 3],"bool"), )
paddle.tril(Tensor([2, 1, 1, 1],"float16"), )
paddle.tril(x=Tensor([3, 2, 2],"float64"), diagonal=5, )
paddle.tril(x=Tensor([3, 2, 2],"int64"), diagonal=0, )
paddle.tril(x=Tensor([3, 2, 2],"float32"), diagonal=0, )
paddle.tril(Tensor([2, 1, 5, 5],"float32"), )
paddle.tril(Tensor([6, 1, 1, 1],"float32"), )
paddle.tril(Tensor([6, 6],"float32"), diagonal=0, )
paddle.tril(Tensor([5, 5],"bool"), )
paddle.tril(Tensor([2, 1, 1, 1],"bool"), )
paddle.tril(Tensor([5, 5],"float32"), diagonal=0, )
paddle.tril(x=Tensor([3, 2, 2],"float64"), diagonal=-1, )
paddle.tril(x=Tensor([3, 2, 2],"float64"), diagonal=1, )
paddle.tril(x=Tensor([3, 2, 2],"int32"), diagonal=0, )
paddle.tril(Tensor([9, 9],"float16"), )
paddle.tril(x=Tensor([3, 2, 2],"float64"), diagonal=-5, )
paddle.tril(x=Tensor([3, 2, 2],"float64"), diagonal=0, )
paddle.tril(Tensor([8, 8],"float16"), )
paddle.tril(Tensor([1, 1],"float32"), diagonal=0, )
paddle.tril(Tensor([1, 1, 1, 1],"float32"), )
paddle.tril(Tensor([4, 4],"bool"), )
paddle.tril_indices(row=10, col=3, offset=0, )
paddle.tril_indices(row=10, col=3, offset=2, )
paddle.tril_indices(row=10, col=3, offset=-2, )
paddle.tril_indices(4, 4, -1, )
paddle.tril_indices(4, 4, 2, )
paddle.tril_indices(row=10, col=10, offset=2, )
paddle.tril_indices(4, None, 2, )
paddle.tril_indices(row=3, col=10, offset=2, )
paddle.tril_indices(row=3, col=10, offset=-2, )
paddle.tril_indices(row=10, col=10, offset=0, )
paddle.tril_indices(row=10, col=10, offset=-2, )
paddle.tril_indices(row=3, col=10, offset=0, )
paddle.triu(Tensor([2, 1, 1, 151],"float16"), )
paddle.triu(Tensor([2, 1, 1, 132],"float16"), )
paddle.triu(Tensor([2, 1, 1, 153],"float16"), )
paddle.triu(Tensor([2, 1, 1, 118],"float16"), )
paddle.triu(Tensor([2, 1, 1, 75],"float16"), )
paddle.triu(Tensor([2, 1, 1, 80],"float16"), )
paddle.triu(Tensor([4, 1, 5, 5],"float32"), diagonal=1, )
paddle.triu(Tensor([2, 1, 1, 99],"float16"), )
paddle.triu(Tensor([2, 1, 1, 83],"float16"), )
paddle.triu(Tensor([2, 1, 1, 156],"float16"), )
paddle.triu(Tensor([2, 1, 1, 115],"float16"), )
paddle.triu(Tensor([2, 1, 1, 124],"float16"), )
paddle.triu(Tensor([2, 1, 1, 119],"float16"), )
paddle.triu(Tensor([5, 1, 10, 10],"float32"), diagonal=1, )
paddle.triu(Tensor([2, 1, 1, 126],"float16"), )
paddle.triu(Tensor([2, 1, 1, 107],"float16"), )
paddle.triu(Tensor([2, 1, 1, 138],"float16"), )
paddle.triu(Tensor([2, 1, 1, 92],"float16"), )
paddle.triu(Tensor([2, 1, 1, 139],"float16"), )
paddle.triu(Tensor([2, 1, 1, 100],"float16"), )
paddle.triu(Tensor([2, 1, 1, 125],"float16"), )
paddle.triu(Tensor([2, 1, 1, 98],"float16"), )
paddle.triu(Tensor([2, 1, 1, 113],"float16"), )
paddle.triu(Tensor([2, 1, 1, 159],"float16"), )
paddle.triu(Tensor([23, 23],"float32"), diagonal=1, )
paddle.triu(Tensor([2, 1, 1, 105],"float16"), )
paddle.triu(Tensor([1, 1, 20, 22],"float32"), diagonal=1, )
paddle.triu(Tensor([2, 1, 1, 134],"float16"), )
paddle.triu(Tensor([2, 1, 1, 82],"float16"), )
paddle.triu(Tensor([2, 1, 1, 149],"float16"), )
paddle.triu(Tensor([6, 1, 5, 5],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 20, 20],"float32"), diagonal=1, )
paddle.triu(Tensor([2, 1, 1, 110],"float16"), )
paddle.triu(Tensor([2, 1, 10, 10],"float32"), diagonal=1, )
paddle.triu(Tensor([2, 1, 1, 140],"float16"), )
paddle.triu(Tensor([2, 1, 1, 116],"float16"), )
paddle.triu(Tensor([30, 30],"float32"), diagonal=1, )
paddle.triu(Tensor([2, 1, 1, 96],"float16"), )
paddle.triu(Tensor([2, 1, 1, 154],"float16"), )
paddle.triu(Tensor([2, 1, 1, 146],"float16"), )
paddle.triu(Tensor([2, 1, 1, 76],"float16"), )
paddle.triu(Tensor([2, 1, 1, 142],"float16"), )
paddle.triu(Tensor([2, 1, 1, 78],"float16"), )
paddle.triu(Tensor([2, 1, 1, 85],"float16"), )
paddle.triu(Tensor([2, 1, 1, 143],"float16"), )
paddle.triu(Tensor([2, 1, 1, 141],"float16"), )
paddle.triu(Tensor([1, 2, 10, 16],"bool"), )
paddle.triu(Tensor([13, 1, 7, 7],"float32"), diagonal=1, )
paddle.triu(Tensor([2, 1, 1, 128],"float16"), )
paddle.triu(Tensor([2, 1, 1, 137],"float16"), )
paddle.triu(Tensor([2, 1, 1, 147],"float16"), )
paddle.triu(Tensor([13, 13],"float32"), diagonal=1, )
paddle.triu(Tensor([2, 1, 1, 117],"float16"), )
paddle.triu(Tensor([12, 7, 7],"float32"), diagonal=1, )
paddle.triu(Tensor([2, 1, 1, 121],"float16"), )
paddle.triu(Tensor([2, 1, 1, 87],"float16"), )
paddle.triu(Tensor([2, 1, 1, 122],"float16"), )
paddle.triu(Tensor([2, 1, 1, 136],"float16"), )
paddle.triu(Tensor([2, 1, 1, 84],"float16"), )
paddle.triu(Tensor([2, 1, 1, 123],"float16"), )
paddle.triu(Tensor([2, 1, 1, 88],"float16"), )
paddle.triu(Tensor([2, 1, 1, 108],"float16"), )
paddle.triu(Tensor([2, 1, 1, 150],"float16"), )
paddle.triu(Tensor([1, 1, 10, 16],"float32"), )
paddle.triu(Tensor([2, 1, 1, 148],"float16"), )
paddle.triu(Tensor([2, 1, 1, 90],"float16"), )
paddle.triu(Tensor([22, 22],"float32"), diagonal=1, )
paddle.triu(Tensor([2, 1, 1, 131],"float16"), )
paddle.triu(Tensor([2, 1, 1, 152],"float16"), )
paddle.triu(Tensor([1, 1, 11, 11],"float32"), diagonal=1, )
paddle.triu(Tensor([2, 1, 1, 157],"float16"), )
paddle.triu(Tensor([4, 1, 5, 5],"float16"), diagonal=1, )
paddle.triu(Tensor([2, 1, 1, 111],"float16"), )
paddle.triu(Tensor([2, 1, 1, 81],"float16"), )
paddle.triu(Tensor([2, 1, 1, 104],"float16"), )
paddle.triu(Tensor([2, 1, 1, 158],"float16"), )
paddle.triu(Tensor([2, 1, 1, 127],"float16"), )
paddle.triu(Tensor([2, 1, 1, 94],"float16"), )
paddle.triu(Tensor([2, 1, 1, 114],"float16"), )
paddle.triu(Tensor([2, 1, 1, 133],"float16"), )
paddle.triu(Tensor([2, 1, 1, 112],"float16"), )
paddle.triu(Tensor([2, 1, 1, 120],"float16"), )
paddle.triu(Tensor([2, 1, 1, 129],"float16"), )
paddle.triu(Tensor([2, 1, 1, 97],"float16"), )
paddle.triu(Tensor([2, 1, 1, 91],"float16"), )
paddle.triu(Tensor([1, 1, 10, 16],"float32"), diagonal=1, )
paddle.triu(Tensor([2, 1, 1, 89],"float16"), )
paddle.triu(Tensor([2, 1, 1, 103],"float16"), )
paddle.triu(Tensor([11, 16],"float32"), diagonal=1, )
paddle.triu(Tensor([2, 1, 1, 95],"float16"), )
paddle.triu(Tensor([2, 1, 1, 109],"float16"), )
paddle.triu(Tensor([2, 1, 1, 101],"float16"), )
paddle.triu(Tensor([2, 1, 1, 144],"float16"), )
paddle.triu(Tensor([2, 1, 1, 102],"float16"), )
paddle.triu(Tensor([2, 1, 1, 155],"float16"), )
paddle.triu(Tensor([2, 1, 1, 86],"float16"), )
paddle.triu(Tensor([10, 20, 1],"float32"), 0, )
paddle.triu(Tensor([2, 1, 1, 135],"float16"), )
paddle.triu(Tensor([2, 1, 1, 93],"float16"), )
paddle.triu(Tensor([2, 1, 1, 130],"float16"), )
paddle.triu(Tensor([1, 1, 17, 17],"float32"), diagonal=1, )
paddle.triu(Tensor([2, 1, 1, 77],"float16"), )
paddle.triu(Tensor([2, 1, 1, 145],"float16"), )
paddle.triu(Tensor([2, 1, 1, 79],"float16"), )
paddle.triu(Tensor([2, 1, 1, 106],"float16"), )
paddle.triu(Tensor([4, 1, 1, 7],"float32"), diagonal=1, )
paddle.triu(x=Tensor([3, 2, 2],"int32"), diagonal=0, )
paddle.triu(Tensor([4, 1, 1, 12],"float16"), diagonal=1, )
paddle.triu(Tensor([2, 1, 1, 6],"float32"), diagonal=1, )
paddle.triu(Tensor([4, 1, 1, 13],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 10],"float16"), diagonal=1, )
paddle.triu(Tensor([2, 1, 5, 5],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 13],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 24],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 2],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 32],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 21],"float32"), diagonal=1, )
paddle.triu(Tensor([4, 1, 1, 4],"float32"), diagonal=1, )
paddle.triu(Tensor([4, 1, 3, 3],"float32"), diagonal=1, )
paddle.triu(x=Tensor([3, 2, 2],"float32"), diagonal=0, )
paddle.triu(Tensor([5, 5],"float32"), diagonal=1, )
paddle.triu(Tensor([7, 7],"float32"), 1, )
paddle.triu(Tensor([1, 1, 5, 5],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 26],"float32"), diagonal=1, )
paddle.triu(Tensor([4, 1, 1, 9],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 12],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 5, 5],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 1],"float32"), diagonal=1, )
paddle.triu(Tensor([6, 1, 3, 3],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 22],"float32"), diagonal=1, )
paddle.triu(Tensor([4, 1, 1, 11],"float16"), diagonal=1, )
paddle.triu(Tensor([6, 4],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 15],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 7],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 19],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 12],"float32"), diagonal=1, )
paddle.triu(x=Tensor([3, 2, 2],"int64"), diagonal=0, )
paddle.triu(Tensor([1, 1, 1, 13],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 31],"float32"), diagonal=1, )
paddle.triu(x=Tensor([3, 2, 2],"float64"), diagonal=0, )
paddle.triu(Tensor([4, 5],"float32"), diagonal=1, )
paddle.triu(Tensor([4, 1, 1, 8],"float16"), diagonal=1, )
paddle.triu(x=Tensor([3, 2, 2],"float64"), diagonal=5, )
paddle.triu(Tensor([1, 1, 1, 36],"float32"), diagonal=1, )
paddle.triu(Tensor([11, 7],"float32"), diagonal=1, )
paddle.triu(Tensor([6, 1, 1, 7],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 9],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 23],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 6],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 29],"float32"), diagonal=1, )
paddle.triu(Tensor([6, 1, 1, 4],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 25],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 6],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 7],"float32"), diagonal=1, )
paddle.triu(Tensor([4, 1, 1, 6],"float16"), diagonal=1, )
paddle.triu(Tensor([2, 1, 1, 5],"float32"), diagonal=1, )
paddle.triu(Tensor([4, 1, 1, 15],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 30],"float32"), diagonal=1, )
paddle.triu(Tensor([2, 1, 1, 7],"float32"), diagonal=1, )
paddle.triu(Tensor([4, 1, 1, 10],"float16"), diagonal=1, )
paddle.triu(Tensor([2, 1, 1, 4],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 27],"float32"), diagonal=1, )
paddle.triu(Tensor([4, 1, 1, 6],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 3],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 9],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 11],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 14],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 8],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 8, 8],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 28],"float32"), diagonal=1, )
paddle.triu(Tensor([6, 1, 1, 5],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 18],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 11],"float16"), diagonal=1, )
paddle.triu(Tensor([4, 1, 1, 5],"float32"), diagonal=1, )
paddle.triu(x=Tensor([3, 2, 2],"float64"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 35],"float32"), diagonal=1, )
paddle.triu(Tensor([4, 1, 1, 7],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 34],"float32"), diagonal=1, )
paddle.triu(x=Tensor([3, 2, 2],"float64"), diagonal=-5, )
paddle.triu(Tensor([1, 1, 1, 10],"float32"), diagonal=1, )
paddle.triu(Tensor([6, 1, 1, 6],"float32"), diagonal=1, )
paddle.triu(Tensor([2, 1, 3, 3],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 33],"float32"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 14],"float32"), diagonal=1, )
paddle.triu(Tensor([4, 1, 1, 14],"float16"), diagonal=1, )
paddle.triu(x=Tensor([3, 2, 2],"float64"), diagonal=-1, )
paddle.triu(Tensor([1, 1, 1, 8],"float16"), diagonal=1, )
paddle.triu(Tensor([1, 1, 1, 20],"float32"), diagonal=1, )
paddle.triu_indices(row=3, col=10, offset=2, )
paddle.triu_indices(row=10, col=3, offset=-2, )
paddle.triu_indices(row=10, col=10, offset=0, )
paddle.triu_indices(4, 4, -1, )
paddle.triu_indices(row=3, col=10, offset=-2, )
paddle.triu_indices(4, 4, 2, )
paddle.triu_indices(4, None, 2, )
paddle.triu_indices(row=10, col=10, offset=-2, )
paddle.triu_indices(row=10, col=3, offset=2, )
paddle.triu_indices(row=3, col=10, offset=0, )
paddle.triu_indices(row=10, col=3, offset=0, )
paddle.triu_indices(row=10, col=10, offset=2, )
paddle.trunc(Tensor([20, 20],"float32"), )
paddle.trunc(input=Tensor([6, 6, 6],"float64"), )
paddle.trunc(Tensor([10, 20, 1],"float32"), )
paddle.trunc(input=Tensor([6, 6],"int64"), )
paddle.trunc(input=Tensor([6, 6],"int32"), )
paddle.trunc(Tensor([],"float32"), )
paddle.unbind(Tensor([2, 3, 8, 8],"float32"), axis=0, )
paddle.unbind(Tensor([4, 5, 6],"float32"), )
paddle.unbind(Tensor([3, 9, 5],"float32"), axis=0, )
paddle.unbind(Tensor([3, 2, 2],"int32"), axis=0, )
paddle.unbind(Tensor([4, 3, 2, 2],"float64"), axis=1, )
paddle.unbind(Tensor([1],"float32"), 0, )
paddle.unbind(Tensor([2, 2],"bool"), axis=0, )
paddle.unbind(Tensor([2, 3],"complex128"), 0, )
paddle.unbind(Tensor([2],"float32"), 0, )
paddle.unbind(Tensor([2, 3],"float32"), 0, )
paddle.unbind(Tensor([2, 3],"complex64"), 0, )
paddle.unbind(Tensor([4, 2, 3],"float32"), axis=2, )
paddle.unbind(Tensor([4, 2, 3],"float32"), axis=-1, )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=0, shape=Tensor([2],"int64"), )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=1, shape=tuple(2,3,), )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=0, shape=tuple(-1,), )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=0, shape=tuple(-1,2,), )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=-1, shape=tuple(2,8,), )
paddle.unflatten(x=Tensor([4, 6, 16],"int16"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=0, shape=list[-1,], )
paddle.unflatten(x=Tensor([4, 6, 16],"float16"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 6, 16],"bool"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(Tensor([3, 4, 4, 5],"float32"), axis=1, shape=list[2,2,], name=None, )
paddle.unflatten(x=Tensor([4, 6, 16],"float64"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=-1, shape=list[-1,2,], )
paddle.unflatten(x=Tensor([4, 6, 16],"int64"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 6, 16],"int32"), axis=0, shape=tuple(2,2,), )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=0, shape=list[2,2,], )
paddle.unflatten(x=Tensor([4, 6, 16],"float32"), axis=0, shape=tuple(2,2,), )
paddle.unfold(Tensor([12],"float64"), -1, 2, 5, )
paddle.unfold(Tensor([5, 5],"int64"), 0, 5, 1, )
paddle.unfold(Tensor([5, 5],"float16"), 0, 5, 1, )
paddle.unfold(Tensor([12],"int64"), -1, 2, 5, )
paddle.unfold(Tensor([12],"float32"), -1, 2, 5, )
paddle.unfold(Tensor([5, 5],"float32"), 0, 5, 1, )
paddle.unfold(Tensor([5, 5],"int32"), 0, 5, 1, )
paddle.unfold(Tensor([9],"float32"), 0, 2, 4, )
paddle.unfold(Tensor([12],"int32"), -1, 2, 5, )
paddle.unfold(Tensor([5, 5],"float64"), 0, 5, 1, )
paddle.unfold(Tensor([12],"float16"), -1, 2, 5, )
paddle.unique_consecutive(Tensor([100],"float64"), return_inverse=True, return_counts=True, )
paddle.unique_consecutive(Tensor([100],"float64"), )
paddle.unique_consecutive(Tensor([100],"float64"), return_inverse=True, return_counts=True, axis=-1, )
paddle.unique_consecutive(x=Tensor([6, 1],"float32"), return_inverse=True, return_counts=True, )
paddle.unique_consecutive(x=Tensor([4, 1],"float32"), return_inverse=True, )
paddle.unique_consecutive(x=Tensor([3, 6],"float64"), axis=1, )
paddle.unique_consecutive(x=Tensor([2, 6],"int64"), )
paddle.unique_consecutive(x=Tensor([2, 6],"float32"), )
paddle.unique_consecutive(x=Tensor([6, 4],"float32"), return_inverse=True, return_counts=True, axis=0, )
paddle.unique_consecutive(x=Tensor([4, 1],"float64"), )
paddle.unique_consecutive(Tensor([],"float32"), return_inverse=True, return_counts=True, )
paddle.unique_consecutive(x=Tensor([4, 1],"float64"), dtype="int32", )
paddle.unique_consecutive(x=Tensor([2, 6],"int32"), )
paddle.unique_consecutive(x=Tensor([2, 6],"float64"), )
paddle.unstack(Tensor([5, 10, 15],"float32"), axis=0, )
paddle.unstack(x=Tensor([13, 7, 2],"float32"), axis=-1, )
paddle.unstack(Tensor([4, 4, 8],"float64"), )
paddle.unstack(x=Tensor([2, 14, 7],"float32"), axis=0, )
paddle.unstack(x=Tensor([2, 13, 8],"float32"), axis=0, )
paddle.unstack(Tensor([5, 10, 15],"float32"), axis=2, )
paddle.unstack(Tensor([5, 10, 15],"float32"), axis=1, )
paddle.unstack(Tensor([2, 4, 32],"float64"), )
paddle.unstack(Tensor([5, 10, 15],"float32"), axis=-3, )
paddle.unstack(x=Tensor([2, 13, 7],"float32"), axis=0, )
paddle.unstack(Tensor([4, 4, 32],"float64"), )
paddle.unstack(Tensor([5, 10, 15],"float32"), axis=-2, )
paddle.unstack(Tensor([13, 7, 2],"float32"), axis=-1, )
paddle.unstack(Tensor([5, 10, 15],"float32"), axis=-1, )
paddle.unstack(x=Tensor([2, 1, 20],"float32"), axis=0, )
paddle.unstack(Tensor([4, 2, 3],"float32"), axis=2, )
paddle.unstack(Tensor([3, 2],"float32"), 1, )
paddle.unstack(Tensor([0],"float64"), axis=0, )
paddle.unstack(Tensor([2, 4, 8],"float64"), )
paddle.unstack(Tensor([5, 0],"float64"), axis=1, )
paddle.unstack(Tensor([2, 3],"float64"), 0, )
paddle.unstack(Tensor([1, 4],"float64"), 0, )
paddle.unstack(Tensor([4, 2, 3],"float32"), axis=-1, )
paddle.unstack(Tensor([0, 11, 22],"float64"), axis=-2, )
paddle.unstack(Tensor([2],"float32"), 0, )
paddle.unstack(x=Tensor([2, 1, 22],"float32"), axis=0, )
paddle.unstack(x=Tensor([2, 2, 7],"float32"), axis=0, )
paddle.unstack(Tensor([1],"float32"), 0, )
paddle.unstack(Tensor([5, 0, 10],"float64"), axis=2, )
paddle.unstack(Tensor([7, 11, 0],"float64"), axis=1, )
paddle.unstack(Tensor([1, 3],"float64"), 0, )
paddle.unstack(x=Tensor([2, 7, 2],"float32"), axis=-1, )
paddle.unstack(Tensor([4, 3, 2, 2],"float64"), axis=1, )
paddle.unstack(Tensor([3, 2],"float64"), 1, )
paddle.unstack(Tensor([3, 2, 2],"int32"), axis=0, )
paddle.vander(Tensor([5],"complex128"), 0, True, )
paddle.vander(Tensor([5],"float32"), 2, True, )
paddle.vander(Tensor([5],"float32"), 1, True, )
paddle.vander(Tensor([5],"float32"), 1, False, )
paddle.vander(Tensor([5],"complex128"), 1, True, )
paddle.vander(Tensor([5],"float32"), 3, True, )
paddle.vander(Tensor([5],"float32"), 0, False, )
paddle.vander(Tensor([5],"float32"), 6, True, )
paddle.vander(Tensor([5],"complex128"), 3, True, )
paddle.vander(Tensor([5],"complex128"), 0, False, )
paddle.vander(Tensor([5],"complex128"), 2, True, )
paddle.vander(Tensor([5],"float32"), 8, True, )
paddle.vander(Tensor([5],"complex128"), 4, True, )
paddle.vander(Tensor([5],"float32"), 5, True, )
paddle.vander(Tensor([5],"float32"), 0, True, )
paddle.vander(Tensor([5],"float32"), 4, True, )
paddle.vander(Tensor([5],"complex128"), 1, False, )
paddle.vander(Tensor([5],"float32"), 7, True, )
paddle.var(Tensor([8, 64, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([8, 8, 3, 3],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([1, 3, 4, 10],"float64"), list[1,3,], True, False, )
paddle.var(Tensor([1, 3, 4, 10],"float64"), tuple(1,3,), True, False, )
paddle.var(x=Tensor([2, 96, 2],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
paddle.var(Tensor([16, 8, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([1, 3, 4, 10],"float64"), list[1,2,], True, False, )
paddle.var(Tensor([1, 3, 4, 10],"float64"), list[1,3,], False, False, )
paddle.var(Tensor([32, 16, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([1, 3, 4, 10],"float32"), list[1,3,], True, False, )
paddle.var(Tensor([384],"float64"), )
paddle.var(x=Tensor([3, 96, 1],"float32"), axis=tuple(1,), keepdim=True, unbiased=False, )
paddle.var(Tensor([1, 3, 4, 10],"float64"), 2, True, False, )
paddle.var(Tensor([8, 16, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([32, 8, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([16, 32, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([8, 32, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(Tensor([2],"float32"), )
paddle.var(x=Tensor([3, 3, 3],"float64"), )
paddle.var(x=Tensor([2, 3],"float64"), )
paddle.var(x=Tensor([3, 3, 3],"float64"), axis=0, unbiased=False, )
paddle.var(x=Tensor([3, 3, 3],"float64"), axis=tuple(0,1,), keepdim=True, )
paddle.var(x=Tensor([3, 3, 3],"float64"), axis=list[0,1,], )
paddle.var(Tensor([],"float32"), list[], )
paddle.var(x=Tensor([3, 3, 3],"float64"), axis=0, )
paddle.var(Tensor([64],"float64"), )
paddle.var(Tensor([],"float32"), )
paddle.var(Tensor([8, 8, 1, 1],"float32"), axis=list[1,2,3,], keepdim=True, unbiased=False, )
paddle.var(x=Tensor([2, 3],"float32"), )
paddle.var(x=Tensor([3, 3, 3],"float64"), axis=tuple(0,1,), )
paddle.vecdot(Tensor([3, 4, 5],"float64"), Tensor([3, 4, 5],"float64"), axis=1, )
paddle.vecdot(Tensor([2],"float32"), Tensor([2, 2],"float32"), axis=-1, )
paddle.vecdot(Tensor([2, 2],"float32"), Tensor([2, 2],"float64"), axis=-1, )
paddle.vecdot(Tensor([],"float32"), Tensor([],"float32"), )
paddle.vecdot(Tensor([2, 0, 4],"float32"), Tensor([2, 0, 4],"float32"), axis=-1, )
paddle.vecdot(Tensor([2, 0, 0],"float32"), Tensor([2, 0, 0],"float32"), axis=1, )
paddle.vecdot(Tensor([2, 3, 4],"float64"), Tensor([2, 3, 4],"float64"), axis=-1, )
paddle.vecdot(Tensor([3, 4],"float32"), Tensor([3, 4],"float32"), axis=-1, )
paddle.vecdot(Tensor([2, 2],"complex64"), Tensor([2, 2],"complex64"), axis=-1, )
paddle.vecdot(Tensor([2, 2],"float64"), Tensor([2, 2],"complex64"), axis=-1, )
paddle.vecdot(Tensor([2, 0, 0],"float32"), Tensor([2, 0, 0],"float32"), axis=0, )
paddle.vecdot(Tensor([3, 4],"float64"), Tensor([3, 4],"float64"), axis=-1, )
paddle.vecdot(Tensor([3],"float32"), Tensor([3],"float32"), )
paddle.vecdot(Tensor([0, 4],"float32"), Tensor([0, 4],"float32"), axis=-1, )
paddle.vecdot(Tensor([2, 2],"float32"), Tensor([2],"float32"), axis=-1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 2, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 3, 5, 5],"float32"), offset=Tensor([4, 18, 1, 1],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[3,3,], deformable_groups=1, groups=1, mask=None, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 3, 5, 5],"float32"), offset=Tensor([4, 18, 1, 1],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[3,3,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 3, 5, 5],"float32"), offset=Tensor([4, 18, 1, 1],"float32"), weight=Tensor([5, 3, 3, 3],"float32"), bias=Tensor([5],"float32"), stride=list[1,1,], padding=list[1,1,], dilation=list[3,3,], deformable_groups=1, groups=1, mask=Tensor([4, 9, 1, 1],"float32"), )
paddle.vision.ops.deform_conv2d(x=Tensor([4, 2, 5, 5],"float32"), offset=Tensor([4, 18, 3, 3],"float32"), weight=Tensor([5, 2, 3, 3],"float32"), bias=None, stride=list[1,1,], padding=list[0,0,], dilation=list[1,1,], deformable_groups=1, groups=1, )
paddle.vision.ops.deform_conv2d(Tensor([2, 4, 4, 4],"float32"), Tensor([2, 18, 4, 4],"float32"), Tensor([4, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 3, 5, 5],"float32"), Tensor([2, 2, 5, 5],"float32"), Tensor([40, 3, 1, 1],"float32"), None, list[1,1,], list[0,0,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 4, 4, 4],"float64"), Tensor([2, 18, 4, 4],"float64"), Tensor([4, 4, 3, 3],"float64"), None, list[1,1,], list[1,1,], list[1,1,], 1, 1, None, )
paddle.vision.ops.deform_conv2d(Tensor([2, 8, 4, 4],"float32"), Tensor([2, 18, 4, 4],"float32"), Tensor([4, 4, 3, 3],"float32"), None, list[1,1,], list[1,1,], list[1,1,], 1, 2, None, )
paddle.vision.ops.roi_pool(Tensor([3, 3, 6, 4],"float64"), Tensor([6, 4],"float64"), Tensor([3],"int32"), tuple(2,2,), 0.25, )
paddle.vision.ops.roi_pool(x=Tensor([1, 1, 4, 4],"float32"), boxes=Tensor([2, 4],"float32"), boxes_num=Tensor([1],"int32"), output_size=1, spatial_scale=1.0, )
paddle.vsplit(Tensor([6, 4],"uint8"), 3, )
paddle.vsplit(Tensor([6, 4],"int32"), 3, )
paddle.vsplit(Tensor([6, 4, 3],"int64"), list[2,4,], )
paddle.vsplit(Tensor([6, 4],"float32"), 3, )
paddle.vsplit(Tensor([6, 4],"int64"), list[2,4,], )
paddle.vsplit(Tensor([6, 4],"float16"), 3, )
paddle.vsplit(Tensor([6, 4, 3],"int64"), 3, )
paddle.vsplit(Tensor([6, 4, 3],"int64"), list[-1,1,3,], )
paddle.vsplit(Tensor([6, 4],"int64"), 3, )
paddle.vsplit(Tensor([6, 4, 3],"int64"), list[-1,], )
paddle.vsplit(Tensor([6, 4, 3],"int64"), tuple(2,1,3,), )
paddle.vsplit(Tensor([6, 4],"int64"), list[-1,1,3,], )
paddle.vsplit(Tensor([6, 4],"int64"), list[-1,], )
paddle.vsplit(Tensor([6, 4, 3],"int64"), 2, )
paddle.vsplit(Tensor([6, 4],"int64"), tuple(2,1,3,), )
paddle.vsplit(Tensor([6, 4],"bool"), 3, )
paddle.vsplit(Tensor([6, 4],"float64"), 3, )
paddle.vsplit(Tensor([6, 4],"int64"), 2, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),Tensor([3, 4, 2, 5],"float64"),], )
paddle.vstack(list[Tensor([],"float16"),], name=None, )
paddle.vstack(list[Tensor([],"float64"),Tensor([],"float64"),Tensor([],"float64"),], )
paddle.vstack(list[Tensor([3, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),Tensor([1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([2],"float64"),Tensor([1, 2],"float64"),], )
paddle.vstack(list[Tensor([],"float64"),], name=None, )
paddle.vstack(list[Tensor([5],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),], )
paddle.vstack(list[Tensor([],"int64"),], )
paddle.vstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([],"float64"),Tensor([],"float64"),Tensor([],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 2],"float64"),], )
paddle.vstack(list[Tensor([],"float64"),], )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], )
paddle.vstack(list[Tensor([1],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),], )
paddle.vstack(list[Tensor([1],"float64"),], )
paddle.vstack(list[Tensor([],"float32"),], name=None, )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),Tensor([3, 4, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([1],"float64"),], name=None, )
paddle.vstack(list[Tensor([],"int32"),], )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([],"int64"),], name=None, )
paddle.vstack(list[Tensor([1],"float64"),Tensor([1],"float64"),Tensor([1],"float64"),], name=None, )
paddle.vstack(list[Tensor([],"float16"),], )
paddle.vstack(list[Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),Tensor([1, 1],"float64"),], )
paddle.vstack(list[Tensor([],"int32"),], name=None, )
paddle.vstack(list[Tensor([1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),Tensor([3, 2],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),], )
paddle.vstack(list[Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),Tensor([1, 1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([5],"float64"),Tensor([5],"float64"),Tensor([5],"float64"),], name=None, )
paddle.vstack(list[Tensor([1, 1, 1],"float64"),], name=None, )
paddle.vstack(list[Tensor([],"float32"),], )
paddle.vstack(list[Tensor([3, 4, 2],"float64"),], name=None, )
paddle.vstack(list[Tensor([2],"float64"),Tensor([1, 2],"float64"),], name=None, )
paddle.zeros(list[2,1,1,37,], dtype=Dtype(float16), )
paddle.zeros(list[1,2,3,], )
paddle.zeros(list[2,1,1,64,], dtype=Dtype(float16), )
paddle.zeros(list[74240,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[5504,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[64256,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[11480,80,], dtype="float32", )
paddle.zeros(shape=list[60544,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2,1,1,42,], dtype=Dtype(float32), )
paddle.zeros(tuple(1,16,56,63,1,), )
paddle.zeros(shape=list[2688,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[13824,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[55296,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[66688,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[10944,80,], dtype="float32", )
paddle.zeros(list[3328,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[21760,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[51456,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[33280,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[24448,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[1,8,1,2,], dtype=Dtype(float32), )
paddle.zeros(list[21376,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(25, dtype=VarType(int32), )
paddle.zeros(list[85632,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(tuple(32,256,), )
paddle.zeros(list[59904,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[40576,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[46080,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[47424,80,], dtype="float32", )
paddle.zeros(list[160512,80,], dtype="float32", )
paddle.zeros(list[95872,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[68736,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[45056,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[7,2,3,], dtype="float32", )
paddle.zeros(shape=list[12800,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[8,], dtype="float32", )
paddle.zeros(list[40,], dtype="float32", )
paddle.zeros(list[44544,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[16,64,], dtype="float32", )
paddle.zeros(list[35840,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[32896,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2,1,1,6,], dtype=Dtype(float32), )
paddle.zeros(shape=list[60160,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[71936,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[51584,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[52533,], dtype="int32", )
paddle.zeros(list[39680,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[2,], dtype=type(numpy.float16), )
paddle.zeros(list[78080,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2,1,1,104,], dtype=Dtype(float32), )
paddle.zeros(list[16000,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[10752,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[27776,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[90112,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[1,384,], dtype="int64", )
paddle.zeros(list[16256,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[300507136,], dtype=Dtype(float32), )
paddle.zeros(list[65792,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(tuple(4,4,16,22,), dtype=Dtype(float32), )
paddle.zeros(list[9088,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[11904,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[72448,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2,8,23,23,], dtype=Dtype(float32), )
paddle.zeros(list[76800,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[20224,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[83328,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2176,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2,1,1,81,], dtype=Dtype(float16), )
paddle.zeros(shape=list[50688,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[72576,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(tuple(1,), )
paddle.zeros(list[52608,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[40960,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2304,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(tuple(529,24,), )
paddle.zeros(list[13,7,], dtype="int64", )
paddle.zeros(list[80896,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[1,], dtype="int64", )
paddle.zeros(list[87552,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(tuple(1000,784,), )
paddle.zeros(list[45824,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[14592,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[30336,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[64128,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[52435,], dtype="int32", )
paddle.zeros(tuple(36858,), dtype=VarType(float32), )
paddle.zeros(list[55680,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[69120,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[70144,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[175104,80,], dtype="float32", )
paddle.zeros(list[52569,], dtype="int32", )
paddle.zeros(23, dtype=VarType(int32), )
paddle.zeros(list[50432,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[30848,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[11264,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[1024,1024,8,], dtype="float64", )
paddle.zeros(shape=list[60800,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=tuple(1,1,2,), dtype=Dtype(float64), )
paddle.zeros(list[5,10,8,], dtype="float32", )
paddle.zeros(list[21888,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[89600,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[57600,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[11088,80,], dtype="float32", )
paddle.zeros(list[73216,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[71424,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[968,80,], dtype="float32", )
paddle.zeros(list[52992,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[35712,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[68352,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[0,0,0,0,], )
paddle.zeros(list[2,200,], )
paddle.zeros(shape=list[128,512,], dtype=Dtype(int8), )
paddle.zeros(list[40960,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[14976,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[640,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[84480,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[69632,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[70784,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[27904,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[1664,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[52432,], dtype="int32", )
paddle.zeros(list[38912,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[71808,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[87040,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[3887,], dtype=Dtype(int64), )
paddle.zeros(list[43520,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[12928,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[50560,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[18,4,], dtype="float32", )
paddle.zeros(shape=list[74240,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[52567,], dtype="int32", )
paddle.zeros(list[9728,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[32896,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[69888,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[256,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[48000,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[105472,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[189696,80,], dtype="float32", )
paddle.zeros(shape=list[87680,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[3584,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[44800,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[880,80,], dtype="float32", )
paddle.zeros(list[32000,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(6, dtype="float32", )
paddle.zeros(list[62848,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[81152,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[52480,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[35712,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[52,], dtype=VarType(int64), )
paddle.zeros(list[68608,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[6016,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[54912,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[33280,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[1,2,], dtype=Dtype(float32), )
paddle.zeros(list[52632,], dtype="int32", )
paddle.zeros(list[1,161,126,1,], dtype="float32", )
paddle.zeros(list[23168,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[31360,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[63872,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[1000000,4,], dtype=Dtype(float64), )
paddle.zeros(list[34688,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[32384,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[51712,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[68608,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[11552,80,], dtype="float32", )
paddle.zeros(list[5632,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2,1,1,55,], dtype=Dtype(float32), )
paddle.zeros(list[2,1,1,59,], dtype=Dtype(float32), )
paddle.zeros(shape=list[27392,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[47488,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[1152,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[24576,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2560,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(tuple(13,2,), dtype="int64", )
paddle.zeros(shape=list[16512,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[61184,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[34816,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[37376,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2,1,1,88,], dtype=Dtype(float16), )
paddle.zeros(shape=list[60416,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[43008,80,], dtype="float32", )
paddle.zeros(shape=list[59136,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[82176,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[38144,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[22272,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=tuple(2,2,), dtype="int32", )
paddle.zeros(tuple(1,48,48,1,), dtype=VarType(float32), )
paddle.zeros(list[5120,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[31104,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[51840,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[22400,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[57344,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[15872,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[73344,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[512,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[72704,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[29312,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[256,], )
paddle.zeros(list[46720,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[64000,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2,198,], )
paddle.zeros(list[76800,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[22144,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[64384,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2584,80,], dtype="float32", )
paddle.zeros(list[900,4,], dtype="float32", )
paddle.zeros(list[12800,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[9216,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[58112,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2,1,1,72,], dtype=Dtype(float32), )
paddle.zeros(list[52559,], dtype="int32", )
paddle.zeros(shape=324, )
paddle.zeros(list[13184,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[48512,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[4194304,], dtype=Dtype(float16), )
paddle.zeros(list[20480,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[13184,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[1000000,4,], dtype="float64", )
paddle.zeros(list[25472,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[49152,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[6784,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[15872,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[63488,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[95872,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[85376,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[1,], dtype="float32", )
paddle.zeros(list[58112,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[78336,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[23,23,], dtype="float32", )
paddle.zeros(list[2,1,1,58,], dtype=Dtype(float32), )
paddle.zeros(shape=list[3,3,], dtype="float32", )
paddle.zeros(list[4,2,1,], )
paddle.zeros(list[39040,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[68352,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[12800,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[4608,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[95232,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[128,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[52423,], dtype="int32", )
paddle.zeros(list[55936,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2,1,], dtype=Dtype(int64), )
paddle.zeros(shape=list[1,257,1024,], )
paddle.zeros(list[7680,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[1280,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[18944,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(tuple(1,640,480,), VarType(float32), )
paddle.zeros(list[128,32,64,128,], dtype="float16", )
paddle.zeros(list[2,1,64,128,], dtype="float16", )
paddle.zeros(shape=tuple(6,8,64,64,), dtype="float16", )
paddle.zeros(list[64128,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[18944,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[65920,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[62208,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=tuple(1,4,4,1,), dtype=Dtype(float32), )
paddle.zeros(list[58112,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[19328,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(name="x", shape=list[100,10,], dtype="uint16", )
paddle.zeros(shape=list[56320,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(tuple(529,6,), )
paddle.zeros(list[7904,80,], dtype="float32", )
paddle.zeros(list[2,1,1,65,], dtype=Dtype(float16), )
paddle.zeros(list[72576,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[67328,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[14592,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[192,], dtype=Dtype(float32), )
paddle.zeros(shape=list[13,7,1,], dtype="int64", )
paddle.zeros(shape=list[41984,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[46720,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2,1,1,100,], dtype=Dtype(float32), )
paddle.zeros(list[47104,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[46464,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[61056,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[5248,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[66560,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(200, dtype=VarType(int32), )
paddle.zeros(list[Tensor([],"int32"),Tensor([],"int32"),Tensor([],"int32"),], )
paddle.zeros(list[18432,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[79872,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[18,1,], Dtype(float32), )
paddle.zeros(shape=list[427616256,], dtype=Dtype(float32), )
paddle.zeros(list[65792,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[38272,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(tuple(2,1,4096,1,128,), dtype="float32", )
paddle.zeros(list[10496,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[44288,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[7424,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[19968,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[], dtype="float32", )
paddle.zeros(shape=list[80896,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[21504,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[67840,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[60928,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[1536,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[28288,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[83328,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[64,], dtype="float32", )
paddle.zeros(list[66560,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[32256,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[62336,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[48544,80,], dtype="float32", )
paddle.zeros(list[4,], dtype="int64", )
paddle.zeros(list[70400,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[37376,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[16128,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[40064,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[7,2,3,], dtype="complex64", )
paddle.zeros(18, dtype=VarType(int32), )
paddle.zeros(list[39168,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[61440,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[128,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[25984,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[95232,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[10240,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[52462,], dtype="int32", )
paddle.zeros(list[20736,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2,1,1,66,], dtype=Dtype(float32), )
paddle.zeros(list[74880,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[1,], dtype="int32", )
paddle.zeros(list[7040,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[30976,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[63488,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[93184,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[41088,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[4480,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[69888,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[6016,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[44544,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[52427,], dtype="int32", )
paddle.zeros(list[63104,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[53248,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[61824,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[29696,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[47872,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[105472,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2048,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2,2,8,4096,96,], dtype="float16", )
paddle.zeros(list[69632,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[45312,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[13312,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[9984,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(tuple(1,), dtype=Dtype(float64), )
paddle.zeros(list[77568,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[36224,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2,10,], dtype="int64", )
paddle.zeros(list[0,10,], )
paddle.zeros(list[7424,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[60160,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[57728,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[6144,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[52616,], dtype="int32", )
paddle.zeros(tuple(16,4,16,), dtype=Dtype(float32), )
paddle.zeros(list[3456,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[28928,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[6400,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[27392,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[7,2,3,], dtype="float64", )
paddle.zeros(list[34048,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[9472,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[1,7,], )
paddle.zeros(list[64000,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[80256,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[79488,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[38400,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[61824,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[45440,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[35968,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[59904,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[1,1,1,24,], dtype=Dtype(float32), )
paddle.zeros(list[52548,], dtype="int32", )
paddle.zeros(list[16384,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[43680,80,], dtype="float32", )
paddle.zeros(list[26112,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[3328,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[98304,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[49408,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[1,8,1,1,], dtype=Dtype(float32), )
paddle.zeros(list[1920,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[84480,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[51840,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[4,5,6,], dtype=Dtype(float32), )
paddle.zeros(shape=list[10240,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(tuple(1,707,576,), VarType(float32), )
paddle.zeros(list[6656,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[61952,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2,1,1,62,], dtype=Dtype(float16), )
paddle.zeros(list[33920,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[1,5,], dtype=Dtype(float32), )
paddle.zeros(list[147456,], dtype=Dtype(float16), )
paddle.zeros(shape=list[66304,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[3,7,], dtype=Dtype(float32), )
paddle.zeros(list[1,10,1,], )
paddle.zeros(list[23040,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[59776,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[5,], dtype="int64", )
paddle.zeros(list[2,1,1,57,], dtype=Dtype(float16), )
paddle.zeros(shape=list[31744,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[63616,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[49152,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[38976,80,], dtype="float32", )
paddle.zeros(list[16128,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[43264,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[], )
paddle.zeros(shape=list[13696,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[21120,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[53632,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[4096,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[1024,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[53120,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[40704,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[33792,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[32000,80,], dtype="float32", )
paddle.zeros(list[52634,], dtype="int32", )
paddle.zeros(list[39424,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[59904,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[75136,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[54784,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[33408,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[15104,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[62976,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[5000,384,], )
paddle.zeros(tuple(2,10,12,), )
paddle.zeros(list[36352,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[4864,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[98304,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[560,80,], dtype="float32", )
paddle.zeros(shape=list[11904,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[12544,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[71424,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[52540,], dtype="int32", )
paddle.zeros(list[54016,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[67584,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2280,80,], dtype="float32", )
paddle.zeros(list[21504,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[4,1,4,], )
paddle.zeros(list[33536,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[41472,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[63872,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[23680,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[9856,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[19968,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[15548,], dtype=Dtype(int64), )
paddle.zeros(shape=list[25088,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[194176,80,], dtype="float32", )
paddle.zeros(list[42624,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[49536,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[49408,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[11904,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[56576,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[38784,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[3584,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=tuple(4,2,64,64,), dtype="float16", )
paddle.zeros(list[1,16,1,], )
paddle.zeros(list[28032,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[25600,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[65664,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[10752,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[6784,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(tuple(8,), dtype="float32", )
paddle.zeros(list[720,80,], dtype="float32", )
paddle.zeros(shape=list[37888,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[52736,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[23040,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=Tensor([2],"int32"), )
paddle.zeros(list[62976,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[39168,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[26752,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2,8,1,12,], dtype=Dtype(float32), )
paddle.zeros(shape=list[896,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[60928,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[35840,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[28672,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[62720,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[28032,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[82048,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[26752,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[23424,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[10368,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[41472,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(tuple(8,501,8,), )
paddle.zeros(list[1048576,], dtype=Dtype(float32), )
paddle.zeros(list[11136,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[19968,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=Tensor([1],"int32"), dtype=type(numpy.int64), )
paddle.zeros(list[2304,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[7680,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[33152,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[16256,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[3840,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[52620,], dtype="int32", )
paddle.zeros(list[1100,1100,], VarType(float32), )
paddle.zeros(tuple(6400,), dtype=VarType(float32), )
paddle.zeros(list[31872,7168,], dtype=Dtype(bfloat16), )
paddle.zeros(list[2,1,1,85,], dtype=Dtype(float16), )
paddle.zeros(list[33792,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[52580,], dtype="int32", )
paddle.zeros(list[17024,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[32000,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(list[12288,8192,], dtype=Dtype(bfloat16), )
paddle.zeros(list[21376,3584,], dtype=Dtype(bfloat16), )
paddle.zeros(shape=list[5120,8192,], dtype=Dtype(bfloat16), )
paddle.nn.functional.gather_tree(Tensor([11, 4, 8],"int64"), Tensor([11, 4, 8],"int64"), )
paddle.nn.functional.gather_tree(Tensor([6, 4, 4],"int64"), Tensor([6, 4, 4],"int64"), )
paddle.nn.functional.gather_tree(Tensor([11, 4, 4],"int64"), Tensor([11, 4, 4],"int64"), )
paddle.nn.functional.gather_tree(Tensor([3, 2, 2],"int64"), Tensor([3, 2, 2],"int64"), )
paddle.rank(input=Tensor([1, 1, 1, 1],"int64"), )
paddle.rank(Tensor([],"float32"), )
paddle.rank(input=Tensor([4],"float64"), )
paddle.rank(input=Tensor([3, 2, 2, 2],"float64"), )
paddle.rank(input=Tensor([1, 1, 1, 1],"int32"), )
paddle.rank(Tensor([3, 5],"float32"), )
paddle.rank(input=Tensor([1, 1, 1, 1],"bool"), )
paddle.rank(input=Tensor([1, 1, 1, 1],"float32"), )
paddle.rank(input=Tensor([2, 2],"float64"), )
paddle.rank(input=Tensor([1, 1, 1, 1],"float64"), )
paddle.rank(input=Tensor([4, 1],"float64"), )
paddle.Tensor.greater_equal(Tensor([21],"int64"), Tensor([],"int64"), )
paddle.Tensor.greater_equal(Tensor([19],"int64"), Tensor([],"int64"), )
paddle.Tensor.slice(Tensor([4, 4],"float32"), list[1,], list[0,], list[1,], )
paddle.cumulative_trapezoid(y=Tensor([3, 3, 4],"float32"), x=None, dx=Tensor([],"int64"), axis=1, )
paddle.cumulative_trapezoid(y=Tensor([2, 3],"float32"), x=None, dx=Tensor([],"float32"), axis=-1, )
paddle.cumulative_trapezoid(y=Tensor([2, 3],"float32"), x=None, dx=Tensor([],"float32"), axis=0, )
paddle.Tensor.rank(Tensor([256],"float32"), )
paddle.Tensor.rank(Tensor([160],"float32"), )
paddle.Tensor.rank(Tensor([16, 16],"float32"), )
paddle.Tensor.rank(Tensor([320],"float32"), )
paddle.Tensor.rank(Tensor([128],"float32"), )
paddle.Tensor.rank(Tensor([512],"float32"), )
paddle.Tensor.rank(Tensor([24, 16],"float32"), )
paddle.Tensor.rank(Tensor([768],"float32"), )
paddle.Tensor.rank(Tensor([2, 1],"float32"), )
paddle.unique(Tensor([120],"int64"), return_index=True, return_inverse=True, return_counts=True, dtype="int32", )
paddle.unique(Tensor([120],"int64"), )
paddle.unique(Tensor([2, 3],"int64"), )
paddle.unique(Tensor([12],"int64"), )
paddle.unique(Tensor([],"float32"), return_index=True, return_inverse=True, return_counts=True, )
paddle.unique(x=Tensor([6],"float32"), )
paddle.unique(Tensor([6],"int64"), )
paddle.unique(Tensor([17],"int64"), )
paddle.unique(Tensor([15],"int64"), )
paddle.unique(x=Tensor([2, 2],"int64"), axis=0, )
paddle.unique(Tensor([16],"int64"), )
paddle.unique(Tensor([13],"int64"), )
paddle.unique(Tensor([11],"int64"), )
paddle.unique(Tensor([24],"int64"), )
paddle.unique(Tensor([4],"int64"), )
paddle.unique(Tensor([14],"int64"), )
paddle.unique(Tensor([86],"int64"), )
paddle.unique(x=Tensor([2, 2],"float64"), axis=1, )
paddle.unique(Tensor([20],"int64"), )
paddle.unique(Tensor([42],"int64"), )
paddle.unique(x=Tensor([2, 2],"int32"), axis=0, )
paddle.unique(Tensor([89],"int64"), )
paddle.unique(Tensor([3, 1],"int64"), )
paddle.unique(x=Tensor([6],"float64"), )
paddle.unique(x=Tensor([2, 2],"float32"), axis=1, )
paddle.unique(Tensor([8],"int64"), )
paddle.unique(Tensor([1],"int64"), )
paddle.unique(Tensor([10],"int64"), )
paddle.unique(Tensor([3, 5, 5],"float32"), return_index=True, return_inverse=True, return_counts=True, axis=0, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float64"), Tensor([5],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction="sum", )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float64"), Tensor([5],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction="mean", )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float64"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float16"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float64"), Tensor([5],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, return_softmax=True, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float64"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.0, margin3=0.35, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float32"), Tensor([5],"int64"), return_softmax=False, margin1=1.0, margin2=0.5, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([5, 37],"float64"), Tensor([5],"int64"), return_softmax=False, margin1=1.35, margin2=0.0, margin3=0.0, scale=2.0, group=None, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([2, 4],"float64"), label=Tensor([2],"int64"), margin1=1.0, margin2=0.5, margin3=0.0, scale=64.0, group=None, return_softmax=False, reduction="mean", )
paddle.nn.functional.margin_cross_entropy(Tensor([2, 4],"float64"), label=Tensor([2],"int64"), margin1=1.0, margin2=0.7, margin3=0.2, scale=32.0, group=None, return_softmax=False, reduction="mean", )
paddle.nn.functional.margin_cross_entropy(Tensor([2, 4],"float64"), label=Tensor([2],"int64"), margin1=0.8, margin2=0.0, margin3=0.15, scale=40.0, group=None, return_softmax=False, reduction=None, )
paddle.nn.functional.margin_cross_entropy(Tensor([2, 4],"float64"), Tensor([2],"int64"), margin1=1.0, margin2=0.7, margin3=0.2, scale=64.0, return_softmax=True, reduction=None, )
paddle.nn.functional.avg_pool1d(Tensor([3, 1, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 32],"float32"), kernel_size=2, stride=2, padding=list[0,], )
paddle.nn.functional.avg_pool1d(Tensor([2, 2, 120],"float32"), 25, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 32],"float32"), 2, None, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 8],"float64"), 1, 1, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=1, padding=0, ceil_mode=True, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 8],"float32"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 8],"float64"), 2, 2, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=3, stride=4, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=1, padding=1, exclusive=False, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 8],"float64"), 3, 4, 0, True, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 8],"float64"), 2, 1, 1, False, False, None, )
paddle.nn.functional.avg_pool1d(Tensor([2, 3, 8],"float64"), 2, 1, 0, True, True, None, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=1, stride=1, padding=0, )
paddle.nn.functional.avg_pool1d(x=Tensor([2, 3, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 32],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 32],"float32"), kernel_size=2, stride=2, padding="SAME", )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 32],"float32"), 2, None, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 1, 1, 0, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 2, list[1,], 1, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 2, 2, 0, False, False, None, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=1, padding=list[1,], )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=1, padding=0, ceil_mode=True, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), list[3,], 1, 1, False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 3, 4, 0, False, False, None, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=1, padding=1, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=list[3,], stride=1, padding=1, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float32"), kernel_size=2, stride=2, padding=0, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 2, 1, 0, False, True, None, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=2, padding=1, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=2, stride=list[1,], padding=1, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 2, 1, 1, False, False, None, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=1, stride=1, padding=0, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 2, 2, 1, False, False, None, )
paddle.nn.functional.max_pool1d(x=Tensor([2, 3, 8],"float64"), kernel_size=3, stride=4, padding=0, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float64"), 2, 1, list[1,], False, False, None, )
paddle.nn.functional.max_pool1d(Tensor([2, 3, 8],"float32"), 2, 2, 0, False, False, None, )
paddle.empty(list[8192,16384,], dtype="float8_e4m3fn", )
paddle.empty(list[37,7168,], dtype="float32", )
paddle.empty(list[249,7168,], dtype="float32", )
paddle.empty(tuple(1,64,71424,), dtype=Dtype(float32), )
paddle.empty(list[141,3584,], dtype="float32", )
paddle.empty(tuple(68480,56,), dtype=Dtype(float32), )
paddle.empty(tuple(82944,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(59136,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[230,7168,], dtype="float32", )
paddle.empty(tuple(49408,56,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,94720,), dtype=Dtype(float32), )
paddle.empty(list[193,8192,], dtype="float32", )
paddle.empty(list[19,8192,], dtype="float32", )
paddle.empty(tuple(62720,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(3584,0,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(2304,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(284,3584,), dtype=Dtype(float32), )
paddle.empty(tuple(1,64,4992,), dtype=Dtype(float32), )
paddle.empty(list[33554432,], dtype=Dtype(uint8), )
paddle.empty(list[7168,29312,], dtype="float8_e4m3fn", )
paddle.empty(list[13,7168,], dtype="float32", )
paddle.empty(tuple(1,64,65792,), dtype=Dtype(float32), )
paddle.empty(list[3584,7040,], dtype="float8_e4m3fn", )
paddle.empty(tuple(112,3584,), dtype=Dtype(float32), )
paddle.empty(tuple(16512,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[43,8192,], dtype="float32", )
paddle.empty(list[32,], dtype=Dtype(bfloat16), )
paddle.empty(tuple(1,56,24960,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,13824,), dtype=Dtype(float32), )
paddle.empty(list[50153536,], dtype=Dtype(bfloat16), )
paddle.empty(tuple(1,56,61440,), dtype=Dtype(float32), )
paddle.empty(list[3584,8448,], dtype="float8_e4m3fn", )
paddle.empty(tuple(45312,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(20480,56,), dtype=Dtype(float32), )
paddle.empty(tuple(51456,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(22912,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[59,8192,], dtype="float32", )
paddle.empty(list[8192,16256,], dtype="float8_e4m3fn", )
paddle.empty(list[156,8192,], dtype="float32", )
paddle.empty(tuple(39936,56,), dtype=Dtype(float32), )
paddle.empty(tuple(10496,64,), dtype=Dtype(float32), )
paddle.empty(tuple(1,28,36864,), dtype=Dtype(float32), )
paddle.empty(list[68,3584,], dtype="float32", )
paddle.empty(tuple(1,56,41984,), dtype=Dtype(float32), )
paddle.empty(tuple(63488,64,), dtype=Dtype(float32), )
paddle.empty(tuple(31744,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,64,1024,), dtype=Dtype(float32), )
paddle.empty(tuple(36608,64,), dtype=Dtype(float32), )
paddle.empty(list[8192,15360,], dtype="float8_e4m3fn", )
paddle.empty(list[5867,896,], dtype=Dtype(float32), )
paddle.empty(tuple(1,56,3584,), dtype=Dtype(float32), )
paddle.empty(tuple(3584,85504,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(49536,56,), dtype=Dtype(float32), )
paddle.empty(tuple(1,64,19840,), dtype=Dtype(float32), )
paddle.empty(tuple(1,64,12800,), dtype=Dtype(float32), )
paddle.empty(tuple(1,64,4864,), dtype=Dtype(float32), )
paddle.empty(list[8192,8320,], dtype="float8_e4m3fn", )
paddle.empty(tuple(20480,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,56,33024,), dtype=Dtype(float32), )
paddle.empty(list[167,8192,], dtype="float32", )
paddle.empty(tuple(63104,64,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,69632,), dtype=Dtype(float32), )
paddle.empty(list[30,8192,], dtype="float32", )
paddle.empty(tuple(35328,3584,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(31872,64,), dtype=Dtype(float32), )
paddle.empty(tuple(58112,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(53632,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(49280,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(11648,56,), dtype=Dtype(float32), )
paddle.empty(tuple(72704,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(292,7168,), dtype=Dtype(float32), )
paddle.empty(tuple(20480,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[171,7168,], dtype="float32", )
paddle.empty(tuple(59008,64,), dtype=Dtype(float32), )
paddle.empty(list[2,3,], )
paddle.empty(tuple(1,64,33536,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,68096,), dtype=Dtype(float32), )
paddle.empty(list[213,3584,], dtype="float32", )
paddle.empty(tuple(6784,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[18,3584,], dtype="float32", )
paddle.empty(tuple(8192,56,), dtype=Dtype(float32), )
paddle.empty(tuple(124,7168,), dtype=Dtype(float32), )
paddle.empty(tuple(57856,3584,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(3584,86528,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,56,75520,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,27648,), dtype=Dtype(float32), )
paddle.empty(tuple(54400,64,), dtype=Dtype(float32), )
paddle.empty(tuple(48768,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[3584,27520,], dtype="float8_e4m3fn", )
paddle.empty(tuple(78848,56,), dtype=Dtype(float32), )
paddle.empty(tuple(45056,56,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,21504,), dtype=Dtype(float32), )
paddle.empty(list[8192,6272,], dtype="float8_e4m3fn", )
paddle.empty(tuple(66048,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,64,55680,), dtype=Dtype(float32), )
paddle.empty(tuple(19456,64,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,5120,), dtype=Dtype(float32), )
paddle.empty(tuple(60160,64,), dtype=Dtype(float32), )
paddle.empty(list[7168,10368,], dtype="float8_e4m3fn", )
paddle.empty(tuple(25472,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(3584,1536,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,28,38400,), dtype=Dtype(float32), )
paddle.empty(list[5670,896,], dtype=Dtype(float32), )
paddle.empty(tuple(7168,48128,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(544,7168,), dtype=Dtype(float32), )
paddle.empty(tuple(28416,56,), dtype=Dtype(float32), )
paddle.empty(list[8192,25344,], dtype="float8_e4m3fn", )
paddle.empty(tuple(1,56,36096,), dtype=Dtype(float32), )
paddle.empty(tuple(692,3584,), dtype=Dtype(float32), )
paddle.empty(tuple(15744,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[151,7168,], dtype="float32", )
paddle.empty(tuple(3584,90112,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(4480,56,), dtype=Dtype(float32), )
paddle.empty(tuple(25984,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,28,22528,), dtype=Dtype(float32), )
paddle.empty(tuple(3584,45568,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(34816,64,), dtype=Dtype(float32), )
paddle.empty(list[3584,30848,], dtype="float8_e4m3fn", )
paddle.empty(tuple(384,56,), dtype=Dtype(float32), )
paddle.empty(tuple(85888,64,), dtype=Dtype(float32), )
paddle.empty(tuple(15872,56,), dtype=Dtype(float32), )
paddle.empty(list[8192,2816,], dtype="float8_e4m3fn", )
paddle.empty(tuple(1,64,51840,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,66944,), dtype=Dtype(float32), )
paddle.empty(list[150,7168,], dtype="float32", )
paddle.empty(list[8192,19968,], dtype="float8_e4m3fn", )
paddle.empty(list[8192,13824,], dtype="float8_e4m3fn", )
paddle.empty(tuple(1,56,29696,), dtype=Dtype(float32), )
paddle.empty(tuple(36608,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[8192,31744,], dtype="float8_e4m3fn", )
paddle.empty(tuple(33408,64,), dtype=Dtype(float32), )
paddle.empty(tuple(2560,56,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,26240,), dtype=Dtype(float32), )
paddle.empty(tuple(81408,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[32,8192,], dtype="float32", )
paddle.empty(tuple(84992,28,), dtype=Dtype(float32), )
paddle.empty(tuple(19712,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(7168,63488,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,64,45312,), dtype=Dtype(float32), )
paddle.empty(tuple(3584,94720,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,56,16384,), dtype=Dtype(float32), )
paddle.empty(tuple(1,64,54656,), dtype=Dtype(float32), )
paddle.empty(tuple(9856,56,), dtype=Dtype(float32), )
paddle.empty(tuple(336,28,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,71296,), dtype=Dtype(float32), )
paddle.empty(list[18800640,], dtype=Dtype(bfloat16), )
paddle.empty(tuple(56192,64,), dtype=Dtype(float32), )
paddle.empty(tuple(3584,75776,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(9088,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(49792,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(71680,3584,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(70144,28,), dtype=Dtype(float32), )
paddle.empty(tuple(23936,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[127,3584,], dtype="float32", )
paddle.empty(tuple(1,56,17152,), dtype=Dtype(float32), )
paddle.empty(tuple(13568,64,), dtype=Dtype(float32), )
paddle.empty(list[7168,14464,], dtype="float8_e4m3fn", )
paddle.empty(tuple(1,56,67072,), dtype=Dtype(float32), )
paddle.empty(tuple(18048,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(67072,56,), dtype=Dtype(float32), )
paddle.empty(list[142,7168,], dtype="float32", )
paddle.empty(list[76,8192,], dtype="float32", )
paddle.empty(tuple(1,64,52736,), dtype=Dtype(float32), )
paddle.empty(list[56,8192,], dtype="float32", )
paddle.empty(list[7168,17920,], dtype="float8_e4m3fn", )
paddle.empty(tuple(65024,28,), dtype=Dtype(float32), )
paddle.empty(tuple(16640,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(64000,56,), dtype=Dtype(float32), )
paddle.empty(list[183,8192,], dtype="float32", )
paddle.empty(tuple(5760,64,), dtype=Dtype(float32), )
paddle.empty(list[7168,5120,], dtype="float8_e4m3fn", )
paddle.empty(list[246,3584,], dtype="float32", )
paddle.empty(list[159,8192,], dtype="float32", )
paddle.empty(tuple(1,56,38400,), dtype=Dtype(float32), )
paddle.empty(list[5578,896,], dtype=Dtype(float32), )
paddle.empty(tuple(24576,3584,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(59136,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[256,7168,], dtype="float32", )
paddle.empty(list[242,3584,], dtype="float32", )
paddle.empty(list[124,3584,], dtype="float32", )
paddle.empty(list[229,3584,], dtype="float32", )
paddle.empty(tuple(184,7168,), dtype=Dtype(float32), )
paddle.empty(tuple(77824,28,), dtype=Dtype(float32), )
paddle.empty(tuple(49920,56,), dtype=Dtype(float32), )
paddle.empty(tuple(30336,64,), dtype=Dtype(float32), )
paddle.empty(tuple(1,64,13312,), dtype=Dtype(float32), )
paddle.empty(list[7168,20480,], dtype="float8_e4m3fn", )
paddle.empty(tuple(1,64,4096,), dtype=Dtype(float32), )
paddle.empty(tuple(55296,56,), dtype=Dtype(float32), )
paddle.empty(list[211,3584,], dtype="float32", )
paddle.empty(list[117,7168,], dtype="float32", )
paddle.empty(tuple(94720,3584,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,64,38272,), dtype=Dtype(float32), )
paddle.empty(tuple(23168,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[7168,6528,], dtype="float8_e4m3fn", )
paddle.empty(tuple(2176,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(328,7168,), dtype=Dtype(float32), )
paddle.empty(tuple(5248,64,), dtype=Dtype(float32), )
paddle.empty(tuple(1,64,47616,), dtype=Dtype(float32), )
paddle.empty(tuple(72320,56,), dtype=Dtype(float32), )
paddle.empty(tuple(208,7168,), dtype=Dtype(float32), )
paddle.empty(tuple(5888,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(30976,64,), dtype=Dtype(float32), )
paddle.empty(list[95,7168,], dtype="float32", )
paddle.empty(tuple(520,3584,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,6784,), dtype=Dtype(float32), )
paddle.empty(list[8192,23040,], dtype="float8_e4m3fn", )
paddle.empty(tuple(1,56,30720,), dtype=Dtype(float32), )
paddle.empty(tuple(34816,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,64,62208,), dtype=Dtype(float32), )
paddle.empty(tuple(22272,64,), dtype=Dtype(float32), )
paddle.empty(tuple(140,3584,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,60928,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,2944,), dtype=Dtype(float32), )
paddle.empty(list[123,7168,], dtype="float32", )
paddle.empty(tuple(1,56,45440,), dtype=Dtype(float32), )
paddle.empty(tuple(52736,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[3584,12544,], dtype="float8_e4m3fn", )
paddle.empty(tuple(1,56,53376,), dtype=Dtype(float32), )
paddle.empty(tuple(12544,56,), dtype=Dtype(float32), )
paddle.empty(tuple(74496,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,56,77312,), dtype=Dtype(float32), )
paddle.empty(tuple(18688,56,), dtype=Dtype(float32), )
paddle.empty(tuple(3584,3584,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,28,70656,), dtype=Dtype(float32), )
paddle.empty(tuple(3584,28160,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[7168,12544,], dtype="float8_e4m3fn", )
paddle.empty(tuple(111616,56,), dtype=Dtype(float32), )
paddle.empty(tuple(48,7168,), dtype=Dtype(float32), )
paddle.empty(tuple(5120,64,), dtype=Dtype(float32), )
paddle.empty(tuple(3584,24064,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(31488,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,28,22016,), dtype=Dtype(float32), )
paddle.empty(list[5619,896,], dtype=Dtype(float32), )
paddle.empty(tuple(1,56,73728,), dtype=Dtype(float32), )
paddle.empty(tuple(59008,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,64,63232,), dtype=Dtype(float32), )
paddle.empty(tuple(45568,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(48000,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,64,54272,), dtype=Dtype(float32), )
paddle.empty(tuple(1,64,39552,), dtype=Dtype(float32), )
paddle.empty(tuple(83328,64,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,65280,), dtype=Dtype(float32), )
paddle.empty(shape=list[46784,1280,], dtype=Dtype(bfloat16), )
paddle.empty(tuple(17920,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(76416,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(29696,56,), dtype=Dtype(float32), )
paddle.empty(list[8192,29440,], dtype="float8_e4m3fn", )
paddle.empty(tuple(3584,74752,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(7168,33792,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[175,7168,], dtype="float32", )
paddle.empty(tuple(31744,3584,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(7168,13824,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(12288,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(36736,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[53,7168,], dtype="float32", )
paddle.empty(tuple(1,28,44544,), dtype=Dtype(float32), )
paddle.empty(tuple(55168,56,), dtype=Dtype(float32), )
paddle.empty(list[3584,27264,], dtype="float8_e4m3fn", )
paddle.empty(tuple(82048,64,), dtype=Dtype(float32), )
paddle.empty(list[7168,7424,], dtype="float8_e4m3fn", )
paddle.empty(tuple(3584,64,), dtype=Dtype(float32), )
paddle.empty(tuple(440,7168,), dtype=Dtype(float32), )
paddle.empty(tuple(7168,79360,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,28,37888,), dtype=Dtype(float32), )
paddle.empty(tuple(23680,56,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,67584,), dtype=Dtype(float32), )
paddle.empty(list[7168,4736,], dtype="float8_e4m3fn", )
paddle.empty(tuple(69632,56,), dtype=Dtype(float32), )
paddle.empty(tuple(49152,28,), dtype=Dtype(float32), )
paddle.empty(list[7168,10624,], dtype="float8_e4m3fn", )
paddle.empty(list[8192,21248,], dtype="float8_e4m3fn", )
paddle.empty(tuple(1,64,14720,), dtype=Dtype(float32), )
paddle.empty(tuple(24192,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,64,20096,), dtype=Dtype(float32), )
paddle.empty(tuple(12544,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[180,3584,], dtype="float32", )
paddle.empty(tuple(1,64,73728,), dtype=Dtype(float32), )
paddle.empty(list[7168,30464,], dtype="float8_e4m3fn", )
paddle.empty(tuple(1,56,55296,), dtype=Dtype(float32), )
paddle.empty(list[8192,12288,], dtype="float8_e4m3fn", )
paddle.empty(tuple(95872,64,), dtype=Dtype(float32), )
paddle.empty(tuple(94208,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(52992,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(40576,64,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,28672,), dtype=Dtype(float32), )
paddle.empty(tuple(62720,64,), dtype=Dtype(float32), )
paddle.empty(tuple(21760,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(9856,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,28,49664,), dtype=Dtype(float32), )
paddle.empty(tuple(15616,56,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,8192,), dtype=Dtype(float32), )
paddle.empty(tuple(53888,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(31744,56,), dtype=Dtype(float32), )
paddle.empty(list[3584,10624,], dtype="float8_e4m3fn", )
paddle.empty(tuple(7168,44032,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(23296,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,56,21120,), dtype=Dtype(float32), )
paddle.empty(tuple(572,3584,), dtype=Dtype(float32), )
paddle.empty(tuple(48128,64,), dtype=Dtype(float32), )
paddle.empty(list[3584,26112,], dtype="float8_e4m3fn", )
paddle.empty(tuple(24064,3584,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,56,38912,), dtype=Dtype(float32), )
paddle.empty(tuple(34688,56,), dtype=Dtype(float32), )
paddle.empty(tuple(41216,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(77568,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(16384,56,), dtype=Dtype(float32), )
paddle.empty(tuple(3584,35840,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(56704,56,), dtype=Dtype(float32), )
paddle.empty(tuple(1,64,60800,), dtype=Dtype(float32), )
paddle.empty(tuple(25856,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[238432,], dtype=Dtype(bfloat16), )
paddle.empty(tuple(25728,64,), dtype=Dtype(float32), )
paddle.empty(tuple(3584,39424,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[8192,31872,], dtype="float8_e4m3fn", )
paddle.empty(tuple(83968,3584,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(50816,64,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,66560,), dtype=Dtype(float32), )
paddle.empty(list[8192,4480,], dtype="float8_e4m3fn", )
paddle.empty(tuple(70144,56,), dtype=Dtype(float32), )
paddle.empty(shape=list[30400,1280,], dtype=Dtype(bfloat16), )
paddle.empty(tuple(1,56,7808,), dtype=Dtype(float32), )
paddle.empty(tuple(63872,64,), dtype=Dtype(float32), )
paddle.empty(list[7168,10752,], dtype="float8_e4m3fn", )
paddle.empty(tuple(9728,56,), dtype=Dtype(float32), )
paddle.empty(tuple(4096,57344,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(640,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(45824,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[8192,15104,], dtype="float8_e4m3fn", )
paddle.empty(tuple(1,64,33792,), dtype=Dtype(float32), )
paddle.empty(tuple(71168,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(72704,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,56,14592,), dtype=Dtype(float32), )
paddle.empty(list[8192,256,], dtype="float8_e4m3fn", )
paddle.empty(tuple(31360,56,), dtype=Dtype(float32), )
paddle.empty(list[146,7168,], dtype="float32", )
paddle.empty(tuple(1,56,83456,), dtype=Dtype(float32), )
paddle.empty(list[39776256,], dtype=Dtype(bfloat16), )
paddle.empty(tuple(720,3584,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,128,), dtype=Dtype(float32), )
paddle.empty(list[54,3584,], dtype="float32", )
paddle.empty(tuple(89600,56,), dtype=Dtype(float32), )
paddle.empty(list[24,8192,], dtype="float32", )
paddle.empty(tuple(22144,64,), dtype=Dtype(float32), )
paddle.empty(list[7168,21504,], dtype="float8_e4m3fn", )
paddle.empty(list[524288,], dtype=Dtype(int32), )
paddle.empty(list[144,8192,], dtype="float32", )
paddle.empty(tuple(45184,56,), dtype=Dtype(float32), )
paddle.empty(tuple(11520,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(7808,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(45056,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(7168,16896,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[232192,], dtype=Dtype(bfloat16), )
paddle.empty(list[143,7168,], dtype="float32", )
paddle.empty(tuple(62464,56,), dtype=Dtype(float32), )
paddle.empty(tuple(54912,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,56,4224,), dtype=Dtype(float32), )
paddle.empty(tuple(1,28,34816,), dtype=Dtype(float32), )
paddle.empty(tuple(18176,56,), dtype=Dtype(float32), )
paddle.empty(tuple(2048,3584,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(60416,64,), dtype=Dtype(float32), )
paddle.empty(tuple(76544,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,64,71168,), dtype=Dtype(float32), )
paddle.empty(tuple(1,64,79488,), dtype=Dtype(float32), )
paddle.empty(list[221,8192,], dtype="float32", )
paddle.empty(tuple(1,64,2176,), dtype=Dtype(float32), )
paddle.empty(tuple(3456,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[8192,11904,], dtype="float8_e4m3fn", )
paddle.empty(tuple(62976,3584,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(47744,64,), dtype=Dtype(float32), )
paddle.empty(list[8192,3968,], dtype="float8_e4m3fn", )
paddle.empty(list[135,7168,], dtype="float32", )
paddle.empty(list[44,8192,], dtype="float32", )
paddle.empty(tuple(1,64,60928,), dtype=Dtype(float32), )
paddle.empty(tuple(78592,56,), dtype=Dtype(float32), )
paddle.empty(tuple(12800,3584,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(3584,73728,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,56,17408,), dtype=Dtype(float32), )
paddle.empty(list[3584,20864,], dtype="float8_e4m3fn", )
paddle.empty(list[7168,26112,], dtype="float8_e4m3fn", )
paddle.empty(tuple(1,64,62336,), dtype=Dtype(float32), )
paddle.empty(tuple(52224,3584,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(40832,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,56,18048,), dtype=Dtype(float32), )
paddle.empty(tuple(28800,56,), dtype=Dtype(float32), )
paddle.empty(tuple(52224,64,), dtype=Dtype(float32), )
paddle.empty(tuple(5504,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,64,39936,), dtype=Dtype(float32), )
paddle.empty(tuple(1,64,44672,), dtype=Dtype(float32), )
paddle.empty(list[8192,30976,], dtype="float8_e4m3fn", )
paddle.empty(tuple(492,3584,), dtype=Dtype(float32), )
paddle.empty(tuple(25728,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,56,66688,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,75264,), dtype=Dtype(float32), )
paddle.empty(list[8192,32512,], dtype="float8_e4m3fn", )
paddle.empty(tuple(1,64,32128,), dtype=Dtype(float32), )
paddle.empty(tuple(0,56,), dtype=Dtype(float32), )
paddle.empty(shape=list[3040,1280,], dtype=Dtype(bfloat16), )
paddle.empty(tuple(16384,64,), dtype=Dtype(float32), )
paddle.empty(tuple(476,3584,), dtype=Dtype(float32), )
paddle.empty(tuple(37888,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(2944,56,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,95744,), dtype=Dtype(float32), )
paddle.empty(tuple(1,64,52480,), dtype=Dtype(float32), )
paddle.empty(tuple(61568,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,56,60160,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,11776,), dtype=Dtype(float32), )
paddle.empty(tuple(1,64,25472,), dtype=Dtype(float32), )
paddle.empty(tuple(572,7168,), dtype=Dtype(float32), )
paddle.empty(tuple(2432,64,), dtype=Dtype(float32), )
paddle.empty(tuple(72576,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(42880,56,), dtype=Dtype(float32), )
paddle.empty(list[5656,896,], dtype=Dtype(float32), )
paddle.empty(list[3584,21120,], dtype="float8_e4m3fn", )
paddle.empty(tuple(20992,28,), dtype=Dtype(float32), )
paddle.empty(tuple(41984,3584,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(27136,28,), dtype=Dtype(float32), )
paddle.empty(tuple(1024,64,), dtype=Dtype(float32), )
paddle.empty(tuple(35968,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,64,26496,), dtype=Dtype(float32), )
paddle.empty(tuple(1,64,64768,), dtype=Dtype(float32), )
paddle.empty(tuple(89216,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[160,7168,], dtype="float32", )
paddle.empty(tuple(1,64,60288,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,38400,), dtype=Dtype(float32), )
paddle.empty(tuple(724,7168,), dtype=Dtype(float32), )
paddle.empty(list[178,3584,], dtype="float32", )
paddle.empty(tuple(7168,61952,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(79488,64,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,1920,), dtype=Dtype(float32), )
paddle.empty(list[162,7168,], dtype="float32", )
paddle.empty(list[3584,17920,], dtype="float8_e4m3fn", )
paddle.empty(tuple(640,3584,), dtype=Dtype(float32), )
paddle.empty(tuple(6144,28,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,37376,), dtype=Dtype(float32), )
paddle.empty(list[8192,29568,], dtype="float8_e4m3fn", )
paddle.empty(tuple(39552,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[5619,896,], dtype=Dtype(bfloat16), )
paddle.empty(list[8192,22144,], dtype="float8_e4m3fn", )
paddle.empty(list[7168,20608,], dtype="float8_e4m3fn", )
paddle.empty(tuple(1,64,42240,), dtype=Dtype(float32), )
paddle.empty(tuple(66560,56,), dtype=Dtype(float32), )
paddle.empty(list[5849,896,], dtype=Dtype(float32), )
paddle.empty(tuple(1,64,40576,), dtype=Dtype(float32), )
paddle.empty(tuple(56064,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(32896,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(28160,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(shape=list[30272,1280,], dtype=Dtype(bfloat16), )
paddle.empty(tuple(1,64,24704,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,5376,), dtype=Dtype(float32), )
paddle.empty(tuple(18560,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(74496,64,), dtype=Dtype(float32), )
paddle.empty(list[64,], dtype=Dtype(int64), )
paddle.empty(list[251,8192,], dtype="float32", )
paddle.empty(tuple(17024,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,64,17152,), dtype=Dtype(float32), )
paddle.empty(list[3584,4992,], dtype="float8_e4m3fn", )
paddle.empty(list[77,7168,], dtype="float32", )
paddle.empty(list[201,8192,], dtype="float32", )
paddle.empty(tuple(58112,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(list[7168,16768,], dtype="float8_e4m3fn", )
paddle.empty(tuple(7168,12288,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1024,56,), dtype=Dtype(float32), )
paddle.empty(tuple(3072,56,), dtype=Dtype(float32), )
paddle.empty(shape=list[47808,1280,], dtype=Dtype(bfloat16), )
paddle.empty(tuple(1,64,40960,), dtype=Dtype(float32), )
paddle.empty(tuple(63616,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(55808,64,), dtype=Dtype(float32), )
paddle.empty(list[8192,7168,], dtype="float8_e4m3fn", )
paddle.empty(tuple(18048,64,), dtype=Dtype(float32), )
paddle.empty(tuple(3584,72192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(15744,56,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,44544,), dtype=Dtype(float32), )
paddle.empty(list[8192,11776,], dtype="float8_e4m3fn", )
paddle.empty(list[3584,10112,], dtype="float8_e4m3fn", )
paddle.empty(tuple(55296,7168,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(1,64,3200,), dtype=Dtype(float32), )
paddle.empty(tuple(30208,28,), dtype=Dtype(float32), )
paddle.empty(tuple(1,64,55552,), dtype=Dtype(float32), )
paddle.empty(tuple(1,64,33280,), dtype=Dtype(float32), )
paddle.empty(tuple(58752,64,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,20224,), dtype=Dtype(float32), )
paddle.empty(list[3584,31232,], dtype="float8_e4m3fn", )
paddle.empty(tuple(37632,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(11264,64,), dtype=Dtype(float32), )
paddle.empty(tuple(8064,64,), dtype=Dtype(float32), )
paddle.empty(tuple(1,28,13824,), dtype=Dtype(float32), )
paddle.empty(list[5818,896,], dtype=Dtype(float32), )
paddle.empty(tuple(1,28,11776,), dtype=Dtype(float32), )
paddle.empty(tuple(59392,28,), dtype=Dtype(float32), )
paddle.empty(tuple(27648,56,), dtype=Dtype(float32), )
paddle.empty(list[8192,31104,], dtype="float8_e4m3fn", )
paddle.empty(list[8192,19712,], dtype="float8_e4m3fn", )
paddle.empty(tuple(54784,28,), dtype=Dtype(float32), )
paddle.empty(tuple(1,28,71680,), dtype=Dtype(float32), )
paddle.empty(tuple(44160,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty(tuple(98816,28,), dtype=Dtype(float32), )
paddle.empty(tuple(1,56,20096,), dtype=Dtype(float32), )
paddle.empty(tuple(592,3584,), dtype=Dtype(float32), )
paddle.empty(tuple(6272,8192,), dtype=Dtype(float8_e4m3fn), )
paddle.empty_like(Tensor([108],"uint8"), )
paddle.empty_like(Tensor([108],"uint8"), )
paddle.empty_like(Tensor([172],"uint8"), )
paddle.empty_like(Tensor([],"int64"), )
paddle.empty_like(Tensor([5],"uint8"), )
paddle.empty_like(Tensor([],"int64"), )
paddle.empty_like(Tensor([2, 3],"float32"), )
paddle.empty_like(Tensor([1],"bool"), )
paddle.empty_like(Tensor([64],"int64"), )
paddle.empty_like(Tensor([5],"uint8"), )
paddle.empty_like(Tensor([1],"float32"), )
